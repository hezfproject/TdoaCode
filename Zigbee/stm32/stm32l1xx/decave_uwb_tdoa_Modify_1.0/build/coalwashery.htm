<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\coalwashery.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\coalwashery.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Tue Jan 29 11:33:59 2019
<BR><P>
<H3>Maximum Stack Usage =        824 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Application &rArr; AppEventsProcess &rArr; TdoaSendCardReportToUart &rArr; UwbBsmacSendPacketProc &rArr; PrintfUtil_vPrintf &rArr; vNum2String
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[20]">COMP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1f]">DAC_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from mcu.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from mcu.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from mcu.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from mcu.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[22]">LCD_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from sleep.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from mcu.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[38]">SystemInit</a> from system_stm32l1xx.o(.text) referenced from startup_stm32l1xx_md.o(.text)
 <LI><a href="#[c]">TAMPER_STAMP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[65]">TDOARxGoodCallback</a> from instance.o(.text) referenced from instance.o(.text)
 <LI><a href="#[a0]">TDOATxCallback</a> from instance.o(.text) referenced from instance.o(.text)
 <LI><a href="#[24]">TIM10_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[25]">TIM11_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[35]">TIM6_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[36]">TIM7_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[23]">TIM9_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32l1xx_usart.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[34]">USB_FS_WKUP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1d]">USB_HP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1e]">USB_LP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[39]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l1xx_md.o(.text)
 <LI><a href="#[3a]">fputc</a> from com_config.o(.text) referenced from printfb.o(i.__0printf$bare)
 <LI><a href="#[37]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[1a8]">vPutC</a> from printf_util.o(.text) referenced from printf_util.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[39]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(.text)
</UL>
<P><STRONG><a name="[1c0]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1b8]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c1]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1c2]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1c3]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1c4]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1c5]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[5d]"></a>interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mcu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_del
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_take
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_update
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_unset
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_take_all
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_set
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_add_reload
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_add
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_powersave_wakeup
</UL>

<P><STRONG><a name="[5e]"></a>interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_del
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_take
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_update
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_unset
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_take_all
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_set
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_add_reload
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_add
</UL>

<P><STRONG><a name="[141]"></a>vCheckBattery</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, application.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_each
</UL>

<P><STRONG><a name="[3d]"></a>process_deca_irq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = process_deca_irq &rArr; dwt_isr &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[40]"></a>AppEventsProcess</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = AppEventsProcess &rArr; TdoaSendCardReportToUart &rArr; UwbBsmacSendPacketProc &rArr; PrintfUtil_vPrintf &rArr; vNum2String
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_unset
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_take_all
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_set
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaSendTagPoll
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaSendCardReportToUart
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaRxCardMsgProc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRunState
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaGetLocalInstStructurePtr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfUtil_vPrintf
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppInstanceInit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application
</UL>

<P><STRONG><a name="[4f]"></a>Appsleepinit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, application.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setdblrxbuffmode
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enableautoack
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuresleep
</UL>

<P><STRONG><a name="[53]"></a>DecaTdoaEquipEventSet</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DecaTdoaEquipEventSet &rArr; event_timer_add &rArr; event_timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_set
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_add_reload
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_add
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaGetLocalInstStructurePtr
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppInstanceInit
</UL>

<P><STRONG><a name="[56]"></a>Application</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = Application &rArr; AppEventsProcess &rArr; TdoaSendCardReportToUart &rArr; UwbBsmacSendPacketProc &rArr; PrintfUtil_vPrintf &rArr; vNum2String
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_update
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogReset
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfUtil_vPrintf
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppInstanceInit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppEventsProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37]"></a>main</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = main &rArr; Application &rArr; AppEventsProcess &rArr; TdoaSendCardReportToUart &rArr; UwbBsmacSendPacketProc &rArr; PrintfUtil_vPrintf &rArr; vNum2String
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portResetTickCnt
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfUtil_u8Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[5c]"></a>event_timer_take</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, timer_event.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_enable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_disable
</UL>

<P><STRONG><a name="[41]"></a>event_timer_take_all</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = event_timer_take_all
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_enable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppEventsProcess
</UL>

<P><STRONG><a name="[5f]"></a>event_timer_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timer_event.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[49]"></a>event_timer_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, timer_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = event_timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_enable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaMsgPackInsetUartBuff
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDOARxGoodCallback
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_add
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaRxCardMsgProc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRunState
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecaTdoaEquipEventSet
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppEventsProcess
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[48]"></a>event_timer_unset</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, timer_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = event_timer_unset
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_enable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaRxCardMsgProc
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppEventsProcess
</UL>

<P><STRONG><a name="[55]"></a>event_timer_add</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, timer_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = event_timer_add &rArr; event_timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_timer_idx
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_enable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_disable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecaTdoaEquipEventSet
</UL>

<P><STRONG><a name="[54]"></a>event_timer_add_reload</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, timer_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = event_timer_add_reload
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_timer_idx
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_enable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecaTdoaEquipEventSet
</UL>

<P><STRONG><a name="[62]"></a>event_timer_del</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, timer_event.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_timer_idx
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_enable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_disable
</UL>

<P><STRONG><a name="[58]"></a>event_timer_update</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, timer_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = event_timer_update
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysClock
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_enable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_next_tick
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application
</UL>

<P><STRONG><a name="[64]"></a>event_timer_next_tick</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer_event.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_update
</UL>

<P><STRONG><a name="[42]"></a>TdoaGetLocalInstStructurePtr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, instance.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaTagInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaAnchorInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRxTestMsgProc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRxMsgToCardMsgProc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRxRssiLevel
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDOARxGoodCallback
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaSendTagPoll
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRunState
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecaTdoaEquipEventSet
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppEventsProcess
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaCardMsdBuildUnity
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaCardMsdBuildUnityNew
</UL>

<P><STRONG><a name="[6e]"></a>TdoaGetLocalCardStructurePtr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, instance.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaRxCardMsgProc
</UL>

<P><STRONG><a name="[1c6]"></a>TdoaGetLocalMsgArrayStructurePtr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, instance.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>TdoaGetLocalSendPackStructurePtr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, instance.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaMsgPackInsetUartBuff
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaDataBuffClear
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaSendCardReportToUart
</UL>

<P><STRONG><a name="[a0]"></a>TDOATxCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, instance.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> instance.o(.text)
</UL>
<P><STRONG><a name="[1c7]"></a>TDOARxTimeoutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, instance.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>TDOARxErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, instance.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>TDOARxGoodCallback</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, instance.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TDOARxGoodCallback &rArr; dwt_rxenable &rArr; PrintfUtil_vPrintf &rArr; vNum2String
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_sethsrb
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxtimestamp
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxdata
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_set
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaGetLocalInstStructurePtr
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> instance.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>TdoaDataBuffClear</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, instance.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TdoaDataBuffClear
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaGetLocalSendPackStructurePtr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaMsgPackInsetUartBuff
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaSendCardReportToUart
</UL>

<P><STRONG><a name="[6b]"></a>TdoaMsgPackInsetUartBuff</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, instance.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TdoaMsgPackInsetUartBuff &rArr; TdoaClearMsgArray
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaClearMsgArray
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaDataBuffClear
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaGetLocalSendPackStructurePtr
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_set
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaRxCardMsgProc
</UL>

<P><STRONG><a name="[4d]"></a>TdoaRxCardMsgProc</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, instance.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = TdoaRxCardMsgProc &rArr; TdoaRxQuickCardMsgProc &rArr; TdoaCardMsdBuildUnity &rArr; PrintfUtil_vPrintf &rArr; vNum2String
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaRxSlowCardMsgProc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaRxQuickCardMsgProc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaMsgPackInsetUartBuff
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaGetLocalCardStructurePtr
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_unset
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_set
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfUtil_vPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppEventsProcess
</UL>

<P><STRONG><a name="[72]"></a>TdoaInstConfigFrameHeader</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, instance.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TdoaInstConfigFrameHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaSetMacFrameData
</UL>

<P><STRONG><a name="[71]"></a>TdoaSetMacFrameData</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, instance.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TdoaSetMacFrameData &rArr; TdoaInstConfigFrameHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstConfigFrameHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaSendTagPoll
</UL>

<P><STRONG><a name="[73]"></a>TdoaInstSendTagPoolPacket</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, instance.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TdoaInstSendTagPoolPacket &rArr; dwt_starttx &rArr; dwt_entersleepaftertx &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxfctrl
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxdata
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_starttx
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setdelayedtrxtime
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfUtil_vPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaSendTagPoll
</UL>

<P><STRONG><a name="[46]"></a>TdoaSendTagPoll</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, instance.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TdoaSendTagPoll &rArr; TdoaInstSendTagPoolPacket &rArr; dwt_starttx &rArr; dwt_entersleepaftertx &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portGetTickCnt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setleds
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstSendTagPoolPacket
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaSetMacFrameData
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaGetLocalInstStructurePtr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfUtil_vPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppEventsProcess
</UL>

<P><STRONG><a name="[7b]"></a>TdoaInstRxRssiLevel</STRONG> (Thumb, 434 bytes, Stack size 72 bytes, instance.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = TdoaInstRxRssiLevel &rArr; log10 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readdignostics
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaGetLocalInstStructurePtr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRxTestMsgProc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRxMsgToCardMsgProc
</UL>

<P><STRONG><a name="[83]"></a>TdoaInstRxMsgToCardMsgProc</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, instance.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = TdoaInstRxMsgToCardMsgProc &rArr; TdoaInstRxRssiLevel &rArr; log10 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRxRssiLevel
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaGetLocalInstStructurePtr
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRunState
</UL>

<P><STRONG><a name="[84]"></a>TdoaInstRxTestMsgProc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, instance.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = TdoaInstRxTestMsgProc &rArr; TdoaInstRxRssiLevel &rArr; log10 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRxRssiLevel
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaGetLocalInstStructurePtr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfUtil_vPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRunState
</UL>

<P><STRONG><a name="[85]"></a>TdoaAnchorInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, instance.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TdoaAnchorInit &rArr; dwt_rxenable &rArr; PrintfUtil_vPrintf &rArr; vNum2String
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxaftertxdelay
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setpanid
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setautorxreenable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setaddress16
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setdblrxbuffmode
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaGetLocalInstStructurePtr
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRunState
</UL>

<P><STRONG><a name="[8a]"></a>TdoaTagInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, instance.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TdoaTagInit &rArr; dwt_enableframefilter &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setpanid
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setautorxreenable
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enableframefilter
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enableautoack
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaGetLocalInstStructurePtr
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRunState
</UL>

<P><STRONG><a name="[4a]"></a>TdoaInstRunState</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, instance.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = TdoaInstRunState &rArr; TdoaInstRxTestMsgProc &rArr; TdoaInstRxRssiLevel &rArr; log10 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaTagInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaAnchorInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRxTestMsgProc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRxMsgToCardMsgProc
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_set
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaGetLocalInstStructurePtr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfUtil_vPrintf
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppEventsProcess
</UL>

<P><STRONG><a name="[8d]"></a>Dw1000Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, instance.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Dw1000Init &rArr; dwt_initialise &rArr; _dwt_nvmread &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DW1000
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_wakeup_dw1000
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_set_dw1000_slowrate
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_set_dw1000_fastrate
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_softreset
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setleds
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setinterrupt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readdevid
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configeventcounters
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfUtil_vPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[97]"></a>TdoaInstChannelConfig</STRONG> (Thumb, 590 bytes, Stack size 32 bytes, instance.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TdoaInstChannelConfig &rArr; dwt_configure &rArr; _dwt_configlde &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_settxantennadelay
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setsmarttxpower
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxantennadelay
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readantennadelay
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_getotptxpower
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuretxrf
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfUtil_vPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppInstanceInit
</UL>

<P><STRONG><a name="[9f]"></a>TdoaInstanceBaseMsginit</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, instance.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TdoaInstanceBaseMsginit
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setcallbacks
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppInstanceInit
</UL>

<P><STRONG><a name="[4c]"></a>AppInstanceInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, instance.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AppInstanceInit &rArr; TdoaInstChannelConfig &rArr; dwt_configure &rArr; _dwt_configlde &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaBuildPackBuffInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstanceBaseMsginit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstChannelConfig
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecaTdoaEquipEventSet
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppEventsProcess
</UL>

<P><STRONG><a name="[4e]"></a>TdoaSendCardReportToUart</STRONG> (Thumb, 322 bytes, Stack size 336 bytes, instance.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = TdoaSendCardReportToUart &rArr; UwbBsmacSendPacketProc &rArr; PrintfUtil_vPrintf &rArr; vNum2String
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbBsmacSendPacketProc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbBsmacBlidPacketHeadProc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaDataBuffClear
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaGetLocalSendPackStructurePtr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfUtil_vPrintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppEventsProcess
</UL>

<P><STRONG><a name="[1c9]"></a>openspi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, deca_spi.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>closespi</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, deca_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>

<P><STRONG><a name="[a8]"></a>writetospi</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, deca_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = writetospi
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>

<P><STRONG><a name="[ad]"></a>readfromspi</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, deca_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[ae]"></a>writetoLCD</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, deca_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[8e]"></a>reset_DW1000</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = reset_DW1000 &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dw1000Init
</UL>

<P><STRONG><a name="[b1]"></a>SPI_ConfigFastRate</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_ConfigFastRate &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_set_dw1000_slowrate
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_set_dw1000_fastrate
</UL>

<P><STRONG><a name="[b4]"></a>RTC_Configuration</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WakeUpClockConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetWakeUpCounter
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCResetCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_RTCAccessCmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepInit
</UL>

<P><STRONG><a name="[8f]"></a>port_set_dw1000_slowrate</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = port_set_dw1000_slowrate &rArr; SPI_ConfigFastRate &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ConfigFastRate
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dw1000Init
</UL>

<P><STRONG><a name="[96]"></a>port_set_dw1000_fastrate</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = port_set_dw1000_fastrate &rArr; SPI_ConfigFastRate &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ConfigFastRate
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dw1000Init
</UL>

<P><STRONG><a name="[91]"></a>port_wakeup_dw1000</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = port_wakeup_dw1000 &rArr; Sleep &rArr; SysTick_Configuration &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dw1000Init
</UL>

<P><STRONG><a name="[c5]"></a>gettie</STRONG> (Thumb, 82 bytes, Stack size 28 bytes, dotie.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avg_ANH_Tie
</UL>

<P><STRONG><a name="[c3]"></a>avg_ANH_Tie</STRONG> (Thumb, 538 bytes, Stack size 88 bytes, dotie.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettie
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[6d]"></a>TdoaClearMsgArray</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dotie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TdoaClearMsgArray
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaMsgPackInsetUartBuff
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaCardMsdBuildUnity
</UL>

<P><STRONG><a name="[a2]"></a>TdoaBuildPackBuffInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dotie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TdoaBuildPackBuffInit
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppInstanceInit
</UL>

<P><STRONG><a name="[c6]"></a>TdoaCardMsdBuildUnityNew</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, dotie.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaGetLocalInstStructurePtr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[c7]"></a>TdoaCardMsdBuildUnity</STRONG> (Thumb, 1306 bytes, Stack size 104 bytes, dotie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TdoaCardMsdBuildUnity &rArr; PrintfUtil_vPrintf &rArr; vNum2String
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaClearMsgArray
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaGetLocalInstStructurePtr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfUtil_vPrintf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaRxSlowCardMsgProc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaRxQuickCardMsgProc
</UL>

<P><STRONG><a name="[ca]"></a>TdoaCheckRxMsgStandardID</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dotie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TdoaCheckRxMsgStandardID
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaRxQuickCardMsgProc
</UL>

<P><STRONG><a name="[70]"></a>TdoaRxSlowCardMsgProc</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dotie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = TdoaRxSlowCardMsgProc &rArr; TdoaCardMsdBuildUnity &rArr; PrintfUtil_vPrintf &rArr; vNum2String
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaCardMsdBuildUnity
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaRxCardMsgProc
</UL>

<P><STRONG><a name="[6f]"></a>TdoaRxQuickCardMsgProc</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, dotie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = TdoaRxQuickCardMsgProc &rArr; TdoaCardMsdBuildUnity &rArr; PrintfUtil_vPrintf &rArr; vNum2String
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfUtil_vPrintf
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaCheckRxMsgStandardID
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaCardMsdBuildUnity
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaRxCardMsgProc
</UL>

<P><STRONG><a name="[1ca]"></a>exchange_data</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, as3933.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>SpiReadWriteRegister</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, as3933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SpiReadWriteRegister &rArr; SPI2_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_As3933
</UL>

<P><STRONG><a name="[cd]"></a>config_As3933</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, as3933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = config_As3933 &rArr; SpiReadWriteRegister &rArr; SPI2_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadWriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_as3933
</UL>

<P><STRONG><a name="[ce]"></a>EXCIT_Configuration</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, as3933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EXCIT_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_as3933
</UL>

<P><STRONG><a name="[d0]"></a>as3933_data_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, as3933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = as3933_data_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_as3933
</UL>

<P><STRONG><a name="[d1]"></a>init_as3933</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, as3933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = init_as3933 &rArr; EXCIT_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_spi2_as3933
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as3933_data_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXCIT_Configuration
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_As3933
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[d3]"></a>UwbWriteDataToStm32</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bsmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UwbWriteDataToStm32
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbBsmacSendPacketProc
</UL>

<P><STRONG><a name="[da]"></a>UwbBsmacBuildPacketMacHead</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, bsmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UwbBsmacBuildPacketMacHead
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbBsmacSendPacketProc
</UL>

<P><STRONG><a name="[d9]"></a>UwbBsmacBuildPacketNetHead</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, bsmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UwbBsmacBuildPacketNetHead
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbBsmacSendPacketProc
</UL>

<P><STRONG><a name="[d6]"></a>UwbBsmacBuildPacketData</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, bsmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UwbBsmacBuildPacketData &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbBsmacSendPacketProc
</UL>

<P><STRONG><a name="[a4]"></a>UwbBsmacSendPacketProc</STRONG> (Thumb, 112 bytes, Stack size 352 bytes, bsmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = UwbBsmacSendPacketProc &rArr; PrintfUtil_vPrintf &rArr; vNum2String
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfUtil_vPrintf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbBsmacBuildPacketData
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbBsmacBuildPacketNetHead
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbBsmacBuildPacketMacHead
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbWriteDataToStm32
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaSendCardReportToUart
</UL>

<P><STRONG><a name="[a3]"></a>UwbBsmacBlidPacketHeadProc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsmac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaSendCardReportToUart
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USB_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>ADC_Configuration</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ADC_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PowerDownCmd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelaySelectionConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[e3]"></a>ADC_Start</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSICmd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Get_ADCValue
</UL>

<P><STRONG><a name="[e7]"></a>ADC_Stop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSICmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Get_ADCValue
</UL>

<P><STRONG><a name="[e8]"></a>ADC_Get_ADCValue</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Stop
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start
</UL>

<P><STRONG><a name="[ea]"></a>ADC_Get_Vdd</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>

<P><STRONG><a name="[ef]"></a>motion_detect_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = motion_detect_init &rArr; MMA845x_Init &rArr; MMA845x_Standby &rArr; MMA845x_WriteReg &rArr; HAL_I2C_WriteReg &rArr; HAL_I2C_SendByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[f1]"></a>motion_detect_int_open</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, board.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>

<P><STRONG><a name="[f2]"></a>motion_detect_int_close</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, board.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>

<P><STRONG><a name="[f3]"></a>interrupt_init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = interrupt_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[f4]"></a>peripheral_int_open</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = peripheral_int_open &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[5a]"></a>board_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = board_init &rArr; Dw1000Init &rArr; dwt_initialise &rArr; _dwt_nvmread &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dw1000Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_interface_init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_core_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Configuration
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_Configuration
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Configuration
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Configuration
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_int_open
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_detect_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_as3933
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>BUTTON_Configuration</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BUTTON_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[fd]"></a>BUTTON_KeyCode_Read</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>

<P><STRONG><a name="[f8]"></a>UART_Configuration</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, com_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UART_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[3a]"></a>fputc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, com_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfb.o(i.__0printf$bare)
</UL>
<P><STRONG><a name="[f7]"></a>LED_Configuration</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LED_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[103]"></a>led_station_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>

<P><STRONG><a name="[104]"></a>led_station_on</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[105]"></a>led_station_off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>

<P><STRONG><a name="[106]"></a>LED_Red_Flash</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[107]"></a>LED_Green_Flash</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EXTI0_IRQHandler &rArr; process_deca_irq &rArr; dwt_isr &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_deca_irq
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI1_IRQHandler &rArr; event_timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_set
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI3_IRQHandler &rArr; event_timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_set
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI9_5_IRQHandler &rArr; event_timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_set
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1cb]"></a>set_flash_read_protection</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mcu.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>unset_flash_read_protection</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mcu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Unlock
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_RDPConfig
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Launch
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetRDP
</UL>

<P><STRONG><a name="[11e]"></a>SysTick_Configuration</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, mcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SysTick_Configuration &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_core_init
</UL>

<P><STRONG><a name="[f5]"></a>chip_core_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = chip_core_init &rArr; IWDG_Configuration &rArr; _config_iwdg &rArr; FLASH_OB_UserConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[f6]"></a>chip_interface_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = chip_interface_init &rArr; HAL_I2C_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[123]"></a>chip_lowpower_ready</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, mcu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_each
</UL>

<P><STRONG><a name="[124]"></a>chip_lowpower_finish</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mcu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_each
</UL>

<P><STRONG><a name="[57]"></a>WatchdogReset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WatchdogReset
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mcu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>portResetTickCnt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cc]"></a>portSetTickCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcu.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>portGetTickCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaSendTagPoll
</UL>

<P><STRONG><a name="[63]"></a>GetSysClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_update
</UL>

<P><STRONG><a name="[142]"></a>ElapsedSysClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mcu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_each
</UL>

<P><STRONG><a name="[af]"></a>Delay_ms</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, mcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_millisecond
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writetoLCD
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_softreset
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Green_Flash
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Red_Flash
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_spicswakeup
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calibratesleepcnt
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_nvmsetmrregs
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_loaducodefromrom
</UL>

<P><STRONG><a name="[126]"></a>Delay_us</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, mcu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_microsecond
</UL>

<P><STRONG><a name="[f9]"></a>MOTOR_Configuration</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MOTOR_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[128]"></a>MOTOR_Start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, motor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[129]"></a>MOTOR_Stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, motor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>

<P><STRONG><a name="[fc]"></a>SPI_Configuration</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, spi_nano.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[fb]"></a>SPI2_Configuration</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, spi_nano.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI2_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[d2]"></a>close_spi2_as3933</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spi_nano.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = close_spi2_as3933
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_as3933
</UL>

<P><STRONG><a name="[12a]"></a>MMA845x_WriteReg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mma8452q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MMA845x_WriteReg &rArr; HAL_I2C_WriteReg &rArr; HAL_I2C_SendByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_Standby
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_Active
</UL>

<P><STRONG><a name="[12c]"></a>MMA845x_ReadReg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mma8452q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MMA845x_ReadReg &rArr; HAL_I2C_ReadReg &rArr; HAL_I2C_RecvByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_Standby
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_Active
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_Init
</UL>

<P><STRONG><a name="[130]"></a>MMA845x_ChipCheck</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mma8452q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MMA845x_ChipCheck &rArr; HAL_I2C_ReadReg &rArr; HAL_I2C_RecvByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_Init
</UL>

<P><STRONG><a name="[f0]"></a>MMA845x_Init</STRONG> (Thumb, 338 bytes, Stack size 8 bytes, mma8452q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MMA845x_Init &rArr; MMA845x_Standby &rArr; MMA845x_WriteReg &rArr; HAL_I2C_WriteReg &rArr; HAL_I2C_SendByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_WriteReg
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_ChipCheck
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_ReadReg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_Standby
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_Active
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_detect_init
</UL>

<P><STRONG><a name="[132]"></a>WAIT_NOP</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_io_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WAIT_NOP
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_RecvByte
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SendByte
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ACK
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Stop
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Start
</UL>

<P><STRONG><a name="[122]"></a>HAL_I2C_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, hal_io_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_I2C_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_interface_init
</UL>

<P><STRONG><a name="[131]"></a>HAL_I2C_Start</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, hal_io_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_I2C_Start &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAIT_NOP
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_WriteReg
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ReadReg
</UL>

<P><STRONG><a name="[133]"></a>HAL_I2C_Stop</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, hal_io_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_I2C_Stop &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAIT_NOP
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_WriteReg
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ReadReg
</UL>

<P><STRONG><a name="[134]"></a>HAL_I2C_ACK</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, hal_io_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_I2C_ACK &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAIT_NOP
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ReadReg
</UL>

<P><STRONG><a name="[135]"></a>HAL_I2C_SendByte</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, hal_io_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_I2C_SendByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAIT_NOP
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_WriteReg
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ReadReg
</UL>

<P><STRONG><a name="[136]"></a>HAL_I2C_RecvByte</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, hal_io_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_I2C_RecvByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAIT_NOP
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ReadReg
</UL>

<P><STRONG><a name="[12b]"></a>HAL_I2C_WriteReg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hal_io_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_I2C_WriteReg &rArr; HAL_I2C_SendByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SendByte
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Stop
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_WriteReg
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_Init
</UL>

<P><STRONG><a name="[12d]"></a>HAL_I2C_ReadReg</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hal_io_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_I2C_ReadReg &rArr; HAL_I2C_RecvByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_RecvByte
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SendByte
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ACK
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Stop
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_ChipCheck
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_ReadReg
</UL>

<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sleep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WKUP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[121]"></a>SleepInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sleep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SleepInit &rArr; RTC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_core_init
</UL>

<P><STRONG><a name="[45]"></a>Sleep</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, sleep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Sleep &rArr; SysTick_Configuration &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetWakeUpCounter
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogReset
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WakeUpCmd
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTOPMode
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_wakeup_dw1000
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppEventsProcess
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_powersave_sleep
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_each
</UL>

<P><STRONG><a name="[143]"></a>system_powersave_sleep</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sleep.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[144]"></a>system_powersave_wakeup</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sleep.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_disable
</UL>

<P><STRONG><a name="[145]"></a>system_sleep</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sleep.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_each
</UL>

<P><STRONG><a name="[10b]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[bf]"></a>NVIC_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_int_open
</UL>

<P><STRONG><a name="[10a]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[1cd]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
</UL>

<P><STRONG><a name="[146]"></a>ADC_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l1xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[de]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32l1xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[dd]"></a>ADC_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[1ce]"></a>ADC_CommonInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>ADC_CommonStructInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Stop
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[1d0]"></a>ADC_BankSelection</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>ADC_PowerDownCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[e0]"></a>ADC_DelaySelectionConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[1d1]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 344 bytes, Stack size 20 bytes, stm32l1xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[e6]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start
</UL>

<P><STRONG><a name="[1d5]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>ADC_EOCOnEachRegularChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>ADC_ContinuousModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Get_ADCValue
</UL>

<P><STRONG><a name="[1da]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 232 bytes, Stack size 20 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>ADC_ExternalTrigInjectedConvEdgeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>ADC_SoftwareStartInjectedConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>ADC_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start
</UL>

<P><STRONG><a name="[1e7]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>ADC_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>EXTI_DeInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Configuration
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_detect_int_close
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_detect_int_open
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXCIT_Configuration
</UL>

<P><STRONG><a name="[1eb]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>EXTI_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_detect_int_open
</UL>

<P><STRONG><a name="[1ef]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>FLASH_ReadAccess64Cmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>FLASH_SLEEPPowerDownCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>DATA_EEPROM_Unlock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Unlock
</UL>

<P><STRONG><a name="[114]"></a>FLASH_Unlock</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unset_flash_read_protection
</UL>

<P><STRONG><a name="[1f3]"></a>FLASH_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>FLASH_GetStatus</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[149]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_RDPConfig
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_BootConfig
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_BORConfig
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_PCROPSelectionConfig
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_PCROP1Config
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_PCROPConfig
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WRP2Config
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WRP1Config
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WRPConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramWord
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramHalfWord
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramByte
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramHalfWord
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramByte
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramWord
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_EraseWord
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_EraseHalfWord
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_EraseByte
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FastProgramWord
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[14b]"></a>FLASH_ErasePage</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[14c]"></a>FLASH_FastProgramWord</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1f4]"></a>DATA_EEPROM_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>DATA_EEPROM_FixedTimeProgramCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>DATA_EEPROM_EraseByte</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[14e]"></a>DATA_EEPROM_EraseHalfWord</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[14f]"></a>DATA_EEPROM_EraseWord</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramHalfWord
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramByte
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramHalfWord
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramByte
</UL>

<P><STRONG><a name="[150]"></a>DATA_EEPROM_FastProgramWord</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramHalfWord
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramByte
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramHalfWord
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramByte
</UL>

<P><STRONG><a name="[151]"></a>DATA_EEPROM_FastProgramByte</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramWord
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_EraseWord
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramHalfWord
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramHalfWord
</UL>

<P><STRONG><a name="[152]"></a>DATA_EEPROM_FastProgramHalfWord</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramByte
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramWord
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_EraseWord
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[153]"></a>DATA_EEPROM_ProgramByte</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramWord
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_EraseWord
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[154]"></a>DATA_EEPROM_ProgramHalfWord</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramByte
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramWord
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_EraseWord
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[155]"></a>DATA_EEPROM_ProgramWord</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[10e]"></a>FLASH_OB_Unlock</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_OB_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unset_flash_read_protection
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_config_iwdg
</UL>

<P><STRONG><a name="[112]"></a>FLASH_OB_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_config_iwdg
</UL>

<P><STRONG><a name="[111]"></a>FLASH_OB_Launch</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unset_flash_read_protection
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_config_iwdg
</UL>

<P><STRONG><a name="[156]"></a>FLASH_OB_WRPConfig</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[157]"></a>FLASH_OB_WRP1Config</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[158]"></a>FLASH_OB_WRP2Config</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[116]"></a>FLASH_OB_RDPConfig</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unset_flash_read_protection
</UL>

<P><STRONG><a name="[159]"></a>FLASH_OB_PCROPConfig</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[15a]"></a>FLASH_OB_PCROP1Config</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[15b]"></a>FLASH_OB_PCROPSelectionConfig</STRONG> (Thumb, 72 bytes, Stack size 28 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[110]"></a>FLASH_OB_UserConfig</STRONG> (Thumb, 94 bytes, Stack size 28 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FLASH_OB_UserConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_config_iwdg
</UL>

<P><STRONG><a name="[15c]"></a>FLASH_OB_BORConfig</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[15d]"></a>FLASH_OB_BootConfig</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[10f]"></a>FLASH_OB_GetUser</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_config_iwdg
</UL>

<P><STRONG><a name="[1f6]"></a>FLASH_OB_GetWRP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>FLASH_OB_GetWRP1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>FLASH_OB_GetWRP2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>FLASH_OB_GetRDP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unset_flash_read_protection
</UL>

<P><STRONG><a name="[1f9]"></a>FLASH_OB_GetSPRMOD</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>FLASH_OB_GetBOR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>FLASH_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>FLASH_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>GPIO_DeInit</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, stm32l1xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphResetCmd
</UL>

<P><STRONG><a name="[b0]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32l1xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DW1000
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_RecvByte
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SendByte
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ACK
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Stop
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Start
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_station_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Configuration
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_Configuration
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Configuration
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Configuration
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_detect_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;as3933_data_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXCIT_Configuration
</UL>

<P><STRONG><a name="[1fe]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_deca_irq
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_RecvByte
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SendByte
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_KeyCode_Read
</UL>

<P><STRONG><a name="[200]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[201]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writetoLCD
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readfromspi
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writetospi
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_wakeup_dw1000
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_RecvByte
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SendByte
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ACK
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Stop
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Start
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_Stop
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_lowpower_finish
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_lowpower_ready
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Green_Flash
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Red_Flash
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_station_off
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_station_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_Configuration
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Configuration
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadWriteRegister
</UL>

<P><STRONG><a name="[a9]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writetoLCD
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readfromspi
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writetospi
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DW1000
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_wakeup_dw1000
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_RecvByte
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SendByte
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ACK
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Stop
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Start
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_Start
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_lowpower_finish
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_lowpower_ready
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Green_Flash
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Red_Flash
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_station_on
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Configuration
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadWriteRegister
</UL>

<P><STRONG><a name="[203]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32l1xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Configuration
</UL>

<P><STRONG><a name="[119]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[11a]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[11b]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[11c]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogReset
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[11d]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[206]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>LCD_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l1xx_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[163]"></a>LCD_WaitForSynchro</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_lcd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[162]"></a>LCD_Init</STRONG> (Thumb, 86 bytes, Stack size 4 bytes, stm32l1xx_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WaitForSynchro
</UL>

<P><STRONG><a name="[207]"></a>LCD_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_lcd.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>LCD_Cmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepInit
</UL>

<P><STRONG><a name="[208]"></a>LCD_HighDriveCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_lcd.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>LCD_MuxSegmentCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_lcd.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>LCD_PulseOnDurationConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_lcd.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>LCD_DeadTimeConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_lcd.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>LCD_BlinkConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_lcd.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>LCD_ContrastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_lcd.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>LCD_Write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_lcd.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>LCD_UpdateDisplayRequest</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_lcd.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>LCD_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_lcd.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>LCD_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_lcd.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>LCD_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_lcd.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>LCD_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32l1xx_lcd.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>LCD_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_lcd.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>PWR_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l1xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[b6]"></a>PWR_RTCAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[215]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>PWR_FastWakeUpCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>PWR_UltraLowPowerCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>PWR_VoltageScalingConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>PWR_EnterLowPowerRunMode</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>PWR_EnterSleepMode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l1xx_pwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWR_EnterSTOPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[21d]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>PWR_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>RCC_DeInit</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>RCC_HSEConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[b9]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[165]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32l1xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[221]"></a>RCC_AdjustMSICalibrationValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>RCC_MSIRangeConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>RCC_MSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Stop
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start
</UL>

<P><STRONG><a name="[b8]"></a>RCC_LSEConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[118]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[225]"></a>RCC_PLLConfig</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[226]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>RCC_LSEClockSecuritySystemCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>RCC_MCOConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[13e]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[229]"></a>RCC_HCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>RCC_PCLK1Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>RCC_PCLK2Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 248 bytes, Stack size 20 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
</UL>

<P><STRONG><a name="[ba]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[bb]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[b7]"></a>RCC_RTCResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[102]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Configuration
</UL>

<P><STRONG><a name="[dc]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_lowpower_finish
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_lowpower_ready
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[b5]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_lowpower_finish
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_lowpower_ready
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_spi2_as3933
</UL>

<P><STRONG><a name="[15f]"></a>RCC_AHBPeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[147]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DeInit
</UL>

<P><STRONG><a name="[161]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DeInit
</UL>

<P><STRONG><a name="[22c]"></a>RCC_AHBPeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[22d]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>RCC_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>RCC_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>RCC_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32l1xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SynchroShiftConfig
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
</UL>

<P><STRONG><a name="[167]"></a>RTC_EnterInitMode</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32l1xx_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibCmd
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RefClockCmd
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
</UL>

<P><STRONG><a name="[166]"></a>RTC_DeInit</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32l1xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[169]"></a>RTC_ExitInitMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibCmd
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RefClockCmd
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[168]"></a>RTC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, stm32l1xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[233]"></a>RTC_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>RTC_WriteProtectionCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>RTC_RefClockCmd</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32l1xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[235]"></a>RTC_BypassShadowCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>RTC_SetTime</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, stm32l1xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>

<P><STRONG><a name="[236]"></a>RTC_TimeStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>RTC_GetTime</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32l1xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[237]"></a>RTC_GetSubSecond</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>RTC_SetDate</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, stm32l1xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>

<P><STRONG><a name="[238]"></a>RTC_DateStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>RTC_GetDate</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32l1xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[171]"></a>RTC_SetAlarm</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, stm32l1xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>

<P><STRONG><a name="[239]"></a>RTC_AlarmStructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>RTC_GetAlarm</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, stm32l1xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[23a]"></a>RTC_AlarmCmd</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>RTC_AlarmSubSecondConfig</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>RTC_GetAlarmSubSecond</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>RTC_WakeUpClockConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[c1]"></a>RTC_SetWakeUpCounter</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[23d]"></a>RTC_GetWakeUpCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>RTC_WakeUpCmd</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, stm32l1xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_WakeUpCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[23e]"></a>RTC_DayLightSavingConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>RTC_GetStoreOperation</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>RTC_OutputConfig</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>RTC_CoarseCalibConfig</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l1xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[174]"></a>RTC_CoarseCalibCmd</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32l1xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[241]"></a>RTC_CalibOutputCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>RTC_CalibOutputConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>RTC_SmoothCalibConfig</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>RTC_TimeStampCmd</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>RTC_GetTimeStamp</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, stm32l1xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[245]"></a>RTC_GetTimeStampSubSecond</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>RTC_TamperTriggerConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>RTC_TamperCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[248]"></a>RTC_TamperFilterConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>RTC_TamperSamplingFreqConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>RTC_TamperPinsPrechargeDuration</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>RTC_TimeStampOnTamperDetectionCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>RTC_TamperPullUpCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>RTC_WriteBackupRegister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>RTC_ReadBackupRegister</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>RTC_OutputTypeConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>RTC_SynchroShiftConfig</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, stm32l1xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[c2]"></a>RTC_ITConfig</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[250]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>RTC_ClearFlag</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>RTC_GetITStatus</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32l1xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ConfigFastRate
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Configuration
</UL>

<P><STRONG><a name="[b3]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32l1xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ConfigFastRate
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Configuration
</UL>

<P><STRONG><a name="[177]"></a>I2S_Init</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, stm32l1xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[253]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ConfigFastRate
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closespi
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_lowpower_finish
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_lowpower_ready
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Configuration
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_spi2_as3933
</UL>

<P><STRONG><a name="[255]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writetoLCD
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readfromspi
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writetospi
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SendByte
</UL>

<P><STRONG><a name="[aa]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writetoLCD
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readfromspi
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writetospi
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SendByte
</UL>

<P><STRONG><a name="[25a]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[25c]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writetoLCD
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readfromspi
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writetospi
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closespi
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SendByte
</UL>

<P><STRONG><a name="[260]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>SYSCFG_DeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l1xx_syscfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[263]"></a>SYSCFG_RIDeInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>SYSCFG_MemoryRemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>SYSCFG_GetBootMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>SYSCFG_USBPuCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32l1xx_syscfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Configuration
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_detect_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXCIT_Configuration
</UL>

<P><STRONG><a name="[267]"></a>SYSCFG_RITIMSelect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[268]"></a>SYSCFG_RITIMInputCaptureConfig</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>SYSCFG_RIResistorConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>SYSCFG_RIChannelSpeedConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>SYSCFG_RIIOSwitchConfig</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>SYSCFG_RISwitchControlModeCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>SYSCFG_RIHysteresisConfig</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32l1xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[ff]"></a>USART_Init</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, stm32l1xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
</UL>

<P><STRONG><a name="[26e]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>USART_ClockInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_lowpower_finish
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_lowpower_ready
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
</UL>

<P><STRONG><a name="[271]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[273]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbWriteDataToStm32
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPutC
</UL>

<P><STRONG><a name="[17c]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[274]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[278]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[27a]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[27b]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[27e]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[27f]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[280]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[281]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbWriteDataToStm32
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPutC
</UL>

<P><STRONG><a name="[101]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
</UL>

<P><STRONG><a name="[17b]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32l1xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[282]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>msg_analyser_register</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l1xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 432 bytes, Stack size 8 bytes, stm32l1xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32l1xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(.text)
</UL>
<P><STRONG><a name="[283]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, system_stm32l1xx.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>dwt_writetodevice</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dwt_writetodevice &rArr; writetospi
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writetospi
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxdata
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_starttx
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_softreset
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setleds
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_sethsrb
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuretxrf
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configeventcounters
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuresleep
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtempvbat
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configcontinuousframemode
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configcwmode
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_syncrxbufptrs
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_loadopsettabfromotp
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calibratesleepcnt
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuresleepcnt
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_aonarrayupload
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_aonconfigupload
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_nvmprogword32
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_nvmsetmrregs
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_seteui
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_configlde
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_xtaltrim
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_nvmread
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_loaducodefromrom
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_enableclocks
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>

<P><STRONG><a name="[17f]"></a>dwt_write16bitoffsetreg</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_softreset
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_settxantennadelay
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxantennadelay
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setpanid
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setaddress16
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enableautoack
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuresleep
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configcwmode
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setpreambledetecttimeout
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxmode
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_disablesequencing
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_loadopsettabfromotp
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_configlde
</UL>

<P><STRONG><a name="[180]"></a>dwt_write32bitoffsetreg</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxfctrl
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setsmarttxpower
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxaftertxdelay
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setinterrupt
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setdelayedtrxtime
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setautorxreenable
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enableframefilter
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuretxrf
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setdblrxbuffmode
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enableautoack
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configcontinuousframemode
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configcwmode
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_entersleepaftertx
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setlnapamode
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_loaducodefromrom
</UL>

<P><STRONG><a name="[181]"></a>dwt_readfromdevice</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readfromspi
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_softreset
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setleds
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxtimestamp
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxdata
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readdignostics
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readwakeupvbat
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readwakeuptemp
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtempvbat
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_syncrxbufptrs
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_checkclkplllock
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_spicswakeup
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calibratesleepcnt
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_nvmprogword32
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_nvmsetmrregs
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_geteui
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readsystime
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtxtimestamp
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read16bitoffsetreg
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readaccdata
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_xtaltrim
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_enableclocks
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>

<P><STRONG><a name="[182]"></a>dwt_read32bitoffsetreg</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_starttx
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setsmarttxpower
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxaftertxdelay
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setinterrupt
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readdignostics
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readdevid
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enableframefilter
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readeventcounters
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_entersleepaftertx
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setlnapamode
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readsystimestamphi32
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxtimestamphi32
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtxtimestamphi32
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_nvmread
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_loaducodefromrom
</UL>

<P><STRONG><a name="[183]"></a>_dwt_enableclocks</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _dwt_enableclocks &rArr; dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configcontinuousframemode
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_disablesequencing
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_otpwriteandverify
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readaccdata
</UL>

<P><STRONG><a name="[184]"></a>_dwt_loaducodefromrom</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _dwt_loaducodefromrom &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
</UL>

<P><STRONG><a name="[185]"></a>_dwt_nvmread</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _dwt_nvmread &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_otpwriteandverify
</UL>

<P><STRONG><a name="[90]"></a>dwt_readdevid</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dwt_readdevid &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dw1000Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_spicswakeup
</UL>

<P><STRONG><a name="[93]"></a>dwt_initialise</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dwt_initialise &rArr; _dwt_nvmread &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readdevid
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_nvmread
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_loaducodefromrom
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_enableclocks
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dw1000Init
</UL>

<P><STRONG><a name="[284]"></a>dwt_getpartid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>dwt_getlotid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>dwt_configuretxrf</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dwt_configuretxrf &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstChannelConfig
</UL>

<P><STRONG><a name="[99]"></a>dwt_getotptxpower</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, deca_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstChannelConfig
</UL>

<P><STRONG><a name="[9e]"></a>dwt_settxantennadelay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dwt_settxantennadelay &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstChannelConfig
</UL>

<P><STRONG><a name="[9d]"></a>dwt_setrxantennadelay</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dwt_setrxantennadelay &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstChannelConfig
</UL>

<P><STRONG><a name="[186]"></a>dwt_xtaltrim</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dwt_xtaltrim &rArr; dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
</UL>

<P><STRONG><a name="[187]"></a>_dwt_configlde</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _dwt_configlde &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
</UL>

<P><STRONG><a name="[98]"></a>dwt_configure</STRONG> (Thumb, 630 bytes, Stack size 48 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dwt_configure &rArr; _dwt_configlde &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_settxantennadelay
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxantennadelay
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_configlde
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_xtaltrim
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstChannelConfig
</UL>

<P><STRONG><a name="[9c]"></a>dwt_readantennadelay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, deca_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstChannelConfig
</UL>

<P><STRONG><a name="[74]"></a>dwt_writetxdata</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dwt_writetxdata &rArr; dwt_writetodevice &rArr; writetospi
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstSendTagPoolPacket
</UL>

<P><STRONG><a name="[75]"></a>dwt_writetxfctrl</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dwt_writetxfctrl &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstSendTagPoolPacket
</UL>

<P><STRONG><a name="[67]"></a>dwt_readrxdata</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dwt_readrxdata &rArr; dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDOARxGoodCallback
</UL>

<P><STRONG><a name="[188]"></a>dwt_readaccdata</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_enableclocks
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[189]"></a>dwt_read16bitoffsetreg</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dwt_read16bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readdignostics
</UL>

<P><STRONG><a name="[7c]"></a>dwt_readdignostics</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dwt_readdignostics &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read16bitoffsetreg
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRxRssiLevel
</UL>

<P><STRONG><a name="[18a]"></a>dwt_readtxtimestamp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[18b]"></a>dwt_readtxtimestamphi32</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>

<P><STRONG><a name="[66]"></a>dwt_readrxtimestamp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dwt_readrxtimestamp &rArr; dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDOARxGoodCallback
</UL>

<P><STRONG><a name="[18c]"></a>dwt_readrxtimestamphi32</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>

<P><STRONG><a name="[18d]"></a>dwt_readsystimestamphi32</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>

<P><STRONG><a name="[18e]"></a>dwt_readsystime</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[8b]"></a>dwt_enableframefilter</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dwt_enableframefilter &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaTagInit
</UL>

<P><STRONG><a name="[86]"></a>dwt_setpanid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dwt_setpanid &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaTagInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaAnchorInit
</UL>

<P><STRONG><a name="[87]"></a>dwt_setaddress16</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dwt_setaddress16 &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaAnchorInit
</UL>

<P><STRONG><a name="[18f]"></a>dwt_seteui</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>

<P><STRONG><a name="[190]"></a>dwt_setlnapamode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
</UL>

<P><STRONG><a name="[191]"></a>dwt_geteui</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[192]"></a>_dwt_nvmsetmrregs</STRONG> (Thumb, 612 bytes, Stack size 32 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_otpwriteandverify
</UL>

<P><STRONG><a name="[193]"></a>_dwt_nvmprogword32</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_otpwriteandverify
</UL>

<P><STRONG><a name="[195]"></a>dwt_otpwriteandverify</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_nvmprogword32
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_nvmsetmrregs
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_nvmread
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_enableclocks
</UL>

<P><STRONG><a name="[196]"></a>_dwt_aonconfigupload</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calibratesleepcnt
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuresleepcnt
</UL>

<P><STRONG><a name="[197]"></a>_dwt_aonarrayupload</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _dwt_aonarrayupload &rArr; dwt_writetodevice &rArr; writetospi
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_softreset
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_entersleep
</UL>

<P><STRONG><a name="[140]"></a>dwt_entersleep</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_aonarrayupload
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_each
</UL>

<P><STRONG><a name="[198]"></a>dwt_configuresleepcnt</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_aonconfigupload
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>

<P><STRONG><a name="[199]"></a>dwt_calibratesleepcnt</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_aonconfigupload
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>

<P><STRONG><a name="[52]"></a>dwt_configuresleep</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appsleepinit
</UL>

<P><STRONG><a name="[19a]"></a>dwt_entersleepaftertx</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dwt_entersleepaftertx &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_starttx
</UL>

<P><STRONG><a name="[19b]"></a>dwt_spicswakeup</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readdevid
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[19c]"></a>dwt_loadopsettabfromotp</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>

<P><STRONG><a name="[9a]"></a>dwt_setsmarttxpower</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dwt_setsmarttxpower &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstChannelConfig
</UL>

<P><STRONG><a name="[51]"></a>dwt_enableautoack</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dwt_enableautoack &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaTagInit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appsleepinit
</UL>

<P><STRONG><a name="[50]"></a>dwt_setdblrxbuffmode</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dwt_setdblrxbuffmode &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaAnchorInit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appsleepinit
</UL>

<P><STRONG><a name="[89]"></a>dwt_setautorxreenable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dwt_setautorxreenable &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaTagInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaAnchorInit
</UL>

<P><STRONG><a name="[88]"></a>dwt_setrxaftertxdelay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dwt_setrxaftertxdelay &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaAnchorInit
</UL>

<P><STRONG><a name="[a1]"></a>dwt_setcallbacks</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, deca_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstanceBaseMsginit
</UL>

<P><STRONG><a name="[68]"></a>dwt_sethsrb</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dwt_sethsrb &rArr; dwt_writetodevice &rArr; writetospi
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDOARxGoodCallback
</UL>

<P><STRONG><a name="[3e]"></a>dwt_isr</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dwt_isr &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_deca_irq
</UL>

<P><STRONG><a name="[7a]"></a>dwt_setleds</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dwt_setleds &rArr; dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dw1000Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaSendTagPoll
</UL>

<P><STRONG><a name="[19d]"></a>_dwt_checkclkplllock</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[19e]"></a>_dwt_disablesequencing</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _dwt_disablesequencing &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_enableclocks
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_softreset
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configcontinuousframemode
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configcwmode
</UL>

<P><STRONG><a name="[76]"></a>dwt_setdelayedtrxtime</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dwt_setdelayedtrxtime &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstSendTagPoolPacket
</UL>

<P><STRONG><a name="[78]"></a>dwt_starttx</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dwt_starttx &rArr; dwt_entersleepaftertx &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_entersleepaftertx
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstSendTagPoolPacket
</UL>

<P><STRONG><a name="[19f]"></a>dwt_syncrxbufptrs</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dwt_syncrxbufptrs &rArr; dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
</UL>

<P><STRONG><a name="[43]"></a>dwt_forcetrxoff</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dwt_forcetrxoff &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_syncrxbufptrs
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppEventsProcess
</UL>

<P><STRONG><a name="[1a0]"></a>dwt_setrxmode</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>

<P><STRONG><a name="[47]"></a>dwt_rxenable</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dwt_rxenable &rArr; PrintfUtil_vPrintf &rArr; vNum2String
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfUtil_vPrintf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_syncrxbufptrs
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaAnchorInit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDOARxGoodCallback
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRunState
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppEventsProcess
</UL>

<P><STRONG><a name="[77]"></a>dwt_setrxtimeout</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dwt_setrxtimeout &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaAnchorInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstSendTagPoolPacket
</UL>

<P><STRONG><a name="[1a1]"></a>dwt_setpreambledetecttimeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>

<P><STRONG><a name="[94]"></a>dwt_setinterrupt</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dwt_setinterrupt &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dw1000Init
</UL>

<P><STRONG><a name="[95]"></a>dwt_configeventcounters</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dwt_configeventcounters &rArr; dwt_writetodevice &rArr; writetospi
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dw1000Init
</UL>

<P><STRONG><a name="[1a2]"></a>dwt_readeventcounters</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>

<P><STRONG><a name="[92]"></a>dwt_softreset</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dwt_softreset &rArr; _dwt_disablesequencing &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_disablesequencing
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_aonarrayupload
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dw1000Init
</UL>

<P><STRONG><a name="[1a3]"></a>dwt_configcwmode</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_disablesequencing
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>

<P><STRONG><a name="[1a4]"></a>dwt_configcontinuousframemode</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_disablesequencing
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_enableclocks
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>

<P><STRONG><a name="[1a5]"></a>dwt_readtempvbat</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>

<P><STRONG><a name="[1a6]"></a>dwt_readwakeuptemp</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[1a7]"></a>dwt_readwakeupvbat</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[1a8]"></a>vPutC</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, printf_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPutC
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf_util.o(.text)
</UL>
<P><STRONG><a name="[1a9]"></a>vInitPrintf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, printf_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfUtil_u8Init
</UL>

<P><STRONG><a name="[59]"></a>PrintfUtil_u8Init</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, printf_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PrintfUtil_u8Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1aa]"></a>vNum2String</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, printf_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vNum2String
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfUtil_vPrintf
</UL>

<P><STRONG><a name="[4b]"></a>PrintfUtil_vPrintf</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, printf_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PrintfUtil_vPrintf &rArr; vNum2String
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNum2String
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbBsmacSendPacketProc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaRxQuickCardMsgProc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstChannelConfig
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dw1000Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRxTestMsgProc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstSendTagPoolPacket
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaSendTagPoll
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaSendCardReportToUart
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaRxCardMsgProc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRunState
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Application
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppEventsProcess
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaCardMsdBuildUnity
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfUtil_vPrintMem
</UL>

<P><STRONG><a name="[1ab]"></a>PrintfUtil_vPrintMem</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, printf_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfUtil_vPrintf
</UL>

<P><STRONG><a name="[d8]"></a>CRC16</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbBsmacBuildPacketData
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaCardMsdBuildUnity
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaCardMsdBuildUnityNew
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avg_ANH_Tie
</UL>

<P><STRONG><a name="[44]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDOARxGoodCallback
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppEventsProcess
</UL>

<P><STRONG><a name="[286]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbBsmacBuildPacketData
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaMsgPackInsetUartBuff
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaSendCardReportToUart
</UL>

<P><STRONG><a name="[287]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[288]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRunState
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UwbBsmacSendPacketProc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaRxQuickCardMsgProc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaClearMsgArray
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaBuildPackBuffInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstanceBaseMsginit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaDataBuffClear
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_analyser_register
</UL>

<P><STRONG><a name="[28a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_fmul</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, fmul.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Get_Vdd
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_fdiv</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Get_Vdd
</UL>

<P><STRONG><a name="[1b1]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRxRssiLevel
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[1b5]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readdignostics
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRxRssiLevel
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaCardMsdBuildUnity
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRxRssiLevel
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaCardMsdBuildUnity
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Get_Vdd
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readdignostics
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRxRssiLevel
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaCardMsdBuildUnity
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Get_Vdd
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRxRssiLevel
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaCardMsdBuildUnity
</UL>

<P><STRONG><a name="[1ad]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[28b]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[28c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[28d]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[1b6]"></a>_float_epilogue</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[1b4]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1b3]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1bd]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
</UL>

<P><STRONG><a name="[28f]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
</UL>

<P><STRONG><a name="[3c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[290]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[291]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>__0printf$bare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[292]"></a>__1printf$bare</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)

<P><STRONG><a name="[194]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_nvmprogword32
</UL>

<P><STRONG><a name="[1bb]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[293]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[294]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[295]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1be]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
</UL>

<P><STRONG><a name="[1bc]"></a>log</STRONG> (Thumb, 822 bytes, Stack size 96 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
</UL>

<P><STRONG><a name="[80]"></a>log10</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, log10.o(i.log10))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = log10 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TdoaInstRxRssiLevel
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[61]"></a>_event_timer_idx</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer_event.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_del
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_add_reload
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_timer_add
</UL>

<P><STRONG><a name="[cb]"></a>SPI2_SendByte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, as3933.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadWriteRegister
</UL>

<P><STRONG><a name="[109]"></a>NVIC_Configuration</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_core_init
</UL>

<P><STRONG><a name="[10c]"></a>RCC_Configuration</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, mcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_interface_init
</UL>

<P><STRONG><a name="[10d]"></a>_config_iwdg</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, mcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _config_iwdg &rArr; FLASH_OB_UserConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Unlock
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Lock
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Launch
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetUser
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[117]"></a>IWDG_Configuration</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = IWDG_Configuration &rArr; _config_iwdg &rArr; FLASH_OB_UserConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_config_iwdg
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_core_init
</UL>

<P><STRONG><a name="[125]"></a>_get_millisecond</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[127]"></a>_get_microsecond</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mcu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>

<P><STRONG><a name="[12e]"></a>MMA845x_Active</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mma8452q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MMA845x_Active &rArr; MMA845x_WriteReg &rArr; HAL_I2C_WriteReg &rArr; HAL_I2C_SendByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_ReadReg
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_Init
</UL>

<P><STRONG><a name="[12f]"></a>MMA845x_Standby</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mma8452q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MMA845x_Standby &rArr; MMA845x_WriteReg &rArr; HAL_I2C_WriteReg &rArr; HAL_I2C_SendByte &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_ReadReg
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA845x_Init
</UL>

<P><STRONG><a name="[13f]"></a>sleep_each</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sleep.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCheckBattery
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_entersleep
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElapsedSysClock
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_lowpower_finish
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_lowpower_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_sleep
</UL>

<P><STRONG><a name="[16d]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>

<P><STRONG><a name="[16c]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeStamp
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAlarm
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>

<P><STRONG><a name="[17d]"></a>SetSysClock</STRONG> (Thumb, 248 bytes, Stack size 12 bytes, system_stm32l1xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1ba]"></a>_printf_core</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfb.o(i._printf_core), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$bare
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
