###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.60.1.40026 for 8051             23/Oct/2018  17:27:26 #
# Copyright (C) 2004-2010 IAR Systems AB.                                     #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\p4\main\Zigbee\cc2530\mine_project_voice\driver #
#                          \MobilePhone\hal_audio.c                           #
#    Command line       =  E:\p4\main\Zigbee\cc2530\mine_project_voice\driver #
#                          \MobilePhone\hal_audio.c -D xSMS_TEMPLATE -D       #
#                          MENU_CLOCKFORMAT -D CELLSWITCH_DEBUG -D            #
#                          MP_INFORMATION -D HOLD_AUTO_START -D SMS_SENDBOX   #
#                          -D NEW_MENU_LIB -D WATCHDOG=TRUE -D                #
#                          NEW_DOUBLE_NVID_OP -D AUDIO_SERIAL -D              #
#                          NWK_AUTO_POLL -D OSC32K_CRYSTAL_INSTALLED=FALSE    #
#                          -D xAUDIO_TEST -D xSINGLE_AUDIO_TEST -D            #
#                          xMULTIAUDIO_TEST -D xREFLECTOR -D xLCD_SUPPORTED   #
#                          -D HAL_LCD=FALSE -D HAL_AUDIO=TRUE -D              #
#                          HAL_SPI=FALSE -D HAL_UART=FALSE -D HAL_LED=FALSE   #
#                          -D HAL_AES=FALSE -D HAL_KEY=TRUE -D                #
#                          IDX_THRESHOLD=12 -D xMACNODEBUG -D                 #
#                          xMAC_NO_PARAM_CHECK -D HAL_AUDIO=TRUE -D           #
#                          HAL_DMA=TRUE -D HAL_AES=FALSE -D                   #
#                          MAC_CFG_TX_DATA_MAX=8 -D MAC_CFG_TX_MAX=12 -D      #
#                          MAC_CFG_RX_MAX=8 -lcN E:\p4\main\Zigbee\cc2530\min #
#                          e_project_voice\app\MobilePhone\iar\Release\List\  #
#                          -lb E:\p4\main\Zigbee\cc2530\mine_project_voice\ap #
#                          p\MobilePhone\iar\Release\List\ -o                 #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\Release\Obj\ -e                      #
#                          --require_prototypes --no_unroll --no_inline       #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\p4\main\Zigbee\cc2530\mine_project_voice\app #
#                          \MobilePhone\iar\..\src\ -I                        #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\src\MenuLib\ -I                   #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\src\MenuLib\util\ -I              #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\third_party\TIMAC-CC2530-1. #
#                          3.1\COMPONENTS\MAC\INCLUDE\ -I                     #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\third_party\TIMAC-CC2530-1. #
#                          3.1\COMPONENTS\MAC\HIGH_LEVEL\ -I                  #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\third_party\TIMAC-CC2530-1. #
#                          3.1\COMPONENTS\MAC\LOW_LEVEL\ -I                   #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\third_party\TIMAC-CC2530-1. #
#                          3.1\COMPONENTS\MAC\LOW_LEVEL\SRF04\ -I             #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\third_party\TIMAC-CC2530-1. #
#                          3.1\COMPONENTS\MAC\LOW_LEVEL\SRF04\SINGLE_CHIP\    #
#                          -I E:\p4\main\Zigbee\cc2530\mine_project_voice\app #
#                          \MobilePhone\iar\..\..\..\third_party\TIMAC-CC2530 #
#                          -1.3.1\COMPONENTS\OSAL\INCLUDE\ -I                 #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\third_party\TIMAC-CC2530-1. #
#                          3.1\COMPONENTS\OSAL\MCU\CC2530\ -I                 #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\third_party\TIMAC-CC2530-1. #
#                          3.1\COMPONENTS\SERVICES\SADDR\ -I                  #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\third_party\TIMAC-CC2530-1. #
#                          3.1\COMPONENTS\SERVICES\SDATA\ -I                  #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\third_party\TIMAC-CC2530-1. #
#                          3.1\COMPONENTS\MT\ -I E:\p4\main\Zigbee\cc2530\min #
#                          e_project_voice\app\MobilePhone\iar\..\..\..\..\.. #
#                          \..\common\ -I E:\p4\main\Zigbee\cc2530\mine_proje #
#                          ct_voice\app\MobilePhone\iar\..\..\..\..\..\common #
#                          \lcd\ -I E:\p4\main\Zigbee\cc2530\mine_project_voi #
#                          ce\app\MobilePhone\iar\..\..\..\..\..\..\common\2g #
#                          \ -I E:\p4\main\Zigbee\cc2530\mine_project_voice\a #
#                          pp\MobilePhone\iar\..\..\..\..\..\..\ -I           #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\driver\ -I                  #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\util\ -I                    #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\driver\include\ -I          #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\driver\common\ -I           #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\driver\MobilePhone\ -I      #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\driver\MobilePhone\audio\   #
#                          -I E:\p4\main\Zigbee\cc2530\mine_project_voice\app #
#                          \MobilePhone\iar\..\..\..\driver\MobilePhone\commo #
#                          n\ -I E:\p4\main\Zigbee\cc2530\mine_project_voice\ #
#                          app\MobilePhone\iar\..\..\..\driver\MobilePhone\ke #
#                          y\ -I E:\p4\main\Zigbee\cc2530\mine_project_voice\ #
#                          app\MobilePhone\iar\..\..\..\driver\MobilePhone\lc #
#                          d\ -I E:\p4\main\Zigbee\cc2530\mine_project_voice\ #
#                          app\MobilePhone\iar\..\..\..\driver\MobilePhone\io #
#                          expand\ -I "C:\Program Files\IAR Systems\Embedded  #
#                          Workbench 5.4\8051\INC\" -I "C:\Program Files\IAR  #
#                          Systems\Embedded Workbench 5.4\8051\INC\CLIB\"     #
#                          -Ohs                                               #
#    List file          =  E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\Release\List\hal_audio.lst           #
#    Object file        =  E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\Release\Obj\hal_audio.r51            #
#                                                                             #
#                                                                             #
###############################################################################

E:\p4\main\Zigbee\cc2530\mine_project_voice\driver\MobilePhone\hal_audio.c
      1          /***********************************************
      2          
      3          Filename:       hal_audio.c
      4          Revised:        $Date: 2011/08/24 22:48:52 $
      5          Revision:       $Revision: 1.8 $
      6          
      7          Description:    This file contains the audio definitions.
      8          ************************************************/
      9          /*********************************************************************
     10          For yiri RRN board, we have two different terminals: one is mobile phone , and
     11          the other is used to orientation and so on.
     12          For the tiri mobile phone, we need add audio driver in it. And this file is defined
     13          related audio interface used in yiri mobile phone.
     14          **********************************************************************/
     15          
     16          /*********************************************************************
     17          * INCLUDES
     18          */
     19          #include "ZcomDef.h"
     20          #include "OSAL.h"
     21          #include "MobilePhone_global.h"
     22          #include "string.h"
     23          #include "hal_audio.h"
     24          #include "hal_mcu.h"
     25          #include "hal_drivers.h"
     26          #include "MobilePhone_MenuLibChinese.h"
     27          #include "MobilePhone_cfg.h"
     28          #include "MobilePhone.h"
     29          #include "MobilePhone_Function.h"
     30          #include "Audio_ambe_serial.h"
     31          #include "voicedqueue.h"
     32          #include "key.h"
     33          #include "StringUtil.h"
     34          /*********************************************************************
     35          * CONSTANTS
     36          */
     37          /*********************************************************************
     38          * MACROS
     39          */
     40          
     41          //Frame Head stutas_0
     42          #define SILENCEDETECTED     0x02
     43          
     44          // Task ID not initialized
     45          #define NO_TASK_ID 0xFF
     46          
     47          
     48          #define BELL_TIMEOUT           (30000/40)        //    max bell ring timeout
     49          #define BUSY_TIMEOUT           (3000/40)        //    max bell ring timeout
     50          
     51          #define SHAKE_ONPERIOD          (4000/40)
     52          #define SHAKE_SLIENCEPERIOD (2000/40)
     53          
     54          
     55          /*********************************************************************
     56          * TYPEDEFS
     57          */
     58          typedef struct
     59          {
     60              uint16  Node1;
     61              uint16  Node2;
     62              uint16  Beat;
     63          } RingPace_t;
     64          
     65          /*********************************************************************
     66          * AMBE  FrameHead
     67          */
     68          typedef struct
     69          {
     70              uint16   Header;
     71              uint8     ID;
     72              uint8     Status_0;
     73              uint16   Status_1;
     74              uint16   Status_2;
     75              uint16   Status_3;
     76          } AMBE_FrameHead_t;
     77          
     78          typedef struct
     79          {
     80              uint8    * pbuf;
     81              uint16     bufLen;
     82              uint16     writedLen;
     83          } VoiceBell_info_t;
     84          
     85          typedef struct
     86          {
     87              voice_dqueue_ctrl_t  bufctrl;
     88              uint16             idx;
     89              uint16             silencesign;
     90          } voice_ctrl_t;
     91          /*********************************************************************
     92          * LOCAL VARIABLES
     93          */
     94          static byte registeredAudioTaskID = NO_TASK_ID;
     95          
     96          static uint8 RelayBuf[VOICE_PER_RAW_DATA_LEN]; //relay audio data from queue to AMBE.
     97          
     98          static VoiceBell_info_t       Hal_VoiceBell_info;
     99          
    100          //static voice_dqueue_ctrl_t WriteBufCtrl;
    101          //static voice_dqueue_ctrl_t  ReadBufCtrl;
    102          voice_ctrl_t        writectrl;
    103          voice_ctrl_t        readctrl;
    104          uint8           audiomsg[sizeof(app_mpVoice_t) + VOICE_READBUFSIZE + 10];
    105          
    106          static bool IsWriteEmpty = false; //trigger ambe to write interrupt.
    107           bool IsReadFull = false; //trigger ambe to read interrupt.
    108          /*
    109          static bool WriteAmbe = false;
    110          static bool ReadAmbe = false;
    111          */
    112          //Sound Stream Defination
    113          
    114          /* playing ring info */
    115          static  RingPace_t const * RingHeader = NULL;
    116          static uint16         RingLen = 0;
    117          static uint8         Ringname = 0;
    118          static uint8          RingToneType;
    119          static uint8         Ring_openflag;
    120          static bool          Ring_playing = FALSE;
    121          static uint16         Ring_PlayPaceCnt = 0;
    122          static uint16         Ring_PlayBeatCnt = 0;
    123          static uint16         Ring_PlayTotalCnt = 0;
    124          
    125          /* saved ring infos */
    126          static uint8         Saved_Bell_Name = RING_BELL_1;
    127          static uint8         Saved_SMS_Name = RING_BELL_4;
    128          static bool          Saved_shakeen = FALSE;
    129          static uint8         Ring_BellGainIdx = MAX_GAIN_LEVEL - 1;
    130          static uint8         Ring_SoundGainIdx = MAX_GAIN_LEVEL - 1;
    131          static uint8         Ring_PadGainIdx = MAX_GAIN_LEVEL - 1;
    132          
    133          
    134          static   const RingPace_t Bell_1[] =
    135          {
    136              {0, 0, 24}, {MidLa, 0, 6}, {HiDo, 0, 3}, {MidLa, 0, 3}, {MidMi, 0, 6}, {MidLa, 0, 3},
    137              {MidMi, 0, 3}, {MidDo, 0, 6}, {MidMi, 0, 3}, {MidDo, 0, 3}, {LowLa, 0, 12}, {LowSi, 0, 3},
    138              {LowLa, 0, 3}, {LowSi, 0, 3}, {LowLa, 0, 3}, {LowSi, 0, 3}, {LowLa, 0, 3}, {LowSi, 0, 3},
    139              {LowLa, 0, 3}, {LowSi, 0, 6}, {MidRe, 0, 3}, {LowSi, 0, 3}, {MidDo, 0, 12}
    140          };
    141          
    142          static   const RingPace_t Bell_2[] =
    143          {
    144              {0, 0, 12}, {HiSo, HiSi, 1}, {HiSi, HiSi, 1}, {HiSo, HiSi, 1}, {HiSi, HiSi, 1},
    145              {HiSo, HiSi, 1}, {HiSi, HiSi, 1}, {HiSo, HiSi, 1}, {HiSi, HiSi, 1},
    146              {HiSo, HiSi, 1}, {HiSi, HiSi, 1}, {HiSo, HiSi, 1}, {HiSi, HiSi, 1}, {0, 0, 24}
    147          };
    148          
    149          static   const RingPace_t Bell_3[] =
    150          {
    151              {0, 0, 24},
    152              {HiDo, HiFa, 1}, {HiFa, HiFa, 1}, {HiDo, HiFa, 1}, {HiFa, HiFa, 1},
    153              {HiDo, HiFa, 1}, {HiFa, HiFa, 1}, {HiDo, HiFa, 1}, {HiFa, HiFa, 1},
    154              {HiDo, HiFa, 1}, {HiFa, HiFa, 1}, {HiDo, HiFa, 1}, {HiFa, HiFa, 1}
    155              /*
    156              {0 , 0, 24}, {HiDo, HiFa, 1}, {HiFa, HiFa, 1}, {HiDo, HiFa, 1}, {HiFa, HiFa, 1},
    157              {HiDo, HiFa, 1}, {HiFa, HiFa, 1}, {HiDo, HiFa, 1}, {HiFa, HiFa, 1},
    158              {HiDo, HiFa, 1}, {HiFa, HiFa, 1}, {HiDo, HiFa, 1}, {HiFa, HiFa, 1}
    159              */
    160          };
    161          
    162          static   const RingPace_t  Bell_4[] =
    163          {
    164              {0, 0, 24}, {HiDo, 0, 6}, {MidFa, 0, 6}, {MidLa, 0, 6}, {HiDo, 0, 6}
    165          };
    166          
    167          static  const RingPace_t  PowerOn[] =  {{0, 0, 12}, {MidDo, 0, 3}, {MidMi, 0, 3}, {MidSo, 0, 3}, {HiDo, 0, 6}};
    168          
    169          static  const RingPace_t  PowerOff[] =  {{0, 0, 12}, {HiDo, 0, 3}, {MidSo, 0, 3}, {MidMi, 0, 3}, {MidDo, 0, 6}};
    170          
    171          static  const RingPace_t Ring[] = {{Ring_Note1, Ring_Note2, 24}, {0, 0, 24}};
    172          
    173          static  const RingPace_t  Busy[] = {{Digit0_Note2, Busy_Note2, 9}, {0, 0, 9}};
    174          
    175          static  const RingPace_t  Dial[] = {{Dial_Note1, Dial_Note2, 1}};
    176          
    177          static  const RingPace_t  Digit1[] = {{Digit1_Note1, Digit1_Note2, 3}};
    178          
    179          static  const RingPace_t  Digit2[] = {{Digit2_Note1, Digit2_Note2, 3}};
    180          
    181          static  const RingPace_t  Digit3[] = {{Digit3_Note1, Digit3_Note2, 3}};
    182          
    183          static  const RingPace_t  Digit4[] = {{Digit4_Note1, Digit4_Note2, 3}};
    184          
    185          static  const RingPace_t  Digit5[] = {{Digit5_Note1, Digit5_Note2, 3}};
    186          
    187          static  const RingPace_t  Digit6[] = {{Digit6_Note1, Digit6_Note2, 3}};
    188          
    189          static  const RingPace_t  Digit7[] = {{Digit7_Note1, Digit7_Note2, 3}};
    190          
    191          static  const RingPace_t  Digit8[] = {{Digit8_Note1, Digit8_Note2, 3}};
    192          
    193          static  const RingPace_t  Digit9[] = {{Digit9_Note1, Digit9_Note2, 3}};
    194          
    195          static  const RingPace_t  Digit0[] = {{Digit0_Note1, Digit0_Note2, 3}};
    196          
    197          static  const RingPace_t  DigitStar[] = {{DigitStar_Note1, DigitStar_Note2, 3}};
    198          
    199          static  const RingPace_t  DigitPound[] = {{DigitPound_Note1, DigitPound_Note2, 3}};
    200          
    201          static  const  uint16 BellGainList[MAX_GAIN_LEVEL] =
    202          {
    203              GAIN_MIN,
    204              GAIN_10000,
    205              GAIN_15000,
    206              GAIN_25000,
    207              GAIN_MAX
    208          };
    209          static  const uint16 SoundGainList[MAX_GAIN_LEVEL] =
    210          {
    211              GAIN_MIN,
    212              GAIN_2500,
    213              GAIN_5000,
    214              GAIN_10000,
    215              GAIN_15000
    216          };
    217          static  const uint16 PadGainList[MAX_GAIN_LEVEL] =
    218          {
    219              GAIN_MIN,
    220              GAIN_20000,
    221              GAIN_20000,
    222              GAIN_20000,
    223              GAIN_20000,
    224          };
    225          
    226          static const RingPace_t *  const Header_List[] =
    227          {
    228              NULL,
    229              Bell_1,
    230              Bell_2,
    231              Bell_3,
    232              Bell_4,
    233              PowerOn,
    234              PowerOff,
    235          
    236              Ring,
    237              Busy,
    238          
    239              Dial,
    240              Digit1,
    241              Digit2,
    242              Digit3,
    243              Digit4,
    244              Digit5,
    245              Digit6,
    246              Digit7,
    247              Digit8,
    248              Digit9,
    249              Digit0,
    250              DigitStar,
    251              DigitPound,
    252          };
    253          
    254          static  const uint16 Length_list[] =
    255          {
    256              0,
    257              sizeof(Bell_1) / sizeof(Bell_1[0]),
    258              sizeof(Bell_2) / sizeof(Bell_2[0]),
    259              sizeof(Bell_3) / sizeof(Bell_3[0]),
    260              sizeof(Bell_4) / sizeof(Bell_4[0]),
    261          
    262              sizeof(PowerOn) / sizeof(PowerOn[0]),
    263              sizeof(PowerOff) / sizeof(PowerOff[0]),
    264          
    265              sizeof(Ring) / sizeof(Ring[0]),
    266              sizeof(Busy) / sizeof(Busy[0]),
    267          
    268              sizeof(Dial) / sizeof(Dial[0]),
    269              sizeof(Digit1) / sizeof(Digit1[0]),
    270              sizeof(Digit2) / sizeof(Digit2[0]),
    271              sizeof(Digit3) / sizeof(Digit3[0]),
    272              sizeof(Digit4) / sizeof(Digit4[0]),
    273              sizeof(Digit5) / sizeof(Digit5[0]),
    274              sizeof(Digit6) / sizeof(Digit6[0]),
    275              sizeof(Digit7) / sizeof(Digit7[0]),
    276              sizeof(Digit8) / sizeof(Digit8[0]),
    277              sizeof(Digit9) / sizeof(Digit9[0]),
    278              sizeof(Digit0) / sizeof(Digit0[0]),
    279              sizeof(DigitStar) / sizeof(DigitStar[0]),
    280              sizeof(DigitPound) / sizeof(DigitPound[0]),
    281          };
    282          
    283          
    284          static  const uint8 OutofReach_buf[] =
    285          {
    286              0x6c, 0x24, 0x29, 0x74, 0xff, 0x7e ,
    287              0x6e, 0x2, 0x6c, 0x11, 0xee, 0xa  ,
    288              0x28, 0x46, 0xf, 0x30, 0xbd, 0x4e ,
    289              0x3e, 0x22, 0x6d, 0x15, 0xe8, 0xa4 ,
    290              0x4e, 0x4, 0x2d, 0x35, 0x9b, 0x4e ,
    291              0x3c, 0x20, 0x6a, 0x4b, 0x42, 0xb6 ,
    292              0x6c, 0x2, 0x4f, 0x13, 0xce, 0x52 ,
    293              0x3c, 0x4 , 0x2d, 0x34, 0xaf, 0x5e ,
    294              0x68, 0x62, 0x6d, 0x10, 0xff, 0x6a ,
    295              0x3c, 0x2, 0x49, 0x52, 0xfa, 0x78 ,
    296              0x6e, 0x20, 0x4b, 0x57 , 0xef, 0x1a ,
    297              0x2c, 0x24, 0x2a, 0x4a, 0x23, 0xf4 ,
    298              0x6e, 0x2, 0x9, 0x53, 0xca, 0x7a ,
    299              0x6e, 0x64, 0x2d, 0x12, 0xee, 0xe  ,
    300              0x6a, 0x42, 0xe, 0x2d, 0x13, 0x4a ,
    301              0x3e, 0x26, 0x2f, 0x11, 0xad, 0x28  ,
    302              0x6e, 0x0, 0x4f, 0x35, 0xad, 0x56 ,
    303              0x7e, 0x20, 0x4a, 0x4d, 0x43, 0xb4 ,
    304              0x2e, 0x2, 0x4e, 0x2a, 0x15, 0xa ,
    305              0x28, 0x66 , 0x28, 0x4f, 0x45, 0x7a ,
    306              0xc, 0x2, 0x4d, 0x17, 0xab, 0xd6 ,
    307              0x28, 0x44, 0x2f, 0x11, 0xfd, 0x7e ,
    308              0x7c, 0x24, 0x29, 0x74 , 0xed, 0x5a ,
    309              0x1c, 0x6, 0x2d, 0x15, 0xf8, 0x6c ,
    310              0x4e, 0x22, 0xd, 0x31, 0xad, 0x6e ,
    311              0x48, 0x46, 0xe, 0x18, 0x64, 0xe  ,
    312              0x78, 0x42, 0x4d, 0x14, 0xbc, 0x4a ,
    313              0x3c, 0x2, 0xf, 0x24, 0xb8, 0x6e ,
    314              0x2c, 0x24, 0x2a, 0x49, 0x67, 0x96 ,
    315              0x5a, 0x60, 0x6e, 0x2a, 0x33, 0x6c ,
    316              0x2e, 0x42, 0xa, 0x4d, 0x41, 0x1e ,
    317              0x3c, 0x6 , 0x2d, 0x13, 0xaf, 0x68 ,
    318              0x7a, 0x42, 0x4b, 0x14, 0xed, 0x3e ,
    319              0x7c, 0x2, 0x4c, 0x69, 0x2, 0x68 ,
    320              0x3e, 0x24, 0x4b, 0x75 , 0xdb, 0xe ,
    321              0x6c, 0x20, 0x2f, 0x35, 0xac, 0x4e ,
    322              0x5e, 0x6, 0xe, 0xa, 0x56, 0x2e ,
    323              0x6e, 0x20, 0x4b, 0x54, 0xab, 0x1e  ,
    324              0x6a, 0x40, 0x6d, 0x13, 0xfe, 0x7c ,
    325              0x4c, 0x20, 0x6b, 0x53, 0xce, 0xe ,
    326              0x28, 0x64, 0xf, 0x74, 0xfe, 0x4a ,
    327              0x2c, 0x46, 0xa, 0x4b, 0x31, 0xf2 ,
    328              0x3c, 0x22, 0xe, 0xb, 0x46, 0x78 ,
    329              0x68, 0x40 , 0xe, 0xb, 0x30, 0x3c ,
    330              0x2c, 0x24, 0x2a, 0x4e, 0x47, 0x5e ,
    331              0x3c, 0x20, 0x4f, 0x6, 0xde, 0x6a ,
    332              0x68, 0x44, 0xe, 0x9 , 0x60, 0x6c ,
    333              0x2e, 0x22, 0x8, 0x6f, 0x65, 0x1a ,
    334              0xc, 0x62, 0x4e, 0x9, 0x43, 0xf6 ,
    335              0x6c, 0x6, 0x49, 0x71, 0x9c, 0x52  ,
    336              0x38, 0x62, 0x69, 0x52, 0xc8, 0xe0 ,
    337              0x3c, 0x42, 0x4e, 0x68, 0x77, 0x68  ,
    338              0x2e, 0x6, 0x8, 0xb, 0x53, 0x1e ,
    339              0x48, 0x42, 0x4e, 0x3c, 0x62, 0xc6 ,
    340              0x1e, 0x62, 0x6c, 0x58, 0x24, 0x3c ,
    341              0x1a, 0x46 , 0xd, 0x11, 0xbe, 0x6c ,
    342              0x7e, 0x0, 0x68, 0x4e, 0x22, 0x2c ,
    343              0x68, 0x66, 0xd, 0x35, 0xcb, 0x6a ,
    344              0x2c, 0x22, 0x9, 0x51 , 0xad, 0x7c ,
    345              0x2e, 0x2, 0x6e, 0x39, 0x62, 0x96 ,
    346              0x38, 0x64, 0x2b, 0x56, 0xcd, 0x7a ,
    347              0x2e, 0x0, 0x6d, 0x15, 0xec, 0xc2  ,
    348              0x3c, 0x24, 0x28, 0x69, 0x33, 0x7c ,
    349              0x6a, 0x46, 0xd, 0x17, 0x8f, 0x3a ,
    350              0x6a, 0x60, 0x68, 0x9, 0x75, 0x58 ,
    351              0x3c, 0x62, 0x6c, 0x79, 0x14, 0x7a ,
    352              0x3a, 0x46, 0x2f, 0x34, 0xb9, 0xf0 ,
    353              0x78, 0x42 , 0x4a, 0x58, 0x72, 0x78 ,
    354              0x7e, 0x24, 0xb, 0x47, 0xcc, 0x16 ,
    355              0x3a, 0x60, 0x68, 0x4a, 0x43, 0xe6 ,
    356              0x4c, 0x60, 0x6f, 0x72 , 0x9e, 0x1e ,
    357              0x2a, 0x46, 0x48, 0x4f, 0x2, 0x5a ,
    358              0x7e, 0x20, 0x2d, 0x16, 0xfb, 0x28 ,
    359              0x1e, 0x24, 0x9, 0x71, 0xe8, 0x7c  ,
    360              0x6a, 0x60, 0x4f, 0x11, 0xde, 0x4a ,
    361              0xc, 0x6, 0xa, 0x6e, 0x31, 0x7e ,
    362              0x5c, 0x20, 0x6c, 0x29, 0x16, 0x2c ,
    363              0x7c, 0x20, 0x4e, 0x9, 0x61, 0x78 ,
    364              0x8, 0x44, 0xf, 0x23, 0xc8, 0x4e ,
    365              0x86, 0xa6 , 0x4, 0x2d, 0x5e, 0xa6 ,
    366              0xe6, 0x82, 0x43, 0x48, 0x60, 0x7c ,
    367              0x80, 0xc6, 0x26, 0xe, 0x27, 0x1a ,
    368              0xa4, 0x80, 0x22, 0x4a , 0x76, 0xe6 ,
    369              0x55, 0xee, 0x67, 0xc5, 0x65, 0x9b ,
    370              0x17, 0xbc, 0xa2, 0xea, 0x9, 0xec ,
    371              0x35, 0x99, 0xb4, 0x9e, 0xdd, 0x73  ,
    372              0x75, 0xf9, 0xf9, 0x89, 0xd9, 0x72 ,
    373              0x5, 0xdb, 0xd3, 0xfa, 0xbd, 0x4e ,
    374              0x65, 0x9f, 0x5f, 0xbd, 0x9e, 0x46 ,
    375              0x45, 0xbb, 0x55, 0xfe, 0xce, 0x80 ,
    376              0x11, 0xf6, 0xac, 0xcc, 0xda, 0xba ,
    377              0x15, 0xf3 , 0x66, 0xcd, 0xe8, 0xa2 ,
    378              0x55, 0x3f, 0xbc, 0xc8, 0xcc, 0xa3 ,
    379              0x45, 0x5f, 0xb9, 0x9f, 0xc4, 0x3b ,
    380              0x15, 0x3e, 0xa9, 0xec , 0xe5, 0x99 ,
    381              0x5, 0x5c, 0x8c, 0xa2, 0x80, 0xb ,
    382              0xa2, 0xa0, 0x40, 0xc3, 0xf2, 0x30 ,
    383              0xf2, 0xe0, 0x5, 0x98, 0x35, 0xa4  ,
    384              0x55, 0x59, 0x48, 0xf8, 0x5f, 0xaa ,
    385              0x11, 0x5d, 0x1d, 0xfc, 0x96, 0x82 ,
    386              0x5, 0x19, 0x50, 0xe9, 0xda, 0x93 ,
    387              0x51, 0x59, 0x51, 0xcf, 0xfc, 0x3b ,
    388              0x51, 0x59, 0x51, 0xdd, 0x89, 0x38 ,
    389              0x15, 0x5d , 0x55, 0xdd, 0x99, 0x1a ,
    390              0x15, 0x1d, 0x55, 0xfd, 0x9a, 0x3b ,
    391              0x5, 0x19, 0x1c, 0xac, 0xf1, 0x8b ,
    392              0xb2, 0xa0, 0x6, 0xc6 , 0x46, 0xe2 ,
    393              0xf6, 0x86, 0x41, 0x98, 0x5a, 0x36 ,
    394              0x96, 0x80, 0x1, 0xbb, 0x9f, 0x58 ,
    395              0x11, 0x9f, 0x47, 0xfd, 0xe8, 0xb  ,
    396              0x2b, 0x53, 0x85, 0x98, 0x89, 0xe4 ,
    397              0x79, 0x59, 0x7f, 0xda, 0x8a, 0x7c ,
    398              0x7b, 0x59, 0xdd, 0x9c, 0xab, 0x2d ,
    399              0x2b, 0xf1, 0x79, 0xfb, 0xed, 0xf1 ,
    400              0x6d, 0xb7, 0xa9, 0x99, 0xfd, 0x4b ,
    401              0x6f, 0xce , 0x5, 0xb9, 0x92, 0xe3 ,
    402              0x1d, 0xaa, 0x45, 0xec, 0x58, 0x3f ,
    403              0x4f, 0xe6, 0x91, 0x89, 0x99, 0x2c ,
    404              0x3d, 0xf3, 0xfb, 0xda , 0x9f, 0x1c ,
    405              0x7d, 0xb3, 0x1b, 0xd8, 0xd9, 0xb7 ,
    406              0x1d, 0x94, 0x4c, 0xbc, 0x9b, 0xb6 ,
    407              0x7f, 0x86, 0xe5, 0xd1, 0x7e, 0xd3  ,
    408              0xa6, 0xa4, 0x61, 0x19, 0xf8, 0x72 ,
    409              0x86, 0x84, 0x22, 0xed, 0xa1, 0x34 ,
    410              0x55, 0x58, 0x1c, 0xff, 0xfb, 0xb2 ,
    411              0x15, 0x59, 0x1d, 0xaf, 0xbd, 0x2b ,
    412              0x55, 0x59, 0xd1, 0xba, 0xbd, 0x29 ,
    413              0x51, 0xf7 , 0x51, 0xda, 0xcd, 0xb ,
    414              0x41, 0xb1, 0xa9, 0xdb, 0xe8, 0xa1 ,
    415              0x65, 0xbb, 0xe3, 0xfd, 0xce, 0xf7 ,
    416              0xb, 0x73, 0x6f, 0xcf , 0xb9, 0xe4 ,
    417              0x79, 0x54, 0xd, 0xab, 0x7c, 0xea ,
    418              0xe0, 0xc0, 0x24, 0xc5, 0xec, 0x6e ,
    419              0xa0, 0xe6, 0x5, 0x81, 0x6c, 0x4a  ,
    420              0xe0, 0xe0, 0x22, 0x82, 0x3f, 0xd2 ,
    421              0xb6, 0xa2, 0x0, 0xa0, 0x77, 0xdc ,
    422              0x45, 0x95, 0x8a, 0xc7, 0x39, 0xba ,
    423              0x15, 0x9b, 0x52, 0x9b, 0xc8, 0x20 ,
    424              0x63, 0xd9, 0xb1, 0xfc, 0xab, 0x74 ,
    425              0x2b, 0x33 , 0x3f, 0xfe, 0xdf, 0x4e ,
    426              0x3f, 0x1b, 0x37, 0xb8, 0x8b, 0xe8 ,
    427              0x4b, 0x1f, 0xbd, 0xdb, 0xb8, 0xf6 ,
    428              0x3b, 0x93, 0x5f, 0xfb , 0xbc, 0xc2 ,
    429              0x2d, 0xb1, 0xdd, 0x9e, 0xa8, 0x48 ,
    430              0x3b, 0xf5, 0x9d, 0xbd, 0xac, 0x68 ,
    431              0x6d, 0xb1, 0x9d, 0x9b, 0xef, 0x4b  ,
    432              0x3d, 0xbb, 0xd, 0xa9, 0xea, 0xc8 ,
    433              0x3d, 0x98, 0x47, 0xca, 0xc2, 0xfb  ,
    434              0x4d, 0xe6, 0xad, 0x7e, 0xdc, 0x68 ,
    435              0x86, 0x84, 0x60, 0x1d, 0x1, 0x46 ,
    436              0xe2, 0xc2, 0x7, 0x38, 0x23, 0xa6 ,
    437              0x79, 0xe8 , 0xe7, 0x6d, 0x92, 0x5e ,
    438              0x6f, 0xcc, 0xa6, 0x6c, 0xc4, 0x6e ,
    439              0xa4, 0x82, 0x62, 0x81, 0x60, 0x1e ,
    440              0xe2, 0xe2, 0x44, 0xb4 , 0xb9, 0x2a ,
    441              0x7f, 0xd6, 0xe, 0x93, 0xa9, 0xe9 ,
    442              0x7b, 0x95, 0x3f, 0x8b, 0x3a, 0xf0 ,
    443              0x2d, 0x1b, 0x9f, 0xde, 0xe7, 0x38  ,
    444              0x5d, 0xd, 0x44, 0xbd, 0xd3, 0xa4 ,
    445              0x7f, 0x53, 0x25, 0xff, 0x2e, 0x85 ,
    446              0x2f, 0x16, 0x61, 0xd1, 0xc5, 0x76 ,
    447              0x3b, 0x26, 0x48, 0xc3, 0xab, 0x32 ,
    448              0xe0, 0xa0, 0x43, 0x9e, 0x19, 0x30 ,
    449              0xb6, 0x86 , 0x25, 0x8b, 0xc7, 0xb0 ,
    450              0x15, 0x7f, 0xab, 0x9a, 0x89, 0xa9 ,
    451              0x55, 0xb7, 0xa3, 0x99, 0xf8, 0x32 ,
    452              0x25, 0x9f, 0xf, 0x9a , 0x89, 0x5c ,
    453              0x47, 0xdb, 0xd3, 0xfc, 0xf8, 0x6f ,
    454              0x77, 0xbd, 0xa7, 0xdd, 0x9c, 0xa4 ,
    455              0x51, 0xdf, 0xc, 0xea, 0xbd, 0xa5  ,
    456              0x61, 0xec, 0xae, 0xbc, 0x4d, 0x66 ,
    457              0x1, 0xe8, 0xe2, 0xdb, 0x31, 0x54 ,
    458              0x77, 0x88, 0xe0, 0xe5, 0xeb, 0x34 ,
    459              0xf4, 0x80, 0x63, 0x93, 0x69, 0x70 ,
    460              0xf0, 0xa0, 0x45, 0x86, 0xcc, 0x2c ,
    461              0x6d, 0xe6 , 0xaf, 0x92, 0xbb, 0xed ,
    462              0x5f, 0xfa, 0x41, 0xca, 0x76, 0xea ,
    463              0x7f, 0x99, 0x64, 0xc8, 0x63, 0xe8 ,
    464              0x6f, 0xd6, 0x80, 0xb1 , 0x9f, 0xd3 ,
    465              0x7f, 0x2e, 0x84, 0x96, 0xb4, 0xae ,
    466              0x3d, 0x71, 0x6a, 0x93, 0xe3, 0xef ,
    467              0x63, 0x9f, 0x8b, 0xf1, 0x68, 0xcc  ,
    468              0x5, 0xf9, 0x24, 0xe4, 0xc6, 0xaa ,
    469              0x15, 0xb5, 0xaf, 0xc1, 0x5c, 0xba ,
    470              0x5, 0xb1, 0xe8, 0xc4, 0xd7, 0x9b ,
    471              0x25, 0x9f, 0x4b, 0xa9, 0x3b, 0x74 ,
    472              0x25, 0xba, 0xe9, 0xcb, 0xa6, 0xa7 ,
    473              0x59, 0x49 , 0x67, 0xdf, 0xe3, 0xa ,
    474              0xf, 0x82, 0x66, 0xdf, 0xb3, 0xe1 ,
    475              0x3f, 0xf2, 0xcd, 0xf9, 0x27, 0x86 ,
    476              0x94, 0xe4, 0x2, 0xf4 , 0x6a, 0x74 ,
    477              0x1f, 0xca, 0x89, 0xa7, 0xf3, 0x77 ,
    478              0xd4, 0x86, 0x1, 0xa0, 0xc8, 0x52 ,
    479              0x86, 0xe6, 0x63, 0xe5, 0xd8, 0x26  ,
    480              0xf2, 0xc2, 0x46, 0x9b, 0x1e, 0x34 ,
    481              0xd4, 0x82, 0x63, 0xcb, 0x48, 0x6 ,
    482              0x7f, 0x4e, 0x47, 0xfe, 0x6c, 0xc7 ,
    483              0x5d, 0x4c, 0x6e, 0x8c, 0x4d, 0xbb ,
    484              0x2f, 0x7f, 0xb8, 0x8f, 0x92, 0x1a ,
    485              0xd, 0x19 , 0xff, 0xed, 0xb6, 0x3d ,
    486              0x3f, 0x5b, 0xff, 0xbd, 0xf4, 0x1b ,
    487              0x3d, 0x5b, 0xfb, 0xfb, 0xc2, 0x68 ,
    488              0x2f, 0x7f, 0x99, 0xdb , 0x94, 0xe ,
    489              0x7f, 0x1f, 0x9a, 0xed, 0xf1, 0x8 ,
    490              0xc4, 0xe4, 0x4, 0x97, 0xbb, 0x92 ,
    491              0xc4, 0x86, 0x67, 0x3e, 0xdc, 0xc2  ,
    492              0xa2, 0xc2, 0x7, 0x59, 0xc, 0x3e ,
    493              0xe2, 0x82, 0x23, 0x35, 0xf9, 0x76 ,
    494              0xc4, 0x86, 0x24, 0x4e, 0x30, 0x1e ,
    495              0xa6, 0xe4, 0x0, 0x79, 0x47, 0xf6 ,
    496              0xb0, 0xe4, 0x0, 0x49, 0x23, 0x1e ,
    497              0x18, 0x64 , 0x2c, 0xd, 0x21, 0x4e ,
    498              0x7c, 0x2, 0x4d, 0x53, 0xae, 0x7a ,
    499              0x3e, 0x26, 0x4f, 0x35, 0xf8, 0xe ,
    500              0x38, 0x42, 0x6a, 0x4a , 0x43, 0x6a ,
    501              0x3c, 0x24, 0x29, 0x57, 0xa9, 0xf0 ,
    502              0xc, 0x2, 0xb, 0x51, 0xec, 0x3c ,
    503              0x7c, 0x6, 0xe, 0x2c, 0x52, 0x6c  ,
    504              0x6c, 0x20, 0x6d, 0x43, 0x8a, 0x42 ,
    505              0xe, 0x26, 0xa, 0x6c, 0x37, 0x92 ,
    506              0x7c, 0x0, 0x4a, 0x4b, 0x61, 0x4e ,
    507              0x5c, 0x22, 0x4e, 0x1d, 0x11, 0x6e ,
    508              0x5a, 0x42, 0x6c, 0x29, 0x46, 0x7c ,
    509              0x7e, 0x4 , 0x2b, 0x57, 0xfb, 0x26 ,
    510              0xe, 0x24, 0x2c, 0x2a, 0x15, 0x4e ,
    511              0x3c, 0x20, 0x6e, 0xe, 0x66, 0xe4 ,
    512              0x68, 0x42, 0x6c, 0x28 , 0x35, 0x68 ,
    513              0x7e, 0x20, 0x4a, 0x4c, 0x51, 0x3c ,
    514              0x2c, 0x26, 0xd, 0x17, 0xbc, 0x4a ,
    515              0x7a, 0x40, 0xf, 0x27, 0xf9, 0x2e  ,
    516              0x7c, 0x22, 0x4f, 0x15, 0xb9, 0x4c ,
    517              0x7e, 0x24, 0x6c, 0x9, 0x35, 0x62 ,
    518              0x96, 0xe0, 0x41, 0x3d, 0x2d, 0x76 ,
    519              0x92, 0xe6, 0x5, 0xd6, 0x20, 0x34 ,
    520              0xe6, 0x80, 0x22, 0xdb, 0x26, 0x2a ,
    521              0xc6, 0xe0 , 0x5, 0xbf, 0x60, 0x24 ,
    522              0xe6, 0xc6, 0x3, 0xe8, 0xd, 0x36 ,
    523              0x67, 0xcc, 0xa5, 0xcc, 0x60, 0xdf ,
    524              0x2f, 0x62, 0xac, 0xcf , 0xc6, 0x98 ,
    525              0x1d, 0x1a, 0xb5, 0x8e, 0xfa, 0x3e ,
    526              0x4d, 0x3d, 0x9b, 0xfa, 0xcb, 0xf ,
    527              0x6f, 0xb1, 0x55, 0x9e, 0xbb, 0x7b  ,
    528              0xb, 0xd7, 0xe, 0xed, 0xff, 0xea ,
    529              0x7f, 0xb3, 0x5c, 0xbd, 0xf0, 0xc2  ,
    530              0x7f, 0x93, 0x74, 0xe9, 0xa4, 0xd3 ,
    531              0x7b, 0x7f, 0xc8, 0x88, 0x6d, 0xf9 ,
    532              0x2d, 0xe4, 0x3, 0x80, 0xf8, 0x76 ,
    533              0x94, 0xe2 , 0x42, 0x82, 0xea, 0x74 ,
    534              0xd6, 0xe2, 0x6, 0xa3, 0xf0, 0x16 ,
    535              0xb4, 0xc6, 0x25, 0xf3, 0x7a, 0x16 ,
    536              0xb4, 0x84, 0x47, 0xf0 , 0x10, 0x32 ,
    537              0xa2, 0xa4, 0x60, 0xd4, 0x4a, 0x74 ,
    538              0x51, 0x18, 0x0, 0x8f, 0x97, 0xbb ,
    539              0x45, 0x5d, 0x1d, 0xbb, 0xbf, 0xba  ,
    540              0x11, 0x1d, 0x1d, 0xb8, 0xae, 0xb ,
    541              0x51, 0x19, 0x15, 0x9f, 0xca, 0xb1  ,
    542              0x5, 0x59, 0x15, 0x9e, 0x8a, 0xa3 ,
    543              0x45, 0x1d, 0x10, 0xf9, 0xc9, 0xab ,
    544              0x45, 0x1d, 0x51, 0xf9, 0x97, 0x83 ,
    545              0x5, 0x59 , 0x51, 0xe9, 0xe, 0x8b ,
    546              0xc2, 0x80, 0x5, 0x87, 0x1a, 0x92 ,
    547              0xe2, 0xc2, 0x27, 0xe0, 0x6d, 0x7e ,
    548              0xc0, 0xe0, 0x1, 0x95 , 0x6b, 0x68 ,
    549              0x86, 0x82, 0x20, 0xa2, 0x4c, 0xbe ,
    550              0x55, 0x5d, 0xcd, 0x88, 0x29, 0x88 ,
    551              0x41, 0xf1, 0x7d, 0x8b, 0xfd, 0x22  ,
    552              0x61, 0xff, 0x79, 0xdb, 0xee, 0x73 ,
    553              0x69, 0x51, 0x9f, 0xde, 0xaa, 0xf0 ,
    554              0x2f, 0x7f, 0x94, 0xda, 0xba, 0x96 ,
    555              0x6d, 0xe5, 0x17, 0xfc, 0x2f, 0xb7 ,
    556              0x7f, 0xee, 0x40, 0xd7, 0x7f, 0x4b ,
    557              0x4b, 0x8c , 0x2c, 0xd0, 0x56, 0x47 ,
    558              0xa4, 0xa2, 0x1, 0x8c, 0x32, 0x26 ,
    559              0x51, 0xc6, 0x8a, 0xf8, 0xd6, 0x28 ,
    560              0x67, 0xfe, 0xe, 0xb8 , 0xb8, 0xf9 ,
    561              0x79, 0x53, 0x3, 0x99, 0xca, 0x6f ,
    562              0x6f, 0x28, 0xc7, 0x98, 0xfe, 0x69 ,
    563              0x6f, 0xf7, 0x89, 0xd8, 0xe9, 0x3d  ,
    564              0x6d, 0xbd, 0x8f, 0xbd, 0xb1, 0xe1 ,
    565              0xe5, 0x36, 0x4e, 0x94, 0x8f, 0xb0  ,
    566              0xd4, 0x86, 0x26, 0x3e, 0xa5, 0x7a ,
    567              0xb2, 0x80, 0x46, 0x5d, 0xee, 0x44 ,
    568              0x80, 0xa2, 0x3, 0x9e, 0x11, 0xba ,
    569              0x7d, 0x6c , 0xa7, 0xe1, 0xe6, 0xef ,
    570              0x7d, 0x3b, 0xe2, 0x99, 0x6d, 0xb0 ,
    571              0x2f, 0x19, 0x3f, 0xef, 0x81, 0xa0 ,
    572              0x69, 0x7b, 0x5c, 0x89 , 0xfd, 0x5a ,
    573              0x6b, 0x7f, 0x73, 0xcb, 0xfe, 0x3f ,
    574              0x79, 0x5b, 0x53, 0x9e, 0xea, 0x69 ,
    575              0x29, 0x59, 0x73, 0xdb, 0xea, 0xf1  ,
    576              0x3d, 0x39, 0x1f, 0x8a, 0xef, 0xfe ,
    577              0x1f, 0x59, 0x71, 0xf8, 0x86, 0xed ,
    578              0x4d, 0x18, 0xc, 0xe3, 0xea, 0xee ,
    579              0x94, 0x80, 0x6, 0x92, 0x72, 0xe6 ,
    580              0xe6, 0xc6, 0x45, 0x1c, 0x3a, 0x10 ,
    581              0x82, 0xe6 , 0x67, 0x11, 0xec, 0x74 ,
    582              0xe0, 0xa4, 0x25, 0x35, 0x99, 0x64 ,
    583              0xf4, 0xe2, 0x41, 0x53, 0xfe, 0x78 ,
    584              0xf0, 0xc6, 0x7, 0x31 , 0xce, 0x6a ,
    585              0x4e, 0x6, 0xd, 0x14, 0xbc, 0x6c ,
    586              0x6e, 0x22, 0x4b, 0x64, 0xa8, 0xa ,
    587              0x58, 0x40, 0x2f, 0x36, 0xdc, 0x2c  ,
    588              0x7e, 0x22, 0x6b, 0x51, 0xe9, 0x6c ,
    589              0x38, 0x44, 0xf, 0x33, 0xaf, 0x2c ,
    590              0x2c, 0x24, 0x2f, 0x44, 0xdc, 0xc2 ,
    591              0x6c, 0x2, 0x49, 0x4f, 0x66, 0x78 ,
    592              0x68, 0x60, 0x6f, 0x10, 0xed, 0x4a ,
    593              0x4e, 0x4 , 0x29, 0x65, 0xfd, 0x26 ,
    594              0x78, 0x62, 0x69, 0x51, 0x9a, 0x7c ,
    595              0xc, 0x42, 0x4f, 0x37, 0xfc, 0x2c ,
    596              0x7a, 0x6, 0x4d, 0x17 , 0x9b, 0x68 ,
    597              0x1e, 0x24, 0x2a, 0x6a, 0x52, 0x7c ,
    598              0x6c, 0x2, 0xd, 0x15, 0xee, 0xe ,
    599              0x6c, 0x26, 0x2c, 0x8, 0x35, 0x6e  ,
    600              0x8, 0x46, 0xd, 0x57, 0x9e, 0x6c ,
    601              0x6e, 0x60, 0xb, 0x51, 0xfa, 0x3c ,
    602              0x3e, 0x24, 0xb, 0x74, 0xeb, 0x3c ,
    603              0xc, 0x20, 0x6e, 0x1a, 0x26, 0xd6 ,
    604              0x58, 0x42, 0x48, 0x4f, 0x71, 0x7e ,
    605              0x4c, 0x20 , 0x6d, 0x55, 0xbe, 0x64 ,
    606              0x28, 0x64, 0x2b, 0x65, 0xfd, 0x1a ,
    607              0x3c, 0x44, 0x4c, 0x2c, 0x71, 0xe4 ,
    608              0x1c, 0x22, 0x4a, 0x48 , 0x23, 0x3c ,
    609              0x2e, 0x26, 0x2d, 0x13, 0xee, 0x1e ,
    610              0xa, 0x42, 0xb, 0x50, 0xec, 0xf6 ,
    611              0x6e, 0x0, 0x4f, 0x34, 0xa8, 0xe  ,
    612              0x78, 0x42, 0x6f, 0x34, 0x8c, 0x68 ,
    613              0x4e, 0x24, 0x29, 0x53, 0xcd, 0x7c ,
    614              0x7e, 0x6, 0xb, 0x47, 0x8a, 0x2c ,
    615              0x6c, 0x42, 0x6e, 0x28, 0x55, 0x5a ,
    616              0x78, 0x42, 0x6d, 0x7, 0x8f, 0x7a ,
    617              0x1c, 0x26 , 0xb, 0x56, 0xad, 0x4e ,
    618              0x5c, 0x0, 0x4f, 0x53, 0xc8, 0x24 ,
    619              0xc, 0x26, 0xc, 0x3a, 0x14, 0xd6 ,
    620              0x2a, 0x60, 0x69, 0x55 , 0xcf, 0x2e ,
    621              0x7c, 0x20, 0x69, 0x73, 0xf9, 0x6e ,
    622              0x68, 0x40, 0x4e, 0xc, 0x24, 0xe ,
    623              0x7c, 0x20, 0x6f, 0x31, 0xea, 0x60  ,
    624              0x3c, 0x6, 0x9, 0x55, 0xef, 0xf4 ,
    625              0x4c, 0x20, 0x6f, 0x24, 0xf9, 0xe ,
    626          };
    627          
    628          static   const uint8 Busy_buf[] =
    629          {
    630              0x7a, 0x62, 0x2d, 0x36, 0x89, 0x7c ,
    631              0x3e, 0x4, 0x2d, 0x20, 0xff, 0xa0 ,
    632              0x1a, 0x64, 0x2d, 0x13, 0x8d, 0x4e ,
    633              0x6e, 0x22, 0x48, 0x49, 0x62, 0x1e ,
    634              0x5a, 0x42, 0xb, 0x55, 0xfc, 0x6e ,
    635              0x7c, 0x42, 0x4e, 0x6a, 0x31, 0x28 ,
    636              0x68, 0x66, 0xa, 0xc, 0x63, 0x78 ,
    637              0x6e, 0x0, 0x6d, 0x31, 0xce, 0x5a ,
    638              0x3c, 0x24, 0xb, 0x46, 0xad, 0xe2 ,
    639              0x2e, 0x2, 0x2e, 0x4f, 0x6, 0x2c ,
    640              0x7a, 0x62, 0x4d, 0x36, 0xfc, 0x68 ,
    641              0x1c, 0x6, 0x2a, 0x49, 0x64, 0x6c ,
    642              0x6c, 0x6, 0xc, 0x28, 0x73, 0x3c ,
    643              0x3c, 0x20, 0x4e, 0xd, 0x25, 0x7c ,
    644              0x6c, 0x26, 0xb, 0x52, 0xbe, 0xe ,
    645              0x3c, 0x6, 0xf, 0x15, 0xb9, 0x6c ,
    646              0x7e, 0x42, 0x4b, 0x71, 0xec, 0x3c ,
    647              0x2a, 0x44, 0x2d, 0x15, 0xf8, 0x4a ,
    648              0x6c, 0x22, 0xf, 0x75, 0xae, 0xe ,
    649              0x2e, 0x26, 0xe, 0xa, 0x16, 0xa6 ,
    650              0x38, 0x46, 0x2e, 0xd, 0x20, 0x6e ,
    651              0x7e, 0x0, 0x69, 0x70, 0xcf, 0xc ,
    652              0x2c, 0x24, 0x2b, 0x75, 0x8f, 0x5a ,
    653              0x4c, 0x2, 0x8, 0x6d, 0x25, 0x6e ,
    654              0x6c, 0x26, 0x2d, 0x10, 0x98, 0x4a ,
    655              0x2c, 0x2, 0x6d, 0x37, 0xce, 0x6a ,
    656              0x7e, 0x4, 0x4d, 0x17, 0x9c, 0x68 ,
    657              0x6e, 0x22, 0x6c, 0x69, 0x50, 0x6 ,
    658              0x2a, 0x46, 0x29, 0x70, 0xde, 0xb6 ,
    659              0x6e, 0x20, 0x6c, 0xe, 0x66, 0x68 ,
    660              0x2e, 0x6, 0x2a, 0xf, 0x13, 0x1e ,
    661              0x1e, 0x22, 0x6c, 0x79, 0x26, 0xf4 ,
    662              0x4c, 0x6, 0x4d, 0x11, 0xd8, 0x46 ,
    663              0x68, 0x42, 0x6d, 0x32, 0xdc, 0x78 ,
    664              0x7c, 0x20, 0x2a, 0x79, 0x62, 0x7a ,
    665              0x2c, 0x4, 0x2e, 0x8, 0x76, 0x96 ,
    666              0x68, 0x60, 0x6d, 0x14, 0xf8, 0x6c ,
    667              0x2c, 0x24, 0xa, 0x4b, 0x52, 0x5a ,
    668              0x2c, 0x6, 0x2f, 0x3, 0xed, 0x6a ,
    669              0x78, 0x42, 0x4e, 0xb, 0x56, 0x78 ,
    670              0xc, 0x60, 0x6f, 0x3, 0xfc, 0x7c ,
    671              0x2e, 0x2, 0x4b, 0x76, 0xb8, 0xe ,
    672              0x68, 0x46, 0x2f, 0x21, 0xde, 0x5a ,
    673              0x6c, 0x2, 0x4f, 0x15, 0xbb, 0x6a ,
    674              0x3c, 0x4, 0xf, 0x31, 0xdd, 0x68 ,
    675              0x2e, 0x24, 0x28, 0x4f, 0x57, 0x2c ,
    676              0x7a, 0x60, 0x6a, 0x7b, 0x51, 0x2e ,
    677              0x4c, 0x20, 0x6e, 0x48, 0x26, 0x1e ,
    678              0x5c, 0x2, 0x68, 0xe, 0x31, 0x7c ,
    679              0x8, 0x64, 0x2c, 0x4e, 0x45, 0xc6 ,
    680              0x7e, 0x26, 0x8, 0x6d, 0x65, 0x16 ,
    681              0x78, 0x42, 0x4f, 0x15, 0x9b, 0x68 ,
    682              0x38, 0x64, 0x2f, 0x23, 0xcc, 0x6a ,
    683              0x7c, 0x40, 0x69, 0x53, 0x9f, 0x68 ,
    684              0x68, 0x64, 0x2c, 0x1e, 0x21, 0x5e ,
    685              0x6a, 0x42, 0x6a, 0x4f, 0x54, 0x78 ,
    686              0x6e, 0x2, 0xf, 0x57, 0xec, 0x1e ,
    687              0x2e, 0x26, 0xb, 0x12, 0x8d, 0x38 ,
    688              0x7c, 0x2, 0x4c, 0x29, 0x13, 0x6c ,
    689              0x58, 0x20, 0x6c, 0x2c, 0x42, 0x2e ,
    690              0x6e, 0x6, 0xc, 0x39, 0x57, 0x7c ,
    691              0x2a, 0x46, 0x29, 0x53, 0xe8, 0x5a ,
    692              0xb4, 0xe0, 0x44, 0x7d, 0x4e, 0xb4 ,
    693              0xd6, 0xa2, 0x64, 0x1b, 0x7, 0x6c ,
    694              0x90, 0xe4, 0x23, 0x74, 0x8d, 0x68 ,
    695              0xc6, 0x84, 0x24, 0x2c, 0x13, 0xe0 ,
    696              0x77, 0xec, 0x6d, 0xf2, 0xa8, 0xee ,
    697              0x77, 0x9a, 0xc5, 0x9e, 0x4a, 0x85 ,
    698              0x37, 0xf9, 0xd3, 0xdf, 0xce, 0x27 ,
    699              0x55, 0xdb, 0xf3, 0xdb, 0xbd, 0x67 ,
    700              0x47, 0x9f, 0x93, 0xf9, 0xda, 0x56 ,
    701              0x45, 0xbb, 0x55, 0xfd, 0xcd, 0x9 ,
    702              0x51, 0xf7, 0x9d, 0xae, 0xdd, 0x91 ,
    703              0x51, 0xf7, 0xa6, 0xed, 0xd8, 0xb2 ,
    704              0x15, 0x7f, 0xbc, 0xc9, 0x8c, 0xb3 ,
    705              0x55, 0x39, 0xf9, 0xd8, 0xd7, 0xb3 ,
    706              0x45, 0x3d, 0xbb, 0xbd, 0xd6, 0x3b ,
    707              0x55, 0x5d, 0x8c, 0xfe, 0x5c, 0x90 ,
    708              0xa2, 0xe0, 0x67, 0x80, 0x23, 0x20 ,
    709              0xb2, 0xa6, 0x20, 0xfa, 0x44, 0x2c ,
    710              0xf6, 0x80, 0x62, 0xc8, 0x31, 0xa8 ,
    711              0x45, 0x19, 0x5c, 0xb9, 0xc6, 0xa3 ,
    712              0x5, 0x19, 0x1c, 0xe9, 0x9e, 0x92 ,
    713              0x51, 0x5d, 0x10, 0xac, 0x9b, 0x83 ,
    714              0x51, 0x59, 0x15, 0xb8, 0xcc, 0x2b ,
    715              0x5, 0x59, 0x55, 0xcd, 0x88, 0xb0 ,
    716              0x41, 0x5d, 0x55, 0xdd, 0x88, 0x30 ,
    717              0x55, 0x5d, 0x1c, 0xb9, 0xf9, 0x39 ,
    718              0x41, 0x58, 0x84, 0xe5, 0xe8, 0xba ,
    719              0xa2, 0xa4, 0x40, 0x95, 0x4b, 0x56 ,
    720              0xa6, 0xc0, 0x22, 0xb8, 0x9a, 0xb2 ,
    721              0xc2, 0x80, 0x45, 0xd9, 0xe8, 0x20 ,
    722              0x29, 0x53, 0x47, 0xfc, 0x8b, 0x4e ,
    723              0x6b, 0x51, 0xfd, 0x9b, 0x8a, 0x7f ,
    724              0x1f, 0x1d, 0x1d, 0xdb, 0x88, 0x7d ,
    725              0x5b, 0xf1, 0x39, 0xff, 0xfc, 0x78 ,
    726              0x2d, 0xb1, 0xf1, 0xdb, 0xcf, 0xe1 ,
    727              0x6f, 0xb7, 0xc9, 0xdb, 0xbe, 0xc3 ,
    728              0x1f, 0xec, 0xf, 0xfd, 0x78, 0xf1 ,
    729              0x5f, 0x82, 0x6d, 0x89, 0x91, 0x1e ,
    730              0xd, 0xd5, 0x7d, 0x89, 0xaa, 0xb ,
    731              0x2d, 0xf7, 0x18, 0xd9, 0xca, 0x68 ,
    732              0x2f, 0xd1, 0xf3, 0xdc, 0x45, 0xe0 ,
    733              0xd4, 0xa4, 0x46, 0xa1, 0x65, 0x4e ,
    734              0x1d, 0xa6, 0x81, 0x6d, 0xb3, 0x7c ,
    735              0xa4, 0xc0, 0x40, 0xbf, 0x56, 0x66 ,
    736              0x15, 0x5c, 0xcd, 0xfb, 0x1d, 0xbb ,
    737              0x15, 0xd2, 0x2, 0xfc, 0x9d, 0x3b ,
    738              0x15, 0xf2, 0x93, 0xdd, 0xa8, 0x38 ,
    739              0x45, 0xbd, 0x73, 0xbb, 0xec, 0x2b ,
    740              0x79, 0x52, 0x25, 0x98, 0xdf, 0xc6 ,
    741              0x39, 0x7d, 0x6d, 0xfb, 0xba, 0xf6 ,
    742              0x69, 0x19, 0xb4, 0xfc, 0xab, 0xe8 ,
    743              0x6d, 0x19, 0x86, 0xce, 0xe6, 0xfa ,
    744              0x6f, 0x38, 0xa0, 0xc2, 0xed, 0xfa ,
    745              0xc0, 0xa4, 0x63, 0xf0, 0x24, 0x56 ,
    746              0xf2, 0xa6, 0x0, 0x84, 0x61, 0x70 ,
    747              0x96, 0xc2, 0x2, 0xc0, 0x29, 0xb4 ,
    748              0x6d, 0x72, 0x64, 0x90, 0xec, 0xef ,
    749              0x3d, 0x13, 0x80, 0xda, 0xa3, 0xde ,
    750              0x29, 0x71, 0xf9, 0xbf, 0x9d, 0x74 ,
    751              0x79, 0x19, 0x3d, 0xfe, 0xca, 0x69 ,
    752              0x69, 0x7b, 0xdd, 0xdb, 0xa9, 0x69 ,
    753              0x9, 0xd5, 0x3d, 0xb9, 0xab, 0x68 ,
    754              0x3d, 0xb1, 0xf5, 0xfe, 0x9c, 0xc2 ,
    755              0x5d, 0xb1, 0xbd, 0xbd, 0x89, 0x7a ,
    756              0x59, 0xd3, 0xf9, 0xfb, 0x9d, 0x1d ,
    757              0x6d, 0xd3, 0xdf, 0xa8, 0xdf, 0x7d ,
    758              0x6d, 0xf7, 0x6e, 0x98, 0x3, 0xa7 ,
    759              0xd2, 0x84, 0x0, 0x3c, 0x61, 0x66 ,
    760              0xd2, 0xe2, 0x44, 0x2d, 0x7, 0x5c ,
    761              0x15, 0xc6, 0xcd, 0x7f, 0x69, 0xa3 ,
    762              0x92, 0xa2, 0x47, 0xd2, 0xc2, 0x2 ,
    763              0x86, 0xe6, 0x42, 0x89, 0xc4, 0x66 ,
    764              0x55, 0x50, 0x8c, 0x89, 0xd8, 0xbb ,
    765              0x11, 0x55, 0xd9, 0xdd, 0x98, 0x92 ,
    766              0x15, 0x15, 0x99, 0x9d, 0xcd, 0x29 ,
    767              0x41, 0x5d, 0x85, 0xff, 0xf9, 0xb2 ,
    768              0x15, 0x7a, 0xec, 0x8d, 0xfd, 0xb1 ,
    769              0x45, 0xb2, 0xc7, 0xbc, 0xe7, 0x3b ,
    770              0x5, 0xbd, 0x27, 0x89, 0xb0, 0x93 ,
    771              0x35, 0xdd, 0xf, 0x9a, 0x4a, 0xfc ,
    772              0x65, 0xac, 0x6c, 0xb8, 0x24, 0x46 ,
    773              0x82, 0x80, 0x21, 0x98, 0x7b, 0x62 ,
    774              0x45, 0xb6, 0x8b, 0xd9, 0x92, 0xb8 ,
    775              0x41, 0xf9, 0x29, 0xb9, 0x8d, 0xf4 ,
    776              0x23, 0xfb, 0x8b, 0x9c, 0xe9, 0xf6 ,
    777              0x59, 0x73, 0x6b, 0x9c, 0xce, 0x7e ,
    778              0x3d, 0x17, 0x8d, 0x9b, 0xfa, 0x68 ,
    779              0x7f, 0x79, 0x69, 0xd8, 0xfc, 0x6a ,
    780              0x7d, 0x7d, 0xb1, 0x98, 0xe8, 0x58 ,
    781              0x3f, 0x7b, 0xfb, 0xfc, 0xaa, 0x6b ,
    782              0x3f, 0x79, 0xeb, 0xf9, 0xeb, 0x86 ,
    783              0x6d, 0x6c, 0xe, 0xfd, 0xac, 0x69 ,
    784              0x2d, 0xc, 0x2f, 0xd4, 0x5f, 0xca ,
    785              0x92, 0xa0, 0x1, 0xb2, 0xac, 0xf6 ,
    786              0xd2, 0xe6, 0x4, 0xbd, 0x6c, 0x6e ,
    787              0xe6, 0x80, 0x6, 0xf2, 0x7d, 0xfe ,
    788              0x67, 0xbe, 0x8a, 0x87, 0x9d, 0xea ,
    789              0x37, 0xff, 0x5d, 0x99, 0x4f, 0x1d ,
    790              0x11, 0xbf, 0x32, 0xdb, 0xcf, 0x39 ,
    791              0x15, 0x9b, 0x34, 0x9a, 0xcf, 0x9a ,
    792              0x45, 0xb1, 0xec, 0xbd, 0x8f, 0x92 ,
    793              0x5, 0xf1, 0xf4, 0xad, 0xce, 0xa2 ,
    794              0x15, 0xf7, 0xc, 0x9b, 0x7f, 0xb9 ,
    795              0x41, 0x8e, 0x3, 0xa6, 0x48, 0xb2 ,
    796              0xd4, 0xc2, 0x3, 0xa0, 0x53, 0xe2 ,
    797              0x90, 0x12, 0x82, 0xe0, 0x76, 0x6e ,
    798              0x45, 0x58, 0xc4, 0xc0, 0x2d, 0x89 ,
    799              0x1, 0xd7, 0x11, 0x9c, 0xf8, 0x30 ,
    800              0x1, 0xb3, 0x97, 0xfd, 0xed, 0x2b ,
    801              0x51, 0x9d, 0x17, 0xfa, 0xdd, 0xb ,
    802              0x27, 0xbf, 0xab, 0xdd, 0xfd, 0x7f ,
    803              0x79, 0x55, 0xa9, 0xd9, 0x89, 0x4a ,
    804              0x5f, 0x5d, 0x69, 0x99, 0xab, 0x5f ,
    805              0x5f, 0x5d, 0xb9, 0x88, 0xff, 0xb7 ,
    806              0x3f, 0xf4, 0x6c, 0xcd, 0x1e, 0xca ,
    807              0x2f, 0xc8, 0x26, 0xc3, 0x6c, 0xc0 ,
    808              0x3f, 0x84, 0xee, 0xbc, 0x21, 0x77 ,
    809              0x3f, 0x26, 0xe2, 0xea, 0x90, 0x10 ,
    810              0x79, 0x6a, 0x4e, 0xed, 0xf7, 0xab ,
    811              0x2d, 0x3b, 0xfe, 0xcf, 0xba, 0xfb ,
    812              0x3d, 0x91, 0x38, 0xdf, 0xfe, 0xf0 ,
    813              0x5f, 0x91, 0x38, 0xfd, 0xce, 0xd3 ,
    814              0x6f, 0xb3, 0xd0, 0x9e, 0xfb, 0xf2 ,
    815              0x5d, 0x97, 0xb4, 0x88, 0xec, 0xf1 ,
    816              0x2d, 0x93, 0xf5, 0xbd, 0xc1, 0xa6 ,
    817              0x2d, 0xb3, 0x5d, 0xef, 0xc4, 0x83 ,
    818              0x3d, 0xf7, 0x5d, 0xa8, 0xf, 0xe8 ,
    819              0x2f, 0xf6, 0xe2, 0xf3, 0xd5, 0xca ,
    820              0xe6, 0xe0, 0x24, 0x86, 0x74, 0xe0 ,
    821              0x92, 0x86, 0x44, 0xc, 0x23, 0x34 ,
    822              0x92, 0xc0, 0x3, 0x70, 0xa9, 0x5e ,
    823              0xd0, 0xe2, 0x45, 0x15, 0xde, 0x2e ,
    824              0xa6, 0xa4, 0x41, 0x73, 0xcc, 0x7e ,
    825              0x6e, 0x2, 0x6f, 0x17, 0x8e, 0x2c ,
    826              0x6c, 0x22, 0x4d, 0x17, 0xa9, 0x4a ,
    827              0x1c, 0x24, 0x68, 0x68, 0x43, 0x6e ,
    828              0x7e, 0x2, 0x4f, 0x35, 0xce, 0xc ,
    829              0x6c, 0x6, 0xd, 0x34, 0x9a, 0x6a ,
    830              0x7a, 0x60, 0x6a, 0xf, 0x77, 0x60 ,
    831              0x7c, 0x20, 0x6c, 0x4f, 0x14, 0x6c ,
    832              0x68, 0x40, 0x68, 0x4f, 0x31, 0x5a ,
    833              0x3e, 0x20, 0x4f, 0x32, 0xdc, 0x3c ,
    834              0xe, 0x2b, 0x71, 0xf8, 0x7e, 0x3c ,
    835              0xc4, 0x86, 0x24, 0x4e, 0x30, 0x1e ,
    836              0xa6, 0xe4, 0x0, 0x79, 0x47, 0xf6 ,
    837              0xb0, 0xe4, 0x0, 0x49, 0x23, 0x1e ,
    838              0x18, 0x64 , 0x2c, 0xd, 0x21, 0x4e ,
    839              0x7c, 0x2, 0x4d, 0x53, 0xae, 0x7a ,
    840              0x3e, 0x26, 0x4f, 0x35, 0xf8, 0xe ,
    841              0x38, 0x42, 0x6a, 0x4a , 0x43, 0x6a ,
    842              0x3c, 0x24, 0x29, 0x57, 0xa9, 0xf0 ,
    843              0xc, 0x2, 0xb, 0x51, 0xec, 0x3c ,
    844              0x7c, 0x6, 0xe, 0x2c, 0x52, 0x6c  ,
    845              0x6c, 0x20, 0x6d, 0x43, 0x8a, 0x42 ,
    846              0xe, 0x26, 0xa, 0x6c, 0x37, 0x92 ,
    847              0x7c, 0x0, 0x4a, 0x4b, 0x61, 0x4e ,
    848              0x5c, 0x22, 0x4e, 0x1d, 0x11, 0x6e ,
    849              0x5a, 0x42, 0x6c, 0x29, 0x46, 0x7c ,
    850              0x7e, 0x4 , 0x2b, 0x57, 0xfb, 0x26 ,
    851              0xe, 0x24, 0x2c, 0x2a, 0x15, 0x4e ,
    852              0x3c, 0x20, 0x6e, 0xe, 0x66, 0xe4 ,
    853              0x68, 0x42, 0x6c, 0x28 , 0x35, 0x68 ,
    854              0x7e, 0x20, 0x4a, 0x4c, 0x51, 0x3c ,
    855              0x2c, 0x26, 0xd, 0x17, 0xbc, 0x4a ,
    856              0x7a, 0x40, 0xf, 0x27, 0xf9, 0x2e  ,
    857              0x7c, 0x22, 0x4f, 0x15, 0xb9, 0x4c ,
    858              0x7e, 0x24, 0x6c, 0x9, 0x35, 0x62 ,
    859              0x96, 0xe0, 0x41, 0x3d, 0x2d, 0x76 ,
    860              0x92, 0xe6, 0x5, 0xd6, 0x20, 0x34 ,
    861              0xe6, 0x80, 0x22, 0xdb, 0x26, 0x2a ,
    862              0xc6, 0xe0 , 0x5, 0xbf, 0x60, 0x24 ,
    863              0xe6, 0xc6, 0x3, 0xe8, 0xd, 0x36 ,
    864              0x67, 0xcc, 0xa5, 0xcc, 0x60, 0xdf ,
    865              0x2f, 0x62, 0xac, 0xcf , 0xc6, 0x98 ,
    866              0x1d, 0x1a, 0xb5, 0x8e, 0xfa, 0x3e ,
    867              0x4d, 0x3d, 0x9b, 0xfa, 0xcb, 0xf ,
    868              0x6f, 0xb1, 0x55, 0x9e, 0xbb, 0x7b  ,
    869              0xb, 0xd7, 0xe, 0xed, 0xff, 0xea ,
    870              0x7f, 0xb3, 0x5c, 0xbd, 0xf0, 0xc2  ,
    871              0x7f, 0x93, 0x74, 0xe9, 0xa4, 0xd3 ,
    872              0x7b, 0x7f, 0xc8, 0x88, 0x6d, 0xf9 ,
    873              0x2d, 0xe4, 0x3, 0x80, 0xf8, 0x76 ,
    874              0x94, 0xe2 , 0x42, 0x82, 0xea, 0x74 ,
    875              0xd6, 0xe2, 0x6, 0xa3, 0xf0, 0x16 ,
    876              0xb4, 0xc6, 0x25, 0xf3, 0x7a, 0x16 ,
    877              0xb4, 0x84, 0x47, 0xf0 , 0x10, 0x32 ,
    878              0xa2, 0xa4, 0x60, 0xd4, 0x4a, 0x74 ,
    879              0x51, 0x18, 0x0, 0x8f, 0x97, 0xbb ,
    880              0x45, 0x5d, 0x1d, 0xbb, 0xbf, 0xba  ,
    881              0x11, 0x1d, 0x1d, 0xb8, 0xae, 0xb ,
    882              0x51, 0x19, 0x15, 0x9f, 0xca, 0xb1  ,
    883              0x5, 0x59, 0x15, 0x9e, 0x8a, 0xa3 ,
    884              0x45, 0x1d, 0x10, 0xf9, 0xc9, 0xab ,
    885              0x45, 0x1d, 0x51, 0xf9, 0x97, 0x83 ,
    886              0x5, 0x59 , 0x51, 0xe9, 0xe, 0x8b ,
    887              0xc2, 0x80, 0x5, 0x87, 0x1a, 0x92 ,
    888              0xe2, 0xc2, 0x27, 0xe0, 0x6d, 0x7e ,
    889              0xc0, 0xe0, 0x1, 0x95 , 0x6b, 0x68 ,
    890              0x86, 0x82, 0x20, 0xa2, 0x4c, 0xbe ,
    891              0x55, 0x5d, 0xcd, 0x88, 0x29, 0x88 ,
    892              0x41, 0xf1, 0x7d, 0x8b, 0xfd, 0x22  ,
    893              0x61, 0xff, 0x79, 0xdb, 0xee, 0x73 ,
    894              0x69, 0x51, 0x9f, 0xde, 0xaa, 0xf0 ,
    895              0x2f, 0x7f, 0x94, 0xda, 0xba, 0x96 ,
    896              0x6d, 0xe5, 0x17, 0xfc, 0x2f, 0xb7 ,
    897              0x7f, 0xee, 0x40, 0xd7, 0x7f, 0x4b ,
    898              0x4b, 0x8c , 0x2c, 0xd0, 0x56, 0x47 ,
    899              0xa4, 0xa2, 0x1, 0x8c, 0x32, 0x26 ,
    900              0x51, 0xc6, 0x8a, 0xf8, 0xd6, 0x28 ,
    901              0x67, 0xfe, 0xe, 0xb8 , 0xb8, 0xf9 ,
    902              0x79, 0x53, 0x3, 0x99, 0xca, 0x6f ,
    903              0x6f, 0x28, 0xc7, 0x98, 0xfe, 0x69 ,
    904              0x6f, 0xf7, 0x89, 0xd8, 0xe9, 0x3d  ,
    905              0x6d, 0xbd, 0x8f, 0xbd, 0xb1, 0xe1 ,
    906              0xe5, 0x36, 0x4e, 0x94, 0x8f, 0xb0  ,
    907              0xd4, 0x86, 0x26, 0x3e, 0xa5, 0x7a ,
    908              0xb2, 0x80, 0x46, 0x5d, 0xee, 0x44 ,
    909              0x80, 0xa2, 0x3, 0x9e, 0x11, 0xba ,
    910              0x7d, 0x6c , 0xa7, 0xe1, 0xe6, 0xef ,
    911              0x7d, 0x3b, 0xe2, 0x99, 0x6d, 0xb0 ,
    912              0x2f, 0x19, 0x3f, 0xef, 0x81, 0xa0 ,
    913              0x69, 0x7b, 0x5c, 0x89 , 0xfd, 0x5a ,
    914              0x6b, 0x7f, 0x73, 0xcb, 0xfe, 0x3f ,
    915              0x79, 0x5b, 0x53, 0x9e, 0xea, 0x69 ,
    916              0x29, 0x59, 0x73, 0xdb, 0xea, 0xf1  ,
    917          };
    918          
    919          static  const uint8  Nobody_buf[] =
    920          {
    921              0xa2, 0xe4, 0x26, 0x90, 0x3c, 0x30 ,
    922              0xf2, 0xa6, 0x21, 0x83, 0xeb, 0x34 ,
    923              0xa6, 0xc0, 0x67, 0xa9, 0x57, 0x8a ,
    924              0x55, 0x1d, 0x9, 0xda, 0x7d, 0xab ,
    925              0x1, 0x59, 0x5c, 0xcf, 0xae, 0x82 ,
    926              0x51, 0x5d, 0x18, 0xad, 0xdb, 0xb0 ,
    927              0x51, 0x59, 0x51, 0xec, 0xdd, 0x3b ,
    928              0x45, 0x19, 0x55, 0x9d, 0x89, 0x28 ,
    929              0x55, 0x1d, 0x55, 0xfc, 0x9b, 0x33 ,
    930              0x15, 0x5d, 0x1d, 0xa8, 0xb8, 0xb0 ,
    931              0x41, 0x59, 0x95, 0xec, 0x56, 0x8a ,
    932              0xf2, 0xa4, 0x24, 0x96, 0x52, 0x60 ,
    933              0xf6, 0xc2, 0x41, 0x98, 0xf6, 0x2e ,
    934              0xd2, 0x80, 0x45, 0x9b, 0xf8, 0x40 ,
    935              0x21, 0xd9, 0xc7, 0xfd, 0xce, 0x4e ,
    936              0x6b, 0x51, 0xd7, 0x9a, 0x98, 0x7d ,
    937              0x79, 0x59, 0x5d, 0xda, 0x88, 0x7d ,
    938              0x59, 0xf1, 0x31, 0xfd, 0xff, 0x69 ,
    939              0x1d, 0xb5, 0xb1, 0xdb, 0xdf, 0x68 ,
    940              0x6f, 0xf7, 0xa9, 0x9b, 0xef, 0xc1 ,
    941              0x7f, 0xce, 0x2c, 0xfd, 0xb3, 0xe2 ,
    942              0xd0, 0xe2, 0x44, 0xa8, 0xd5, 0x1e ,
    943              0xd, 0xd5, 0x3b, 0xc9, 0x99, 0x2f ,
    944              0x6d, 0xd7, 0x3e, 0x99, 0x9a, 0x20 ,
    945              0x6f, 0xd5, 0x3b, 0x9d, 0x5c, 0x59 ,
    946              0x94, 0xa4, 0x7, 0xe1, 0x34, 0xd6 ,
    947              0xd, 0xa6, 0xd, 0x3d, 0xf2, 0x2d ,
    948              0xa6, 0x80, 0x42, 0xb5, 0xee, 0x62 ,
    949              0xf6, 0xc6, 0x66, 0xde, 0x49, 0xa2 ,
    950              0x55, 0xd0, 0x6, 0xad, 0x9f, 0x2a ,
    951              0x15, 0xf0, 0x7b, 0x9a, 0x8f, 0x2b ,
    952              0x45, 0xff, 0x31, 0xba, 0xed, 0x2a ,
    953              0x63, 0xf8, 0x89, 0xd9, 0xe9, 0xf0 ,
    954              0x29, 0x7d, 0x65, 0xbb, 0x9e, 0xf5 ,
    955              0x29, 0x19, 0x7f, 0xcf, 0x89, 0xe9 ,
    956              0x6d, 0x19, 0x85, 0xe8, 0xc2, 0xea ,
    957              0x4d, 0x38, 0xa5, 0xc3, 0xec, 0xee ,
    958              0xd0, 0xa4, 0x63, 0xd6, 0x14, 0x76 ,
    959              0xe2, 0x86, 0x2, 0xf0, 0x44, 0x40 ,
    960              0xf4, 0xa0, 0x3, 0xd4, 0x71, 0x6a ,
    961              0x55, 0xae, 0x8f, 0xa4, 0xf3, 0xcf ,
    962              0xd, 0x53, 0xa, 0x8b, 0xb5, 0xfd ,
    963              0x4b, 0x13, 0xd1, 0xfc, 0xf8, 0x47 ,
    964              0x6b, 0x5b, 0x1f, 0xfd, 0xab, 0x62 ,
    965              0x3b, 0x39, 0xfd, 0xda, 0xa9, 0x86 ,
    966              0x69, 0xd1, 0x75, 0xfe, 0x9c, 0x2d ,
    967              0x2d, 0xb5, 0x3d, 0xbb, 0x9b, 0x4b ,
    968              0x7d, 0x91, 0xfd, 0xbd, 0x89, 0x78 ,
    969              0x3b, 0xd3, 0xbf, 0xf9, 0xae, 0xf1 ,
    970              0x6d, 0xb3, 0x9d, 0xb9, 0xce, 0x59 ,
    971              0x29, 0xf1, 0xdb, 0xda, 0xfc, 0xf1 ,
    972              0x7d, 0x97, 0xb9, 0xe9, 0xff, 0x69 ,
    973              0x6d, 0xf5, 0xe7, 0xd9, 0x1c, 0x6b ,
    974              0xf6, 0xa4, 0x5, 0x3d, 0x70, 0x30 ,
    975              0xc0, 0xe4, 0x1, 0x47, 0xb9, 0x74 ,
    976              0xb4, 0x84, 0x40, 0x59, 0xc3, 0x28 ,
    977              0xd2, 0xa0, 0x23, 0xf2, 0x61, 0x7e ,
    978              0xa2, 0xe2, 0x43, 0x90, 0xbf, 0x26 ,
    979              0xc6, 0xa6, 0x25, 0x9b, 0x32, 0xa8 ,
    980              0x5, 0x59, 0x19, 0xb9, 0xfd, 0x3b ,
    981              0x41, 0x5d, 0x91, 0xdd, 0xda, 0x3a ,
    982              0x15, 0x5b, 0x9f, 0xd9, 0xa8, 0x91 ,
    983              0x55, 0xf6, 0x44, 0xac, 0x8b, 0xa1 ,
    984              0x5, 0xf0, 0xcf, 0xbd, 0xe3, 0x28 ,
    985              0x45, 0xee, 0x27, 0xbe, 0x3f, 0x31 ,
    986              0x80, 0x82, 0x45, 0xee, 0x2b, 0x14 ,
    987              0x35, 0x88, 0xca, 0xea, 0xf3, 0x66 ,
    988              0x15, 0xa6, 0xc8, 0xd8, 0x5a, 0x23 ,
    989              0x55, 0xcc, 0x3, 0x94, 0xd9, 0x13 ,
    990              0xa4, 0xe2, 0x40, 0xf3, 0xf3, 0x10 ,
    991              0xa6, 0xc4, 0x21, 0x87, 0xf9, 0x62 ,
    992              0x7b, 0x34, 0x2c, 0xcd, 0xd8, 0xad ,
    993              0x9, 0x75, 0x3f, 0x8c, 0x9e, 0xbf ,
    994              0xb, 0x71, 0x3f, 0xea, 0xa9, 0xaf ,
    995              0x6d, 0x10, 0x2b, 0x9e, 0xe3, 0xc8 ,
    996              0x2d, 0x76, 0xa2, 0x9b, 0x6f, 0xca ,
    997              0x7d, 0x4, 0xae, 0xf2, 0xb8, 0xda ,
    998              0x6f, 0x4e, 0x86, 0xa4, 0xd1, 0xb3 ,
    999              0x3d, 0x5e, 0x8a, 0xe0, 0x85, 0xfa ,
   1000              0x2d, 0x78, 0x6a, 0xc2, 0x89, 0xe0 ,
   1001              0x7b, 0x56, 0x8a, 0xdb, 0x3e, 0x68 ,
   1002              0x7d, 0x42, 0x1, 0x8e, 0x6e, 0xd1 ,
   1003              0x61, 0x9c, 0x84, 0xee, 0xb7, 0x5f ,
   1004              0x15, 0xec, 0xef, 0xd8, 0x4c, 0x25 ,
   1005              0x3f, 0x46, 0xc2, 0x98, 0x63, 0x27 ,
   1006              0x84, 0xe2, 0x63, 0xaa, 0x43, 0x24 ,
   1007              0xb2, 0x80, 0x24, 0xfd, 0xd0, 0xda ,
   1008              0x6d, 0x90, 0x64, 0xaf, 0xca, 0xaa ,
   1009              0xf, 0xb7, 0x81, 0xe8, 0xab, 0xb7 ,
   1010              0xd, 0xd9, 0x73, 0xcb, 0xf9, 0x3c ,
   1011              0x3f, 0xbd, 0x14, 0x8b, 0xdd, 0xe0 ,
   1012              0x3f, 0xb3, 0xcd, 0xec, 0x5c, 0xe8 ,
   1013              0x2f, 0x7c, 0xa0, 0xaf, 0x65, 0xad ,
   1014              0x3d, 0x72, 0xe8, 0xa8, 0x57, 0xff ,
   1015              0x6d, 0x4, 0x25, 0xcc, 0x67, 0xc7 ,
   1016              0x65, 0xac, 0xeb, 0xe6, 0x99, 0x72 ,
   1017              0xd0, 0x82, 0x23, 0xe7, 0xd2, 0x42 ,
   1018              0xa4, 0xc2, 0x41, 0x94, 0x88, 0x72 ,
   1019              0x25, 0xe8, 0x2d, 0xb7, 0xfb, 0xf7 ,
   1020              0x3f, 0x77, 0x22, 0xfd, 0x9, 0xc8 ,
   1021              0x7d, 0x51, 0x3e, 0xbb, 0xed, 0x22 ,
   1022              0xb, 0x17, 0x5d, 0x9d, 0xab, 0xa1 ,
   1023              0x4b, 0x17, 0x1f, 0xfb, 0x88, 0x2b ,
   1024              0x59, 0x57, 0x4f, 0x89, 0xda, 0xd5 ,
   1025              0x3d, 0x74, 0x2a, 0xdb, 0x47, 0x6e ,
   1026              0xa2, 0xe0, 0x0, 0xef, 0x62, 0x76 ,
   1027              0xf6, 0xc2, 0x21, 0xd7, 0xa4, 0x24 ,
   1028              0x94, 0xe0, 0x5, 0x93, 0x5c, 0x2e ,
   1029              0xe6, 0xe2, 0x46, 0xb0, 0x25, 0x58 ,
   1030              0x2f, 0x66, 0xce, 0xe5, 0xd0, 0xbc ,
   1031              0x2d, 0x75, 0xb8, 0xda, 0x29, 0xe1 ,
   1032              0x6f, 0x39, 0x73, 0xdd, 0x85, 0x48 ,
   1033              0x29, 0x7f, 0x36, 0xe8, 0xdc, 0xa4 ,
   1034              0x6d, 0x3b, 0x45, 0xdb, 0xa0, 0xe0 ,
   1035              0x6f, 0x3f, 0x70, 0xbc, 0xf3, 0xb6 ,
   1036              0x3f, 0x39, 0x67, 0x88, 0x5f, 0xfa ,
   1037              0x49, 0x77, 0xea, 0xac, 0x61, 0xff ,
   1038              0x2d, 0x31, 0xae, 0xd5, 0xde, 0xe7 ,
   1039              0x1d, 0x74, 0x6b, 0xd7, 0x69, 0x3f ,
   1040              0xa2, 0xc4, 0x67, 0x1f, 0xb, 0x12 ,
   1041              0xb2, 0x80, 0x27, 0x34, 0xbc, 0x4c ,
   1042              0xd6, 0xa0, 0x63, 0x53, 0xbb, 0x3c ,
   1043              0xc2, 0xe0, 0x24, 0x29, 0x55, 0x7e ,
   1044              0x84, 0xa4, 0x23, 0x57, 0x8d, 0x5a ,
   1045              0x2e, 0x20, 0x6c, 0x9, 0x67, 0xa4 ,
   1046              0x3e, 0x6, 0x6c, 0x2b, 0x55, 0x68 ,
   1047              0x1a, 0x60, 0x49, 0x57, 0xce, 0x7c ,
   1048              0x5c, 0x42, 0x4d, 0x11, 0xa9, 0x6c ,
   1049              0x48, 0x62, 0x4c, 0x4f, 0x76, 0x1e ,
   1050              0x5c, 0x24, 0xf, 0x35, 0xb9, 0x24 ,
   1051              0x2c, 0x6, 0xb, 0x50, 0xee, 0x5e ,
   1052              0x7a, 0x60, 0x2e, 0x3e, 0x3, 0xb4 ,
   1053              0x2e, 0x42, 0x4b, 0x50, 0x9d, 0x7e ,
   1054              0x7e, 0x20, 0x2f, 0x35, 0xea, 0x8 ,
   1055              0x7a, 0x46, 0xd, 0x30, 0xec, 0x7a ,
   1056              0x6e, 0x2, 0x4b, 0x51, 0xe8, 0x1e ,
   1057              0x6a, 0x62, 0x4d, 0x35, 0xf9, 0x4a ,
   1058              0x7e, 0x6, 0x4c, 0xb, 0x37, 0x62 ,
   1059              0x7e, 0x20, 0x2b, 0x0, 0xf9, 0x1c ,
   1060              0x78, 0x64, 0x2d, 0x23, 0xcc, 0x7a ,
   1061              0xc, 0x24, 0x2d, 0x16, 0x8f, 0x3c ,
   1062              0x6c, 0x42, 0x48, 0x4b, 0x52, 0xf0 ,
   1063              0x68, 0x64, 0x29, 0x53, 0xad, 0x62 ,
   1064              0x2c, 0x6, 0xd, 0x56, 0x9e, 0xe6 ,
   1065              0x2e, 0x22, 0x69, 0x74, 0xfb, 0x18 ,
   1066              0xb6, 0x84, 0x22, 0x6c, 0xd9, 0x64 ,
   1067              0xd0, 0xc2, 0x43, 0xe6, 0x90, 0x32 ,
   1068              0x94, 0x82, 0x23, 0xf6, 0x8d, 0x3e ,
   1069              0xb6, 0xe6, 0x47, 0x8b, 0x30, 0x4 ,
   1070              0xe6, 0xc0, 0x3, 0x90, 0xfa, 0x26 ,
   1071              0x77, 0x8a, 0xcc, 0xcf, 0x4d, 0xff ,
   1072              0xd, 0x6a, 0x25, 0xef, 0xd7, 0x86 ,
   1073              0x59, 0x3e, 0x91, 0xce, 0xbb, 0x3d ,
   1074              0x2f, 0xf7, 0x17, 0xbc, 0xc8, 0x6a ,
   1075              0x4d, 0x93, 0x3f, 0xac, 0xeb, 0xe0 ,
   1076              0xb, 0xd5, 0x6e, 0xec, 0x9e, 0xe8 ,
   1077              0x3f, 0xb3, 0x4c, 0xbc, 0xf0, 0xca ,
   1078              0x7d, 0x97, 0x25, 0xdb, 0x3e, 0xf5 ,
   1079              0x3f, 0x7f, 0xea, 0xc8, 0x6d, 0xaf ,
   1080              0x2f, 0x7c, 0xa8, 0x8c, 0x34, 0x27 ,
   1081              0x90, 0x82, 0x45, 0xdc, 0x40, 0x56 ,
   1082              0x1f, 0xcc, 0x23, 0xf3, 0xfb, 0x37 ,
   1083              0xd4, 0xe4, 0x0, 0xf2, 0x79, 0x12 ,
   1084              0xa0, 0xe0, 0x41, 0xf2, 0x2b, 0x7e ,
   1085              0xa6, 0xe6, 0x22, 0x91, 0xc9, 0x26 ,
   1086              0x41, 0x50, 0x89, 0x9d, 0x1d, 0x8b ,
   1087              0x41, 0x59, 0x1d, 0x9b, 0x9d, 0xaa ,
   1088              0x11, 0x1d, 0x15, 0xba, 0xac, 0x9 ,
   1089              0x1, 0x59, 0x15, 0xbd, 0x8b, 0xb3 ,
   1090              0x5, 0x59, 0x15, 0xbc, 0x8b, 0x9b ,
   1091              0x15, 0x5d, 0x10, 0xf9, 0xdc, 0xab ,
   1092              0x5, 0x1d, 0x11, 0xda, 0xa5, 0xa9 ,
   1093              0x55, 0x59, 0x9, 0xf8, 0x16, 0xa8 ,
   1094              0xe2, 0x80, 0x4, 0xd3, 0x79, 0xf2 ,
   1095              0xa2, 0x80, 0x67, 0xd4, 0x77, 0xf0 ,
   1096              0x92, 0xe0, 0x20, 0xd2, 0x54, 0xe6 ,
   1097              0x96, 0xe0, 0x63, 0xb2, 0x67, 0xa8 ,
   1098              0x45, 0x5d, 0xd8, 0xc9, 0x93, 0x90 ,
   1099              0x1, 0xd7, 0x1b, 0xf9, 0xd8, 0x33 ,
   1100              0x27, 0xbf, 0xb1, 0xdb, 0xee, 0x3e ,
   1101              0x69, 0x51, 0x9f, 0xda, 0xaa, 0xf1 ,
   1102              0x3f, 0x6f, 0xdc, 0xde, 0xba, 0xb5 ,
   1103              0x7f, 0xf5, 0x26, 0xfc, 0x7b, 0xa5 ,
   1104              0x7d, 0xcc, 0x21, 0xe6, 0x4d, 0x6c ,
   1105              0x6b, 0x8a, 0x6f, 0x80, 0x6e, 0x76 ,
   1106              0xa0, 0xc2, 0x2, 0xbc, 0x1, 0x70 ,
   1107              0x5, 0xc6, 0x8b, 0xb8, 0xd3, 0xab ,
   1108              0x75, 0xfe, 0x87, 0xe8, 0x8a, 0xfc ,
   1109              0x79, 0x71, 0x2b, 0xb8, 0xd8, 0x6e ,
   1110              0x7d, 0x93, 0x63, 0xd9, 0xd8, 0x4a ,
   1111              0x6d, 0xfd, 0x3, 0xef, 0xcb, 0x3d ,
   1112              0x7b, 0xff, 0xcd, 0x99, 0xf7, 0x85 ,
   1113              0xb5, 0x66, 0x4e, 0xd0, 0x92, 0xa4 ,
   1114              0x84, 0x86, 0x24, 0x1f, 0xd, 0xd2 ,
   1115              0x82, 0x80, 0x62, 0xe5, 0x76, 0x66 ,
   1116              0xa2, 0xc2, 0x63, 0xf9, 0x60, 0xb2 ,
   1117              0x4d, 0x6e, 0xa2, 0x91, 0xed, 0xff ,
   1118              0x6f, 0x3b, 0xc5, 0xe9, 0x2e, 0x92 ,
   1119              0xd, 0x19, 0x3f, 0xad, 0xa5, 0xb4 ,
   1120              0x7b, 0x7b, 0x5c, 0x88, 0xed, 0x3c ,
   1121              0x79, 0x7f, 0x73, 0x8b, 0xff, 0x79 ,
   1122              0x7b, 0x5b, 0x5b, 0x9c, 0xff, 0x3c ,
   1123              0x9, 0x59, 0x73, 0xdb, 0xea, 0xf5 ,
   1124              0x1f, 0x39, 0x17, 0xa8, 0xcb, 0xef ,
   1125              0xf, 0x59, 0x11, 0xa8, 0xe5, 0xff ,
   1126              0xc6, 0x80, 0x4, 0xa0, 0xfb, 0xea ,
   1127              0xb4, 0x86, 0x24, 0xa5, 0x5, 0xf2 ,
   1128              0xa4, 0x86, 0x45, 0x1f, 0x8, 0x50 ,
   1129              0x82, 0xa6, 0x60, 0x49, 0x74, 0x74 ,
   1130              0xb6, 0xa6, 0x43, 0x77, 0x99, 0x78 ,
   1131              0xf0, 0x82, 0x46, 0x1c, 0x66, 0x28 ,
   1132              0xd6, 0x86, 0x7, 0x12, 0xea, 0x6e ,
   1133              0x7c, 0x24, 0x28, 0x6c, 0x25, 0x4c ,
   1134              0x2a, 0x60, 0x2d, 0x0, 0xee, 0xb6 ,
   1135              0x78, 0x42, 0x49, 0x71, 0x9b, 0x5c ,
   1136              0x5c, 0x6, 0xd, 0x35, 0xcc, 0x66 ,
   1137              0x58, 0x60, 0x6f, 0x37, 0xf9, 0xe ,
   1138              0x5e, 0x0, 0x68, 0x49, 0x14, 0x6e ,
   1139              0x2c, 0x24, 0x2d, 0x13, 0xec, 0x5a ,
   1140              0x7c, 0x22, 0x6f, 0x31, 0xe9, 0x3c ,
   1141              0xe, 0x4, 0xd, 0x4, 0x8c, 0x4e ,
   1142              0x38, 0x62, 0xb, 0x76, 0xcb, 0xf2 ,
   1143              0x3e, 0x24, 0x2e, 0xa, 0x14, 0x94 ,
   1144              0x6c, 0x6, 0xb, 0x57, 0xfb, 0x70 ,
   1145              0xc, 0x4, 0x2c, 0xf, 0x64, 0xa6 ,
   1146              0x2a, 0x64, 0x2f, 0x32, 0x9d, 0x4a ,
   1147              0x3e, 0x42, 0x6e, 0x1d, 0x33, 0x2c ,
   1148              0x68, 0x60, 0xa, 0x6d, 0x53, 0x5a ,
   1149              0x3c, 0x6, 0xf, 0x30, 0x9e, 0x7c ,
   1150              0x6c, 0x26, 0xd, 0x20, 0xce, 0xe0 ,
   1151              0x4c, 0x2, 0x4d, 0x34, 0xec, 0x2e ,
   1152              0x18, 0x66, 0xa, 0x49, 0x31, 0x7c ,
   1153              0x6c, 0x2, 0x4d, 0x15, 0xfc, 0x2c ,
   1154              0x2c, 0x26, 0xc, 0x29, 0x35, 0x4e ,
   1155              0x1a, 0x46, 0xd, 0x5, 0xe9, 0x2e ,
   1156              0x2e, 0x6, 0x2f, 0x17, 0xab, 0x4a ,
   1157              0x6c, 0x20, 0x6a, 0x7d, 0x64, 0x78 ,
   1158              0x78, 0x40, 0x68, 0x4b, 0x31, 0x3e ,
   1159              0x7e, 0x24, 0xf, 0x34, 0x9f, 0x5a ,
   1160              0x38, 0x66, 0xb, 0x50, 0xfe, 0x7a ,
   1161              0x7c, 0x40, 0xc, 0x1f, 0x76, 0x48 ,
   1162              0x6e, 0x20, 0x69, 0x16, 0x89, 0x1e ,
   1163              0x7c, 0x20, 0x6f, 0x35, 0xcb, 0x64 ,
   1164              0x28, 0x44, 0x6f, 0x61, 0x8c, 0xd2 ,
   1165              0x7c, 0x20, 0x6c, 0xf, 0x66, 0x2c ,
   1166              0x18, 0x66, 0xd, 0x31, 0x8a, 0x6e ,
   1167              0x4c, 0x6, 0xb, 0x75, 0xcf, 0x74 ,
   1168              0x2a, 0x46, 0xd, 0x12, 0x9f, 0xe0 ,
   1169              0xc, 0x46, 0xc, 0x4f, 0x66, 0x96 ,
   1170              0x38, 0x64, 0x6b, 0x75, 0x8d, 0x68 ,
   1171              0x1c, 0x6, 0x2e, 0xb, 0x50, 0x6c ,
   1172              0x2a, 0x64, 0x2b, 0x77, 0x89, 0x5a ,
   1173              0x3c, 0x40, 0x68, 0x4b, 0x72, 0x78 ,
   1174              0x2a, 0x64, 0x2f, 0x30, 0xdd, 0xa2 ,
   1175              0x2a, 0x64, 0x29, 0x56, 0x99, 0x7c ,
   1176              0x2e, 0x2, 0x4f, 0x31, 0xcf, 0x82 ,
   1177              0x3c, 0x20, 0x6e, 0xf, 0x76, 0x6a ,
   1178              0x48, 0x64, 0x2b, 0x52, 0xec, 0x6c ,
   1179              0x2e, 0x0, 0x4c, 0x2b, 0x64, 0x1e ,
   1180              0x7c, 0x24, 0x29, 0x54, 0x9a, 0x6c ,
   1181              0x2c, 0x22, 0x6c, 0x6b, 0x64, 0xc2 ,
   1182              0x6a, 0x46, 0xc, 0x8, 0x21, 0x6a ,
   1183              0x4c, 0x22, 0xb, 0x57, 0xee, 0x1e ,
   1184              0x5e, 0x2, 0x4e, 0x4e, 0x66, 0x6c ,
   1185              0x68, 0x42, 0x48, 0x4a, 0x23, 0x4a ,
   1186              0x2e, 0x2, 0x6c, 0xe, 0x74, 0x68 ,
   1187              0x7a, 0x60, 0x6b, 0x70, 0xf9, 0x3a ,
   1188              0xc, 0x6, 0xf, 0x17, 0x9c, 0x4e ,
   1189              0xc, 0x0, 0x4e, 0xf, 0x21, 0xa4 ,
   1190              0x28, 0x64, 0x2f, 0x13, 0xcc, 0x7e ,
   1191              0x6c, 0x22, 0x4b, 0x52, 0xea, 0x5a ,
   1192              0x2c, 0x24, 0xe, 0xb, 0x67, 0x78 ,
   1193              0x58, 0x42, 0x4e, 0xf, 0x72, 0x7e ,
   1194              0x4c, 0x0, 0x6f, 0x11, 0xff, 0x2c ,
   1195              0x7c, 0x26, 0x9, 0x77, 0xcd, 0x5a ,
   1196              0x2c, 0x20, 0x2d, 0x14, 0xac, 0x4a ,
   1197              0x68, 0x64, 0x2a, 0x69, 0x42, 0x6a ,
   1198              0x4e, 0x2, 0x4e, 0xa, 0x64, 0x7e ,
   1199              0x2c, 0x0, 0xf, 0x13, 0xcc, 0x1e ,
   1200              0x5c, 0x24, 0x2d, 0x32, 0x99, 0x6c ,
   1201              0x48, 0x66, 0x28, 0x5f, 0x61, 0x2c ,
   1202              0x4c, 0x2, 0x48, 0x4d, 0x54, 0x5e ,
   1203              0x8, 0x60, 0x4d, 0x30, 0xad, 0x4e ,
   1204              0x6c, 0x2, 0x6c, 0x2b, 0x44, 0x4a ,
   1205              0x4c, 0x6, 0xa, 0x69, 0x70, 0x3e ,
   1206              0x2c, 0x2, 0x4d, 0x57, 0x8e, 0xe4 ,
   1207              0x78, 0x66, 0x28, 0x4e, 0x31, 0x7a ,
   1208              0x7c, 0x22, 0x4d, 0x3, 0x9f, 0x66 ,
   1209              0x38, 0x44, 0xf, 0x32, 0xde, 0x86 ,
   1210              0x28, 0x64, 0x29, 0x57, 0xdc, 0x7a ,
   1211              0x6c, 0x2, 0x4d, 0x31, 0x9f, 0x42 ,
   1212              0x6e, 0x2, 0x4a, 0x4f, 0x33, 0x3c ,
   1213              0x68, 0x62, 0x4f, 0x34, 0x8b, 0x4a ,
   1214              0xa, 0x42, 0x4d, 0x54, 0xfe, 0xf6 ,
   1215              0x6e, 0x22, 0x4d, 0x30, 0xcf, 0xa ,
   1216              0x6a, 0x66, 0xb, 0x56, 0xce, 0x7c ,
   1217              0x7e, 0x2, 0x2e, 0x1a, 0x34, 0x38 ,
   1218              0x48, 0x40, 0x69, 0x76, 0xc9, 0x4e ,
   1219              0x3e, 0x20, 0x6c, 0x4b, 0x6, 0xb4 ,
   1220              0x38, 0x64, 0x8, 0x6c, 0x43, 0x6e ,
   1221              0xc, 0x2, 0x2b, 0x40, 0xfc, 0xb4 ,
   1222              0x2c, 0x4, 0x29, 0x71, 0xcd, 0x5a ,
   1223              0x6e, 0x22, 0x6f, 0x17, 0x9a, 0x6a ,
   1224              0x5e, 0x4, 0xf, 0x33, 0xdd, 0x44 ,
   1225              0x7e, 0x22, 0x69, 0x55, 0xad, 0x2a ,
   1226              0x6a, 0x6, 0x9, 0x71, 0xed, 0x1e ,
   1227              0x4e, 0x20, 0x2c, 0xa, 0x17, 0x4e ,
   1228              0x4e, 0x22, 0x4d, 0x14, 0xa8, 0x7e ,
   1229              0x2c, 0x6, 0xe, 0x48, 0x70, 0xc2 ,
   1230              0x28, 0x64, 0x2a, 0x6d, 0x67, 0x78 ,
   1231              0x6e, 0x0, 0x6d, 0x35, 0x99, 0x2e ,
   1232              0x28, 0x64, 0x28, 0x4a, 0x52, 0x5a ,
   1233              0x48, 0x62, 0x48, 0x68, 0x71, 0x4e ,
   1234              0x2c, 0x42, 0x4d, 0x1, 0x99, 0x6a ,
   1235              0x3e, 0x6, 0x9, 0x36, 0xcd, 0xb4 ,
   1236              0x8, 0x62, 0x2d, 0x13, 0xcb, 0x5e ,
   1237              0x3c, 0x4, 0xa, 0x4f, 0x64, 0x78,
   1238              0x4c, 0x2, 0x6c, 0x4b, 0x6, 0x1e,
   1239              0x6c, 0x26, 0x8, 0x6c, 0x76, 0x78,
   1240          };
   1241          
   1242          static  const uint8  Help_buf[] =
   1243          {
   1244              0xbc, 0xa8, 0x48, 0x60, 0x52, 0x79, 
   1245              0xee, 0x8a, 0x6c, 0x65, 0x46, 0xb7, 
   1246              0x9e, 0x80, 0xe4, 0x00, 0xf0, 0x57, 
   1247              0x8e, 0x82, 0xe1, 0xf4, 0x3a, 0x35, 
   1248              0xbe, 0xac, 0x4a, 0xca, 0x77, 0x25, 
   1249              0xcc, 0xaa, 0x6a, 0x89, 0x4a, 0x8b, 
   1250              0x41, 0x51, 0x95, 0x98, 0x99, 0xa0, 
   1251              0x11, 0x51, 0xd5, 0xd9, 0x89, 0xa3, 
   1252              0x51, 0x19, 0x55, 0x9c, 0xc4, 0xba, 
   1253              0x55, 0x59, 0x1d, 0xfe, 0x6b, 0x8b, 
   1254              0x01, 0x5d, 0x80, 0xfd, 0x0b, 0xb9, 
   1255              0x55, 0xf7, 0x26, 0xf4, 0xda, 0x31, 
   1256              0x45, 0xd4, 0x4e, 0xa4, 0xd4, 0xa3, 
   1257              0x11, 0xe4, 0x86, 0xc3, 0xf4, 0x20, 
   1258              0x00, 0x82, 0xc1, 0x92, 0xde, 0x02, 
   1259              0x55, 0xf3, 0x36, 0xab, 0x91, 0xba, 
   1260              0x51, 0xf7, 0x92, 0xdc, 0xda, 0x30, 
   1261              0x05, 0xf3, 0xfa, 0xb9, 0xf8, 0x1b, 
   1262              0x67, 0xfd, 0xb2, 0xcc, 0xe9, 0x4f, 
   1263              0x7d, 0x77, 0x5a, 0xbb, 0xd3, 0x7a, 
   1264              0x6d, 0x75, 0xef, 0xa8, 0x57, 0x3e, 
   1265              0x1d, 0x48, 0x6f, 0xe4, 0x7a, 0x9f, 
   1266              0x29, 0x2e, 0xc1, 0x5f, 0xa3, 0x57, 
   1267              0x2c, 0x08, 0x84, 0x86, 0x09, 0x73, 
   1268              0xaa, 0x64, 0x01, 0xb6, 0x83, 0x3a, 
   1269              0x8b, 0x64, 0x27, 0xb0, 0xcf, 0xf6, 
   1270              0x6d, 0xe6, 0xaf, 0x97, 0xee, 0xc9, 
   1271              0x2d, 0xb9, 0xa6, 0xff, 0x37, 0x8d, 
   1272              0xe5, 0x11, 0x03, 0xe4, 0xee, 0xfb, 
   1273              0xd1, 0x50, 0xe0, 0x92, 0xe7, 0xf9, 
   1274              0xf5, 0x10, 0x4f, 0xa0, 0xd6, 0xe1, 
   1275              0x95, 0x10, 0x06, 0xf7, 0x9b, 0xc3, 
   1276              0x6d, 0xbe, 0xe4, 0xc5, 0xbd, 0xc3, 
   1277              0x7f, 0xfc, 0xe4, 0xd2, 0x86, 0x48, 
   1278              0x2d, 0xde, 0x85, 0x5e, 0x6c, 0x6f, 
   1279              0x0b, 0xaa, 0x69, 0x6e, 0xc8, 0x56, 
   1280              0x1c, 0xce, 0x2b, 0xa1, 0x69, 0x46, 
   1281              0x2f, 0x44, 0x64, 0xc4, 0xff, 0xff, 
   1282              0x7d, 0x77, 0x30, 0xbd, 0x0b, 0x90, 
   1283              0x69, 0x71, 0x56, 0xb9, 0xd0, 0x0b, 
   1284              0x69, 0x35, 0xb5, 0xc8, 0x96, 0x83, 
   1285              0x69, 0x7b, 0x1d, 0xeb, 0xb3, 0xe5, 
   1286              0x4f, 0x91, 0x1f, 0xac, 0xb2, 0xae, 
   1287              0x2d, 0x99, 0x10, 0x8c, 0xf1, 0xf0, 
   1288              0x7f, 0x99, 0x9c, 0xb9, 0x5e, 0xe0, 
   1289              0x95, 0x73, 0x5a, 0xe9, 0x64, 0xed, 
   1290              0xa5, 0x59, 0x79, 0x87, 0x6f, 0xfa,
   1291          };
   1292          
   1293          static  const uint8  Retreat_buf[] =
   1294          {
   1295              0xbc, 0xa8, 0x40, 0x60, 0x52, 0x79, 
   1296              0x9c, 0xe8, 0x62, 0x40, 0x35, 0xf9, 
   1297              0x9c, 0x88, 0x6a, 0x70, 0xca, 0x23, 
   1298              0x3a, 0x66, 0x08, 0x1a, 0xcb, 0x53, 
   1299              0x6c, 0x42, 0x49, 0xf7, 0x1d, 0x6b, 
   1300              0x7e, 0xe8, 0xc0, 0xc0, 0xab, 0x30, 
   1301              0x5c, 0xce, 0xe1, 0xf5, 0xf7, 0x2c, 
   1302              0x05, 0xf7, 0xbe, 0xef, 0xe2, 0x9a, 
   1303              0x45, 0xdb, 0x14, 0xcb, 0xac, 0x13, 
   1304              0x07, 0xdf, 0x3a, 0xa9, 0xac, 0x1b, 
   1305              0x65, 0xbb, 0xd5, 0x99, 0xa0, 0xe7, 
   1306              0x21, 0xf9, 0xfe, 0xfd, 0x93, 0xfe, 
   1307              0x23, 0xdf, 0xbb, 0xcb, 0x4b, 0xae, 
   1308              0x7d, 0x53, 0x74, 0xf9, 0x1b, 0xf1, 
   1309              0x2d, 0x55, 0x60, 0xdc, 0x30, 0xe7, 
   1310              0x65, 0xfa, 0xa6, 0xec, 0x17, 0x46, 
   1311              0x67, 0xce, 0x4d, 0xb4, 0xd7, 0x10, 
   1312              0x45, 0x8e, 0x45, 0xf0, 0x68, 0x2a, 
   1313              0x04, 0xaa, 0x03, 0x9f, 0xd6, 0x1a, 
   1314              0x55, 0x51, 0xd5, 0x9c, 0x85, 0x2a, 
   1315              0x55, 0x55, 0x94, 0xd8, 0xd0, 0x09, 
   1316              0x45, 0x51, 0xdc, 0xcd, 0xd1, 0x09, 
   1317              0x15, 0x1d, 0x59, 0xec, 0xa5, 0x3a, 
   1318              0x55, 0x59, 0xd0, 0xfe, 0xf3, 0x39, 
   1319              0x15, 0xf7, 0xf4, 0x9c, 0x65, 0xa3, 
   1320              0x77, 0x8e, 0x4f, 0x97, 0x60, 0x40, 
   1321              0x9a, 0xa8, 0x6a, 0x7b, 0xb9, 0x33, 
   1322              0xac, 0x88, 0x68, 0xd2, 0x3c, 0x67, 
   1323              0x8c, 0x4e, 0xa3, 0xc5, 0xe6, 0x3e, 
   1324              0x0f, 0xf6, 0xd6, 0xf4, 0xff, 0xda, 
   1325              0x7f, 0xd3, 0x9d, 0xf3, 0x8d, 0x08, 
   1326              0x2d, 0xf9, 0x75, 0xf4, 0xd9, 0x87, 
   1327              0x6f, 0xff, 0x10, 0xac, 0x12, 0x3c, 
   1328              0x79, 0xf7, 0xd0, 0xeb, 0x34, 0xe1, 
   1329              0x5d, 0x93, 0xd6, 0xd3, 0xb8, 0xe5, 
   1330              0x2b, 0xd6, 0xe5, 0x80, 0x70, 0x43, 
   1331              0x1a, 0x88, 0xc8, 0xc6, 0xc9, 0x77, 
   1332              0xe8, 0x2e, 0xe0, 0x98, 0x41, 0x73, 
   1333              0x86, 0xa4, 0xcf, 0x8a, 0x60, 0xe4, 
   1334              0xc3, 0xe0, 0xeb, 0xf5, 0xd7, 0x5a, 
   1335              0xb6, 0xc6, 0xa6, 0xf0, 0x96, 0x88, 
   1336              0x45, 0xb2, 0xfd, 0xdb, 0x33, 0xab, 
   1337              0x15, 0xf9, 0x3c, 0xb9, 0xe3, 0x3d, 
   1338              0x5d, 0x31, 0x37, 0xea, 0x86, 0xa5, 
   1339              0x7f, 0x31, 0xff, 0x8b, 0xb7, 0x4a, 
   1340              0x7f, 0x1f, 0x1b, 0xe8, 0x87, 0x69, 
   1341              0x6d, 0xb5, 0x56, 0xbe, 0x49, 0x7b, 
   1342              0x7f, 0xd2, 0xd6, 0xf6, 0xc7, 0x59, 
   1343              0x3f, 0xd6, 0xfa, 0xd0, 0xdc, 0x39, 
   1344              0x1f, 0xdb, 0x3c, 0xbd, 0x72, 0x79, 
   1345              0x3d, 0xde, 0xb6, 0x95, 0xeb, 0x29, 
   1346              0x0d, 0xf9, 0x9d, 0xc6, 0xd3, 0xc8, 
   1347              0x6d, 0xdf, 0xbf, 0xd2, 0x5d, 0x28, 
   1348              0x3d, 0xdb, 0xf4, 0xf7, 0xd6, 0x2b, 
   1349              0x6d, 0xf9, 0x7f, 0xd1, 0x0e, 0xb5, 
   1350              0x6d, 0xfd, 0x14, 0xa7, 0xd3, 0x1f, 
   1351              0x7f, 0xe5, 0x99, 0x87, 0xc5, 0x14, 
   1352              0x2f, 0xd3, 0x3f, 0xf0, 0xf7, 0x0e, 
   1353              0x6f, 0x59, 0xf7, 0xb5, 0xe7, 0x32, 
   1354              0x0d, 0x59, 0x7e, 0xd0, 0xc0, 0x96, 
   1355              0x0f, 0x7b, 0x1c, 0xb1, 0x2b, 0xc6, 
   1356          };
   1357          
   1358          static  const uint8  Speed_buf[] =
   1359          {
   1360              0x7E, 0x06, 0x2B, 0x47, 0x7F, 0x2C,
   1361              0x68, 0x60, 0x6C, 0x71, 0xB6, 0x52,
   1362              0x3E, 0x24, 0x0C, 0x00, 0xA5, 0xA6,
   1363              0x0C, 0x20, 0x6D, 0x17, 0x6B, 0xC6,
   1364              0x7A, 0x42, 0x4D, 0x25, 0x19, 0x2C,
   1365              0x6C, 0x20, 0x6D, 0x06, 0x58, 0x6E,
   1366              0x3E, 0x66, 0x2F, 0x21, 0x2F, 0x86,
   1367              0x5A, 0x46, 0x0F, 0x47, 0x2E, 0x64,
   1368              0x2A, 0x24, 0x2E, 0x21, 0xE7, 0x0A,
   1369              0x6C, 0x02, 0x49, 0x75, 0x4D, 0x6E,
   1370              0x7E, 0x62, 0x4F, 0x54, 0x3E, 0x0C,
   1371              0x78, 0x46, 0x0B, 0x60, 0x78, 0xF2,
   1372              0x2C, 0x02, 0x0D, 0x05, 0x29, 0x4A,
   1373              0x7C, 0x22, 0x4D, 0x71, 0x38, 0x62,
   1374              0xC4, 0xE2, 0x24, 0x28, 0x47, 0x76,
   1375              0xB6, 0xC2, 0x64, 0x09, 0xE5, 0x16,
   1376              0x63, 0xE8, 0x6C, 0x3B, 0xEC, 0x17,
   1377              0x67, 0xFC, 0x6F, 0x4D, 0xED, 0xFE,
   1378              0x65, 0xFF, 0x3B, 0xE4, 0x3F, 0x12,
   1379              0x45, 0xD9, 0x5B, 0xC5, 0xF5, 0x07,
   1380              0x67, 0x9B, 0x94, 0xF5, 0xE8, 0x0D,
   1381              0x71, 0xBD, 0xDF, 0x87, 0xF4, 0x7B,
   1382              0x65, 0x9F, 0xCF, 0x5A, 0xDD, 0x9C,
   1383              0x37, 0xBD, 0xE9, 0x1F, 0x1F, 0xEF,
   1384              0x0F, 0x52, 0x46, 0x7D, 0x50, 0xC7,
   1385              0x6D, 0x02, 0xEF, 0x53, 0xAB, 0x66,
   1386              0x25, 0xA8, 0xEE, 0x4A, 0xE5, 0x65,
   1387              0x45, 0xFB, 0x35, 0x92, 0x00, 0x8A,
   1388              0x45, 0xD3, 0xBF, 0x87, 0x08, 0x92,
   1389              0x45, 0xB3, 0xB2, 0xD0, 0x65, 0x88,
   1390              0x05, 0xB1, 0x1F, 0xC0, 0x54, 0xB9,
   1391              0x11, 0xD1, 0x1D, 0xF6, 0x09, 0xB0,
   1392              0x15, 0xF7, 0x7F, 0xE7, 0xB5, 0x23,
   1393              0x45, 0xE3, 0xB9, 0xF6, 0x1E, 0x01,
   1394              0x45, 0xDD, 0x75, 0x58, 0xF9, 0x0A,
   1395              0x05, 0xF9, 0x34, 0x3F, 0xF9, 0x82,
   1396              0x05, 0xFF, 0x36, 0xB0, 0x35, 0x1A,
   1397              0x05, 0xFB, 0x56, 0xE1, 0x0E, 0x1A,
   1398              0x05, 0xDB, 0x54, 0xC0, 0x38, 0x82,
   1399              0x37, 0xFD, 0x3C, 0x87, 0x1D, 0x27,
   1400              0x4D, 0x43, 0x55, 0x1E, 0xAD, 0x1F,
   1401              0x4D, 0x6A, 0x14, 0x0D, 0xFE, 0x4E,
   1402              0x1D, 0xC6, 0x16, 0x4A, 0xF7, 0x09,
   1403              0x6F, 0xE3, 0x5F, 0x6C, 0x5F, 0x0B,
   1404              0x0F, 0xE1, 0xB7, 0x28, 0x58, 0xE0,
   1405              0x5D, 0xA4, 0x94, 0x1A, 0x74, 0xC2,
   1406              0xD6, 0xA4, 0x05, 0x75, 0xEC, 0x4A,
   1407              0xD4, 0x84, 0x04, 0x07, 0xF9, 0x68,
   1408              0xD2, 0xE6, 0x27, 0x52, 0x95, 0xE2,
   1409              0x6F, 0x24, 0xA9, 0x64, 0xF3, 0x3E,
   1410              0x6B, 0x62, 0xC2, 0x51, 0xB1, 0x5E,
   1411              0xE0, 0xC0, 0x62, 0x42, 0xD6, 0x24,
   1412              0x96, 0x86, 0x06, 0x34, 0x93, 0xA6,
   1413              0xB0, 0xE4, 0x26, 0x01, 0xE4, 0x5C,
   1414              0xD0, 0xE6, 0x07, 0x33, 0xC7, 0x7A,
   1415              0xB4, 0x86, 0x07, 0x56, 0x93, 0xC6,
   1416              0xA4, 0xA2, 0x41, 0x60, 0xE5, 0x3E,
   1417              0xC6, 0xC4, 0x22, 0x74, 0xA2, 0xD6,
   1418              0x77, 0xCC, 0xCF, 0x74, 0xE1, 0xCE,
   1419              0x7B, 0x74, 0x27, 0x56, 0xED, 0xBA,
   1420              0x5D, 0x51, 0x76, 0x5E, 0xF5, 0x36,
   1421              0x65, 0xF9, 0x95, 0xB2, 0x74, 0x10,
   1422              0x05, 0xDB, 0x56, 0xF2, 0xD1, 0x80,
   1423              0x45, 0xD1, 0xD6, 0x87, 0x9A, 0x03,
   1424              0x05, 0xD1, 0x1D, 0xD0, 0xA1, 0xA0,
   1425              0x55, 0x5A, 0xFB, 0xB7, 0x95, 0x31,
   1426              0x05, 0x59, 0x1D, 0xD7, 0x3D, 0x82,
   1427              0x55, 0x59, 0xD5, 0xF3, 0x62, 0x81,
   1428              0x15, 0xD1, 0x54, 0xC0, 0x09, 0xA1,
   1429              0x55, 0xD9, 0x17, 0xF7, 0x33, 0x38,
   1430              0x67, 0xDF, 0x97, 0xD3, 0x57, 0x06,
   1431              0x4D, 0x40, 0xF4, 0xB7, 0x05, 0x14,
   1432              0x5D, 0xD3, 0x53, 0x6C, 0xAC, 0x08,
   1433              0x1F, 0x86, 0xFC, 0x0C, 0xD1, 0x83,
   1434              0x7B, 0x8E, 0x37, 0x63, 0xCA, 0xFA,
   1435              0xB2, 0x86, 0x20, 0x7C, 0x15, 0x76,
   1436              0x86, 0xA0, 0x47, 0x3B, 0x81, 0x14,
   1437              0xA2, 0xA6, 0x44, 0xD3, 0x04, 0x64,
   1438              0xC0, 0xE0, 0x65, 0xC1, 0x54, 0x0E,
   1439              0xA2, 0xC2, 0x21, 0xE4, 0x7D, 0x78,
   1440              0x11, 0x8C, 0x45, 0xC4, 0xD0, 0xB3,
   1441              0x45, 0xF1, 0x8A, 0xF7, 0xBE, 0xA8,
   1442              0x55, 0xB1, 0x3C, 0xDD, 0xB4, 0x33,
   1443              0x55, 0xF1, 0x12, 0xBF, 0xE5, 0x19,
   1444              0x45, 0xD1, 0x1C, 0xD8, 0x0E, 0x90,
   1445              0x45, 0xB1, 0xB7, 0xD2, 0xE9, 0xAA,
   1446              0x45, 0xF7, 0x3A, 0xB0, 0x68, 0x9A,
   1447              0x15, 0xD3, 0x52, 0x78, 0xCB, 0xA3,
   1448              0x15, 0xD7, 0x0E, 0x6C, 0x93, 0xA0,
   1449              0x41, 0xEC, 0x64, 0x5E, 0x6D, 0x10,
   1450              0x51, 0xC0, 0x8C, 0x18, 0x30, 0x23,
   1451              0xC4, 0x86, 0x20, 0x2C, 0x57, 0x64,
   1452              0xD4, 0xA2, 0x66, 0x49, 0x20, 0x50,
   1453              0xD2, 0xC6, 0x07, 0x6D, 0x6E, 0x26,
   1454              0x45, 0x59, 0x19, 0xC1, 0x65, 0x8A,
   1455              0x55, 0x19, 0x1D, 0xA0, 0x75, 0xB9,
   1456              0x05, 0x7B, 0x9C, 0x39, 0xBC, 0x91,
   1457              0x55, 0xBB, 0x22, 0x4A, 0xFD, 0xA2,
   1458              0x05, 0xFC, 0xA0, 0x1A, 0x83, 0xBD,
   1459              0x0D, 0x7C, 0xE3, 0x5C, 0x30, 0xB0,
   1460              0x0F, 0x86, 0x0C, 0x2B, 0x44, 0x68,
   1461              0x92, 0xA6, 0x04, 0x21, 0xCD, 0x68,
   1462              0x86, 0xC6, 0x47, 0x14, 0xF1, 0xA4,
   1463              0xE6, 0x86, 0x22, 0x73, 0xF5, 0x56,
   1464              0x80, 0xC4, 0x24, 0x05, 0xB2, 0x78,
   1465              0xD4, 0xC6, 0x24, 0x32, 0xD5, 0xF4,
   1466              0xB6, 0xA6, 0x04, 0x65, 0xC5, 0x6A,
   1467              0x96, 0x80, 0x03, 0x46, 0xC3, 0x0C,
   1468              0xA6, 0xA6, 0x24, 0x65, 0xCD, 0x2E,
   1469              0xC6, 0xA2, 0x42, 0x61, 0x90, 0x7C,
   1470              0xE6, 0x82, 0x42, 0x47, 0xC5, 0x0A,
   1471              0xF4, 0x82, 0x44, 0x20, 0xD1, 0x5E,
   1472              0x96, 0xA4, 0x40, 0x47, 0xB3, 0x7C,
   1473              0x2C, 0x42, 0x0D, 0x70, 0x7F, 0xC6,
   1474              0x2C, 0x22, 0x68, 0x43, 0xE6, 0x2E,
   1475              0x1C, 0x06, 0x4D, 0x57, 0x3C, 0x4E,
   1476              0x3C, 0x02, 0x0E, 0x03, 0xC5, 0x6C,
   1477              0x7C, 0x24, 0x0C, 0x25, 0xD5, 0x0E,
   1478              0x6E, 0x22, 0x6C, 0x25, 0xE2, 0x2C,
   1479              0x6C, 0x60, 0x6D, 0x01, 0x6D, 0x5A,
   1480              0x6C, 0x24, 0x6D, 0x57, 0x0F, 0x26,
   1481              0x28, 0x42, 0x0A, 0x65, 0xE6, 0xF0,
   1482              0x3E, 0x44, 0x2D, 0x02, 0x59, 0x3C,
   1483              0x4C, 0x20, 0x0E, 0x27, 0xC6, 0x7C,
   1484              0x7C, 0x26, 0x0F, 0x13, 0x0A, 0x4E,
   1485              0x0C, 0x00, 0x4F, 0x16, 0x6C, 0x2E,
   1486              0x6E, 0x22, 0x6D, 0x71, 0x5E, 0x0E,
   1487              0x3E, 0x06, 0x0F, 0x16, 0x29, 0x68,
   1488              0x4C, 0x20, 0x6D, 0x33, 0x69, 0x3E,
   1489              0x3C, 0x20, 0x4F, 0x13, 0x6C, 0xC6,
   1490              0x3E, 0x20, 0x6C, 0x06, 0x95, 0x7A,
   1491              0x6A, 0x62, 0x4B, 0x71, 0x58, 0x1E,
   1492              0x7C, 0x04, 0x6D, 0x47, 0x2E, 0x4E,
   1493              0x0E, 0x26, 0x0B, 0x17, 0x7B, 0x7E,
   1494              0x0C, 0x20, 0x4D, 0x75, 0x4F, 0x82,
   1495              0x3C, 0x04, 0x2D, 0x24, 0x28, 0x7C,
   1496              0x48, 0x60, 0x6B, 0x56, 0x6B, 0x5E,
   1497              0x2C, 0x02, 0x0B, 0x43, 0x7E, 0xB2,
   1498              0x0C, 0x46, 0x4F, 0x07, 0x39, 0x6C,
   1499              0x7E, 0x20, 0x2B, 0x64, 0x5E, 0x78,
   1500              0x68, 0x66, 0x0F, 0x60, 0x1E, 0x3C,
   1501              0x5E, 0x40, 0x49, 0x47, 0x69, 0x2E,
   1502              0x78, 0x62, 0x4D, 0x25, 0x5B, 0x6E,
   1503              0x1C, 0x00, 0x2D, 0x15, 0x6E, 0x0C,
   1504              0x2C, 0x64, 0x6F, 0x23, 0x39, 0x4E,
   1505              0x78, 0x46, 0x09, 0x74, 0x5D, 0x6A,
   1506              0x28, 0x64, 0x29, 0x40, 0xA1, 0x68,
   1507              0x6C, 0x22, 0x0C, 0x03, 0x84, 0x6E,
   1508              0x6C, 0x24, 0x2D, 0x70, 0x48, 0xC2,
   1509              0x6C, 0x06, 0x29, 0x74, 0x0B, 0x78,
   1510              0xE4, 0x86, 0x05, 0x05, 0x78, 0x6A,
   1511              0x86, 0xA6, 0x25, 0x63, 0x3E, 0x5E,
   1512              0xA6, 0x84, 0x27, 0x05, 0x78, 0x68,
   1513              0xD6, 0x82, 0x60, 0x50, 0x0D, 0x2C,
   1514              0xC4, 0xA0, 0x05, 0x66, 0x7F, 0xE2,};
   1515          
   1516          static  const uint8  Help_ack_buf[] =
   1517          {
   1518              0xbc, 0xa8, 0x48, 0x60, 0x52, 0x79, 
   1519              0x7c, 0x8a, 0xec, 0x20, 0x52, 0xb0, 
   1520              0x1c, 0xac, 0xef, 0x23, 0x1c, 0x70, 
   1521              0xa6, 0x20, 0xe9, 0x4f, 0x76, 0x32, 
   1522              0x86, 0xe8, 0xc3, 0x7e, 0xd9, 0x27, 
   1523              0xf4, 0xea, 0x81, 0xc1, 0xb7, 0x0b, 
   1524              0xdc, 0x8c, 0x23, 0x94, 0xb9, 0x37, 
   1525              0xee, 0xac, 0x21, 0xb2, 0xe5, 0x73, 
   1526              0xca, 0xac, 0x2f, 0xc9, 0x32, 0x89, 
   1527              0x0f, 0x31, 0x7e, 0xfc, 0xa6, 0x9b, 
   1528              0x5d, 0x11, 0x9e, 0xe8, 0xd0, 0x8d, 
   1529              0x5d, 0x79, 0x30, 0x9e, 0x5e, 0xb5, 
   1530              0x4f, 0x17, 0x9f, 0xeb, 0x52, 0xa0, 
   1531              0x25, 0x99, 0x96, 0xef, 0x6e, 0x4a, 
   1532              0x05, 0xb7, 0xfc, 0xdf, 0x29, 0x0b, 
   1533              0x05, 0xd6, 0xdd, 0x84, 0xe5, 0x2b, 
   1534              0x00, 0x82, 0xca, 0xb2, 0x2c, 0x33, 
   1535              0x86, 0xa0, 0x81, 0xb1, 0x69, 0x23, 
   1536              0xf6, 0xe0, 0xc0, 0xb6, 0xc4, 0x3f, 
   1537              0x45, 0x5c, 0x85, 0xdc, 0x75, 0x9a, 
   1538              0x41, 0x1d, 0x1d, 0xc9, 0x80, 0x91, 
   1539              0x51, 0x59, 0x95, 0xe9, 0xb3, 0xa3, 
   1540              0x55, 0x59, 0x99, 0xcf, 0x5e, 0x81, 
   1541              0x15, 0x95, 0x1f, 0xb9, 0x70, 0xbb, 
   1542              0x45, 0x97, 0xac, 0xcb, 0x65, 0x82, 
   1543              0x35, 0xbe, 0x5f, 0xd5, 0xad, 0x4c, 
   1544              0x25, 0xdc, 0xb9, 0xf4, 0xda, 0x52, 
   1545              0x3f, 0x76, 0x16, 0xd5, 0xe7, 0x3e, 
   1546              0x55, 0xf4, 0xaf, 0xb5, 0x74, 0xb2, 
   1547              0x67, 0xce, 0x1e, 0xd5, 0x46, 0x0e, 
   1548              0x2d, 0x61, 0xb5, 0xf4, 0x74, 0x49, 
   1549              0x7d, 0x4d, 0xb5, 0x87, 0xf6, 0x23, 
   1550              0x0f, 0xc3, 0xf5, 0xf4, 0x8e, 0x0b, 
   1551              0xa7, 0x75, 0x13, 0xbe, 0x57, 0x3c, 
   1552              0x93, 0x35, 0x1b, 0xab, 0x29, 0x86, 
   1553              0xb3, 0x33, 0x14, 0x88, 0x4d, 0xfd, 
   1554              0x6b, 0xec, 0x4c, 0xc4, 0xf1, 0x65, 
   1555              0x7d, 0x8e, 0x08, 0xe0, 0x66, 0x71, 
   1556              0x91, 0x66, 0x05, 0x1d, 0xb9, 0x75, 
   1557              0xf2, 0x64, 0x21, 0xc3, 0xe4, 0xbb, 
   1558              0x5b, 0x31, 0xaf, 0xdb, 0x84, 0xdc, 
   1559              0x7f, 0x19, 0x74, 0xea, 0x8a, 0x4a, 
   1560              0x7b, 0x5b, 0x5e, 0xb9, 0xa9, 0x6a, 
   1561              0x6d, 0x1f, 0x1e, 0xc9, 0xae, 0x78, 
   1562              0x2d, 0x1f, 0x1b, 0xd8, 0xc4, 0xe1, 
   1563              0x7d, 0x3f, 0x1a, 0x9c, 0xf3, 0xf0, 
   1564              0x7f, 0x7b, 0x76, 0xda, 0x68, 0x1f, 
   1565              0x6d, 0x5c, 0x54, 0x8f, 0x42, 0x73, 
   1566              0x09, 0x08, 0x02, 0xc1, 0xab, 0x17, 
   1567              0x2c, 0x0c, 0xa0, 0xf3, 0x48, 0x76, 
   1568              0x80, 0x06, 0x22, 0xc0, 0x35, 0x4a, 
   1569              0xac, 0x8e, 0x2c, 0xe4, 0x46, 0x2f, 
   1570              0xfe, 0xae, 0x0f, 0x69, 0xac, 0x6d, 
   1571              0xdc, 0xca, 0x29, 0x83, 0xb1, 0xbb, 
   1572              0x67, 0x9a, 0x1d, 0xaa, 0x56, 0xe9, 
   1573              0x1d, 0x37, 0x30, 0x9b, 0x77, 0xbc, 
   1574              0x0d, 0x72, 0xa9, 0x92, 0x9e, 0xbc, 
   1575              0x7f, 0x7c, 0xa2, 0x81, 0xed, 0xb5, 
   1576              0x2d, 0xb7, 0x4e, 0xa0, 0x88, 0xf7, 
   1577              0x2d, 0xbf, 0x37, 0x80, 0xb4, 0x9e, 
   1578              0x7d, 0x9f, 0x1e, 0x91, 0xe5, 0xb5, 
   1579              0xb7, 0x77, 0x3e, 0xb4, 0x7e, 0xe0, 
   1580              0xe6, 0x82, 0xc6, 0x39, 0xcc, 0xf3, 
   1581          };
   1582          
   1583          static  const uint8  Slow_dowm_buf[] =
   1584          {
   1585          0xbc, 0xa8, 0x48, 0x60, 0x52, 0x79, 
   1586          0xce, 0xee, 0x2c, 0x65, 0x76, 0xb5, 
   1587          0xda, 0x00, 0x6e, 0x20, 0x29, 0x6f, 
   1588          0xec, 0x2c, 0x0a, 0x42, 0xe2, 0x7c, 
   1589          0xec, 0x0e, 0xa5, 0x34, 0xd0, 0x4e, 
   1590          0xcc, 0x28, 0xe5, 0x92, 0x1f, 0x3a, 
   1591          0xc8, 0xe0, 0x83, 0xcb, 0x0a, 0x91, 
   1592          0x45, 0x15, 0x9c, 0xc8, 0xdc, 0x3b, 
   1593          0x45, 0x11, 0xd8, 0x9c, 0xd9, 0x39, 
   1594          0x45, 0x5d, 0x10, 0xdd, 0xd9, 0x22, 
   1595          0x15, 0x5d, 0x58, 0xef, 0xfc, 0x08, 
   1596          0x45, 0x5d, 0x19, 0xfc, 0xb7, 0x1b, 
   1597          0x15, 0x59, 0x95, 0xdd, 0x78, 0x2b, 
   1598          0x45, 0x5f, 0xcc, 0xac, 0x4f, 0x29, 
   1599          0x15, 0xb6, 0x4e, 0xb5, 0xde, 0x2a, 
   1600          0x10, 0xa1, 0x4d, 0x91, 0x69, 0x20, 
   1601          0x88, 0x81, 0xc0, 0xe3, 0x60, 0x70, 
   1602          0xca, 0xe3, 0xc3, 0xe1, 0x78, 0x64, 
   1603          0xce, 0x60, 0x43, 0xc0, 0x8b, 0xaa, 
   1604          0x51, 0x59, 0x5c, 0x99, 0x9d, 0x92, 
   1605          0x51, 0x19, 0x91, 0xdb, 0xed, 0x3b, 
   1606          0x51, 0xf3, 0x37, 0xed, 0xf8, 0xa0, 
   1607          0x41, 0x91, 0x5e, 0xfc, 0x92, 0xbb, 
   1608          0x15, 0x9d, 0x04, 0x9b, 0x78, 0x88, 
   1609          0x25, 0xbb, 0x6a, 0xc8, 0x6c, 0xfb, 
   1610          0x75, 0xff, 0xd6, 0x9d, 0x29, 0x6f, 
   1611          0x65, 0xdb, 0xdf, 0xde, 0x33, 0x75, 
   1612          0x39, 0x75, 0xb1, 0x88, 0x5d, 0xd1, 
   1613          0x19, 0xb7, 0x81, 0xa9, 0xc0, 0x5e, 
   1614          0x3f, 0x9f, 0x32, 0xac, 0xd9, 0x69, 
   1615          0x6d, 0xbf, 0x19, 0xda, 0xe0, 0x5f, 
   1616          0x6d, 0xf9, 0xf3, 0xcf, 0xa7, 0x69, 
   1617          0x6f, 0xf9, 0xd2, 0xbb, 0xc1, 0x1e, 
   1618          0x4f, 0xdf, 0x36, 0x8e, 0x5b, 0xa5, 
   1619          0x2d, 0xf4, 0x8d, 0xa0, 0xcd, 0x87, 
   1620          0x7d, 0xb4, 0xb6, 0xd6, 0xc5, 0x47, 
   1621          0x2b, 0x82, 0xe5, 0x38, 0xc9, 0x33, 
   1622          0xa0, 0xc6, 0x83, 0x96, 0xc3, 0x73, 
   1623          0xb0, 0xe4, 0xa1, 0x93, 0xf9, 0x6f, 
   1624          0xa8, 0xea, 0x4b, 0xd0, 0xc7, 0x2d, 
   1625          0xee, 0x4a, 0x66, 0xd0, 0xa2, 0xaa, 
   1626          0x55, 0x93, 0xdd, 0xeb, 0x27, 0xb8, 
   1627          0x51, 0xf1, 0xff, 0xab, 0x7d, 0x29, 
   1628          0x55, 0xb1, 0x9f, 0xea, 0x38, 0xa3, 
   1629          0x55, 0xb9, 0x77, 0xab, 0x3d, 0xa0, 
   1630          0x55, 0xb9, 0x70, 0xdf, 0x3b, 0xb0, 
   1631          0x01, 0xf9, 0x33, 0xe9, 0x29, 0xb9, 
   1632          0x75, 0xd9, 0x3c, 0x89, 0xc3, 0x2e, 
   1633          0x31, 0xdb, 0x3c, 0xa9, 0x83, 0xea, 
   1634          0x77, 0x99, 0x79, 0xe8, 0xd2, 0x5a, 
   1635          0x37, 0x9b, 0x1e, 0xb9, 0xf0, 0xe0, 
   1636          0x15, 0xbb, 0x75, 0xf3, 0xbd, 0xa9, 
   1637          0x00, 0xe8, 0x26, 0x3b, 0xad, 0xb3, 
   1638          0xf4, 0x6e, 0x84, 0x32, 0x4a, 0x42, 
   1639          0xb0, 0x4c, 0xe2, 0x44, 0x40, 0x60, 
   1640          0xf0, 0x68, 0xc8, 0x60, 0x52, 0x78, 
   1641          0xbc, 0xa8, 0x48, 0x60, 0x42, 0x79, 
   1642          0xac, 0x8a, 0x6c, 0x20, 0x56, 0x79, 
   1643          0xbc, 0xa8, 0x4c, 0x24, 0x13, 0x69, 
   1644          0xbc, 0xa8, 0x48, 0x60, 0x50, 0x79, 
   1645          0xbc, 0xa8, 0x4c, 0x20, 0x57, 0x69, 
   1646          0xac, 0x8a, 0x68, 0x60, 0x52, 0x79, 
   1647          0xbc, 0xa8, 0x4c, 0x24, 0x56, 0x69, 
   1648          0xbc, 0xa8, 0x48, 0x60, 0x52, 0x79, 
   1649          0xbc, 0xa8, 0x4c, 0x02, 0x77, 0x69, 
   1650          0xbc, 0x8a, 0x68, 0x60, 0x52, 0x79, 
   1651          0xac, 0xa8, 0x4c, 0x24, 0x13, 0x69, 
   1652          0xbc, 0xa8, 0x4c, 0x20, 0x56, 0x79, 
   1653          0xbc, 0xa8, 0x48, 0x60, 0x50, 0x79, 
   1654          0xbc, 0x8a, 0x6c, 0x24, 0x13, 0x69, 
   1655          0xac, 0xa8, 0x48, 0x60, 0x52, 0x79, 
   1656          0xbc, 0xa8, 0x4c, 0x20, 0x56, 0x79, 
   1657          0xbc, 0xa8, 0x48, 0x60, 0x52, 0x79, 
   1658          0xbc, 0x8a, 0x6c, 0x24, 0x13, 0x69, 
   1659          0xac, 0xa8, 0x48, 0x42, 0x72, 0x79, 
   1660          0xbc, 0xa8, 0x4c, 0x20, 0x57, 0x69, 
   1661          0xbc, 0xa8, 0x48, 0x60, 0x52, 0x79, 
   1662          0xbc, 0x8a, 0x6c, 0x20, 0x54, 0x79, 
   1663          0xbc, 0xa8, 0x4c, 0x24, 0x13, 0x69, 
   1664          0xac, 0xa8, 0x48, 0x60, 0x52, 0x79, 
   1665          0xbc, 0xa8, 0x4c, 0x20, 0x57, 0x69, 
   1666          0xbc, 0x8a, 0x68, 0x60, 0x52, 0x79, 
   1667          0xbc, 0xa8, 0x4c, 0x24, 0x56, 0x69, 
   1668          0xac, 0xa8, 0x48, 0x60, 0x52, 0x79, 
   1669          0xbc, 0xa8, 0x4c, 0x02, 0x77, 0x69, 
   1670          0xbc, 0x02, 0x68, 0x60, 0x52, 0x79, 
   1671          0xbe, 0xe8, 0x4a, 0x71, 0x19, 0x39, 
   1672          0x4c, 0xca, 0x4e, 0x0a, 0x60, 0x60, 
   1673          0x5a, 0xc8, 0xcd, 0x2c, 0x9b, 0x25, 
   1674          0x86, 0x2a, 0xc9, 0x83, 0x59, 0x37, 
   1675          0xf6, 0x68, 0x8b, 0xf1, 0xa7, 0x63, 
   1676          0xb4, 0x0c, 0xab, 0xf4, 0xd4, 0x6c, 
   1677          0x25, 0xdf, 0xd6, 0xfe, 0x59, 0xdf, 
   1678          0x67, 0xf9, 0xfb, 0x9b, 0xb6, 0x13, 
   1679          0x25, 0xbd, 0xbc, 0xcf, 0xa8, 0xd5, 
   1680          0x73, 0xbf, 0xb5, 0xe9, 0x28, 0xff, 
   1681          0x05, 0x9f, 0x27, 0xc8, 0x75, 0xba, 
   1682          0x05, 0xb7, 0xb4, 0x8d, 0x56, 0xaa, 
   1683          0x45, 0xf7, 0x68, 0xf5, 0xfd, 0x29, 
   1684          0x45, 0x94, 0x0d, 0xb0, 0x20, 0x1b, 
   1685          0xa9, 0xa8, 0x48, 0xb0, 0x23, 0x33, 
   1686          0xbe, 0x8a, 0x6b, 0xf2, 0x7d, 0x77, 
   1687          0xdc, 0xcc, 0x00, 0xb4, 0xa3, 0x52, 
   1688          0xce, 0xea, 0x2f, 0xd4, 0xf6, 0xab, 
   1689          0x5d, 0x71, 0xa7, 0x9a, 0x37, 0xa8, 
   1690          0x0f, 0x1f, 0x13, 0xec, 0x59, 0xa1, 
   1691          0x4d, 0xb1, 0xd2, 0xf8, 0xc3, 0x7e, 
   1692          0x5b, 0xdb, 0x79, 0x8a, 0xe1, 0x0c, 
   1693          0x59, 0xdf, 0xbf, 0xda, 0x78, 0xa7, 
   1694          0xe7, 0x35, 0x17, 0xc8, 0x44, 0xf1, 
   1695          0xf7, 0x75, 0x77, 0xc2, 0x97, 0xe1, 
   1696          0x7f, 0xff, 0x2f, 0xa5, 0x3e, 0xe3, 
   1697          0x7d, 0xdc, 0x02, 0xd2, 0x68, 0x5e, 
   1698          0x0b, 0x80, 0xa9, 0xd6, 0xd5, 0x65, 
   1699          0x3e, 0x84, 0xab, 0xe3, 0xf6, 0x35, 
   1700          0x90, 0xe8, 0x80, 0xf3, 0x5e, 0x7d, 
   1701          0xbc, 0x20, 0x04, 0xc7, 0x2a, 0x3f, 
   1702          0xae, 0x66, 0x45, 0x94, 0x6e, 0x81, 
   1703          0x6d, 0x52, 0x19, 0xe1, 0xfa, 0xaa, 
   1704          0x2d, 0x56, 0x81, 0xd3, 0xce, 0xbb, 
   1705          0x6d, 0x19, 0x2f, 0xe7, 0xcc, 0xb2, 
   1706          0x2f, 0xf6, 0x23, 0xd0, 0xc4, 0xe0, 
   1707          0x7f, 0xb2, 0xe3, 0xe1, 0xc1, 0xe2, 
   1708          0x5d, 0xf8, 0x5a, 0x83, 0xc7, 0xe1, 
   1709          0xe7, 0x75, 0x16, 0xf5, 0x2c, 0xa4, 
   1710          0xb7, 0x6a, 0x6b, 0x7e, 0xcd, 0xbd, 
   1711          0xbf, 0x70, 0x6a, 0x5b, 0x8d, 0xa5, 
   1712          };
   1713          
   1714          static  const uint8  Avoid_buf[] =
   1715          {0xbc, 0xa8, 0x48, 0x60, 0x52, 0x79, 
   1716          0xce, 0xee, 0x2c, 0x65, 0x76, 0xb5, 
   1717          0xda, 0x00, 0x6e, 0x20, 0x29, 0x6f, 
   1718          0xec, 0x2c, 0x0a, 0x42, 0xe2, 0x7c, 
   1719          0xec, 0x0e, 0xa5, 0x34, 0xd0, 0x4e, 
   1720          0xcc, 0x28, 0xe5, 0x92, 0x1f, 0x3a, 
   1721          0xc8, 0xe0, 0x83, 0xcb, 0x0a, 0x91, 
   1722          0x45, 0x15, 0x9c, 0xc8, 0xdc, 0x3b, 
   1723          0x45, 0x11, 0xd8, 0x9c, 0xd9, 0x39, 
   1724          0x45, 0x5d, 0x10, 0xdd, 0xd9, 0x22, 
   1725          0x15, 0x5d, 0x58, 0xef, 0xfc, 0x08, 
   1726          0x45, 0x5d, 0x19, 0xfc, 0xb7, 0x1b, 
   1727          0x15, 0x59, 0x95, 0xdd, 0x78, 0x2b, 
   1728          0x45, 0x5f, 0xcc, 0xac, 0x4f, 0x29, 
   1729          0x15, 0xb6, 0x4e, 0xb5, 0xde, 0x2a, 
   1730          0x10, 0xa1, 0x4d, 0x91, 0x69, 0x20, 
   1731          0x88, 0x81, 0xc0, 0xe3, 0x60, 0x70, 
   1732          0xca, 0xe3, 0xc3, 0xe1, 0x78, 0x64, 
   1733          0xce, 0x60, 0x43, 0xc0, 0x8b, 0xaa, 
   1734          0x51, 0x59, 0x5c, 0x99, 0x9d, 0x92, 
   1735          0x51, 0x19, 0x91, 0xdb, 0xed, 0x3b, 
   1736          0x51, 0xf3, 0x37, 0xed, 0xf8, 0xa0, 
   1737          0x41, 0x91, 0x5e, 0xfc, 0x92, 0xbb, 
   1738          0x15, 0x9d, 0x04, 0x9b, 0x78, 0x88, 
   1739          0x25, 0xbb, 0x6a, 0xc8, 0x6c, 0xfb, 
   1740          0x75, 0xff, 0xd6, 0x9d, 0x29, 0x6f, 
   1741          0x65, 0xdb, 0xdf, 0xde, 0x33, 0x75, 
   1742          0x39, 0x75, 0xb1, 0x88, 0x5d, 0xd1, 
   1743          0x19, 0xb7, 0x81, 0xa9, 0xc0, 0x5e, 
   1744          0x3f, 0x9f, 0x32, 0xac, 0xd9, 0x69, 
   1745          0x6d, 0xbf, 0x19, 0xda, 0xe0, 0x5f, 
   1746          0x6d, 0xf9, 0xf3, 0xcf, 0xa7, 0x69, 
   1747          0x6f, 0xf9, 0xd2, 0xbb, 0xc1, 0x1e, 
   1748          0x4f, 0xdf, 0x36, 0x8e, 0x5b, 0xa5, 
   1749          0x2d, 0xf4, 0x8d, 0xa0, 0xcd, 0x87, 
   1750          0x7d, 0xb4, 0xb6, 0xd6, 0xc5, 0x47, 
   1751          0x2b, 0x82, 0xe5, 0x38, 0xc9, 0x33, 
   1752          0xa0, 0xc6, 0x83, 0x96, 0xc3, 0x73, 
   1753          0xb0, 0xe4, 0xa1, 0x93, 0xf9, 0x6f, 
   1754          0xa8, 0xea, 0x4b, 0xd0, 0xc7, 0x2d, 
   1755          0xee, 0x4a, 0x66, 0xd0, 0xa2, 0xaa, 
   1756          0x55, 0x93, 0xdd, 0xeb, 0x27, 0xb8, 
   1757          0x51, 0xf1, 0xff, 0xab, 0x7d, 0x29, 
   1758          0x55, 0xb1, 0x9f, 0xea, 0x38, 0xa3, 
   1759          0x55, 0xb9, 0x77, 0xab, 0x3d, 0xa0, 
   1760          0x55, 0xb9, 0x70, 0xdf, 0x3b, 0xb0, 
   1761          0x01, 0xf9, 0x33, 0xe9, 0x29, 0xb9, 
   1762          0x75, 0xd9, 0x3c, 0x89, 0xc3, 0x2e, 
   1763          0x31, 0xdb, 0x3c, 0xa9, 0x83, 0xea, 
   1764          0x77, 0x99, 0x79, 0xe8, 0xd2, 0x5a, 
   1765          0x37, 0x9b, 0x1e, 0xb9, 0xf0, 0xe0, 
   1766          0x15, 0xbb, 0x75, 0xf3, 0xbd, 0xa9, 
   1767          0x00, 0xe8, 0x26, 0x3b, 0xad, 0xb3, 
   1768          0xf4, 0x6e, 0x84, 0x32, 0x4a, 0x42, 
   1769          0xb0, 0x4c, 0xe2, 0x44, 0x40, 0x60, 
   1770          0xf0, 0x68, 0xc8, 0x60, 0x52, 0x78, 
   1771          0xbc, 0xa8, 0x48, 0x60, 0x42, 0x79, 
   1772          0xac, 0x8a, 0x6c, 0x20, 0x56, 0x79, 
   1773          0xbc, 0xa8, 0x4c, 0x24, 0x13, 0x69, 
   1774          0xbc, 0xa8, 0x48, 0x60, 0x50, 0x79, 
   1775          0xbc, 0xa8, 0x4c, 0x20, 0x57, 0x69, 
   1776          0xac, 0x8a, 0x68, 0x60, 0x52, 0x79, 
   1777          0xbc, 0xa8, 0x4c, 0x24, 0x56, 0x69, 
   1778          0xbc, 0xa8, 0x48, 0x60, 0x52, 0x79, 
   1779          0xbc, 0xa8, 0x4c, 0x02, 0x77, 0x69, 
   1780          0xbc, 0x8a, 0x68, 0x60, 0x52, 0x79, 
   1781          0xac, 0xa8, 0x4c, 0x24, 0x13, 0x69, 
   1782          0xbc, 0xa8, 0x4c, 0x20, 0x56, 0x79, 
   1783          0xbc, 0xa8, 0x48, 0x60, 0x50, 0x79, 
   1784          0xbc, 0x8a, 0x6c, 0x24, 0x13, 0x69, 
   1785          0xac, 0xa8, 0x48, 0x60, 0x52, 0x79, 
   1786          0xbc, 0xa8, 0x4c, 0x20, 0x56, 0x79, 
   1787          0xbc, 0xa8, 0x48, 0x60, 0x52, 0x79, 
   1788          0xbc, 0x8a, 0x6c, 0x24, 0x13, 0x69, 
   1789          0xac, 0xa8, 0x48, 0x42, 0x72, 0x79, 
   1790          0xbc, 0xa8, 0x4c, 0x20, 0x57, 0x69, 
   1791          0xbc, 0xa8, 0x48, 0x60, 0x52, 0x79, 
   1792          0xbc, 0x8a, 0x6c, 0x20, 0x54, 0x79, 
   1793          0xbc, 0xa8, 0x4c, 0x24, 0x13, 0x69, 
   1794          0xac, 0xa8, 0x48, 0x60, 0x52, 0x79, 
   1795          0xbc, 0xa8, 0x4c, 0x20, 0x57, 0x69, 
   1796          0xbc, 0x8a, 0x68, 0x60, 0x52, 0x79, 
   1797          0xbc, 0xa8, 0x4c, 0x24, 0x56, 0x69, 
   1798          0xac, 0xa8, 0x48, 0x60, 0x52, 0x79, 
   1799          0xbc, 0xa8, 0x4c, 0x02, 0x77, 0x69, 
   1800          0xe8, 0x4a, 0x2c, 0x41, 0x02, 0xcb, 
   1801          0xac, 0xc4, 0xab, 0x34, 0x60, 0x20, 
   1802          0xbe, 0xa0, 0xcb, 0x68, 0x21, 0x72, 
   1803          0xea, 0xca, 0x48, 0xe7, 0x51, 0x25, 
   1804          0xfc, 0xaa, 0x49, 0xf5, 0x18, 0x33, 
   1805          0x9e, 0x8a, 0x68, 0xc0, 0xe8, 0x69, 
   1806          0x9e, 0xec, 0x2d, 0x85, 0xe3, 0x2d, 
   1807          0x25, 0xdf, 0xde, 0xec, 0x7d, 0xdc, 
   1808          0x6d, 0x71, 0x38, 0xec, 0xb2, 0x52, 
   1809          0x6d, 0x77, 0xba, 0xee, 0xb7, 0xc0, 
   1810          0x6d, 0x15, 0xb9, 0x9d, 0x4d, 0xe3, 
   1811          0x2b, 0x7f, 0x75, 0xeb, 0x52, 0xbf, 
   1812          0x3f, 0x1f, 0x3c, 0x88, 0x66, 0x8e, 
   1813          0x5d, 0x7d, 0x2b, 0xd6, 0xd1, 0xb5, 
   1814          0x6d, 0x7e, 0x8d, 0x6e, 0x9d, 0xa1, 
   1815          0x1f, 0xac, 0x05, 0x4d, 0x76, 0x77, 
   1816          0x2b, 0x8c, 0x24, 0x0b, 0x45, 0x5f, 
   1817          0x0c, 0xee, 0x62, 0x96, 0xe8, 0x21, 
   1818          0x05, 0xc1, 0x9c, 0xff, 0x71, 0x93, 
   1819          0x05, 0xf9, 0x35, 0xcf, 0x13, 0x0a, 
   1820          0x27, 0xf9, 0xf2, 0xfc, 0x0f, 0x1e, 
   1821          0x5d, 0x75, 0x36, 0x9f, 0x7c, 0x25, 
   1822          0x0f, 0x71, 0xbc, 0x8c, 0x3d, 0xb4, 
   1823          0x7d, 0x5f, 0x72, 0xdf, 0x74, 0x78, 
   1824          0x2b, 0x7f, 0x5f, 0xc2, 0xcd, 0xa4, 
   1825          0x3f, 0x4e, 0xb2, 0xd6, 0xf8, 0x0e, 
   1826          0x7d, 0x82, 0x65, 0x92, 0xe7, 0x73, 
   1827          0x39, 0x4a, 0xe6, 0x86, 0xe8, 0x66, 
   1828          0x7e, 0x6a, 0x80, 0x98, 0x35, 0x8c, 
   1829          0x43, 0x9b, 0xf2, 0xd9, 0xb1, 0xef, 
   1830          0x6b, 0x31, 0x79, 0xde, 0xcd, 0x75, 
   1831          0x0b, 0x59, 0xf5, 0xb9, 0x8e, 0x5e, 
   1832          0x0d, 0xb1, 0x95, 0xfa, 0xb9, 0xe1, 
   1833          0x2f, 0xb9, 0x1c, 0xee, 0x8b, 0xf8, 
   1834          0x95, 0x33, 0x17, 0xad, 0x2f, 0xfc, 
   1835          0xd1, 0x57, 0xbe, 0x8a, 0x02, 0xfc, 
   1836          0x85, 0xd2, 0x14, 0xb4, 0x95, 0xdb, 
   1837          0xa5, 0xf4, 0xc3, 0x5e, 0xfb, 0xf0, 
   1838          };
   1839          
   1840          static  const uint8  GIVE_way_buf[] =
   1841          {
   1842          0xbc, 0xa8, 0x48, 0x60, 0x52, 0x79, 
   1843          0x9e, 0xce, 0x0e, 0x42, 0x32, 0x7f, 
   1844          0xbe, 0xa8, 0x4b, 0x23, 0x38, 0x51, 
   1845          0xbe, 0x8a, 0x2a, 0x78, 0x48, 0x3f, 
   1846          0xb2, 0x4e, 0x8e, 0x83, 0x56, 0x70, 
   1847          0xe4, 0x8c, 0xa3, 0xa0, 0x86, 0x30, 
   1848          0xc6, 0x88, 0xe2, 0xe5, 0xd9, 0x62, 
   1849          0x9c, 0xee, 0x6d, 0xf4, 0xd7, 0x89, 
   1850          0x75, 0xdb, 0x5e, 0xef, 0xf4, 0x66, 
   1851          0x05, 0xdb, 0x9c, 0xa9, 0xd6, 0x1e, 
   1852          0x45, 0xfd, 0xf8, 0x8c, 0xb0, 0x4f, 
   1853          0x0d, 0x37, 0x32, 0xec, 0xa7, 0xc6, 
   1854          0x7d, 0x37, 0x37, 0xba, 0x4c, 0xe1, 
   1855          0x6f, 0x37, 0x16, 0xb8, 0x6e, 0xe0, 
   1856          0x45, 0xfd, 0xbd, 0xe9, 0x44, 0xc7, 
   1857          0x35, 0xbd, 0xbd, 0x90, 0xba, 0xff, 
   1858          0x35, 0xf9, 0xff, 0xd4, 0xd6, 0xcf, 
   1859          0x5d, 0x75, 0x35, 0xa3, 0x6d, 0x6e, 
   1860          0x29, 0x40, 0x46, 0xd6, 0xe6, 0x42, 
   1861          0x2e, 0xa4, 0x6d, 0x94, 0xe8, 0x43, 
   1862          0xcc, 0x20, 0x01, 0xd0, 0x8a, 0xb3, 
   1863          0xfa, 0xe8, 0x0e, 0xfd, 0x30, 0x99, 
   1864          0x55, 0x11, 0x91, 0xcc, 0x59, 0xbb, 
   1865          0x15, 0x51, 0x90, 0xd8, 0x4d, 0xab, 
   1866          0x55, 0x51, 0x9d, 0x9d, 0x55, 0xb3, 
   1867          0x45, 0x5c, 0x58, 0x8d, 0x74, 0x1a, 
   1868          0x51, 0x5d, 0xd5, 0xe9, 0x35, 0x13, 
   1869          0x15, 0xf7, 0x75, 0x8c, 0x40, 0x13, 
   1870          0x55, 0xd0, 0x34, 0xae, 0x3d, 0x33, 
   1871          0x15, 0x59, 0xd4, 0xed, 0x7c, 0xa1, 
   1872          0x45, 0x3f, 0xde, 0xbd, 0x4f, 0x33, 
   1873          0x15, 0xf1, 0x7c, 0x9a, 0x2e, 0xa2, 
   1874          0x55, 0xf1, 0xed, 0xae, 0x3e, 0x2b, 
   1875          0x27, 0xdf, 0xb5, 0x8d, 0x4e, 0x83, 
   1876          0x6f, 0x75, 0x3e, 0x8c, 0x7e, 0x2a, 
   1877          0x5d, 0x75, 0xb6, 0x8f, 0x42, 0x1c, 
   1878          0x0f, 0x14, 0x9f, 0xb1, 0xef, 0x6e, 
   1879          0x3b, 0x24, 0x28, 0xf6, 0xd3, 0x57, 
   1880          0x6a, 0x60, 0x69, 0xd5, 0x18, 0x37, 
   1881          0x8c, 0x20, 0xa8, 0xe1, 0xc2, 0x77, 
   1882          0xae, 0x44, 0x8e, 0xb1, 0xcc, 0x3b, 
   1883          0x4d, 0x4c, 0x7f, 0xf5, 0xeb, 0x8b, 
   1884          0x5d, 0x7b, 0xf3, 0x95, 0xfd, 0x1c, 
   1885          0x7b, 0x7d, 0x3d, 0xd3, 0xc2, 0xbe, 
   1886          0x39, 0x31, 0xe7, 0xe5, 0xb5, 0xed, 
   1887          0x6f, 0x36, 0x21, 0xd2, 0xce, 0x7e, 
   1888          0x35, 0xda, 0x85, 0xd0, 0xfc, 0xe6, 
   1889          0x35, 0xdd, 0x5f, 0xd1, 0xb8, 0x4f, 
   1890          0x25, 0xfc, 0xb5, 0x90, 0xf8, 0x4b, 
   1891          0x2f, 0x06, 0x46, 0xc4, 0xff, 0x26, 
   1892          0x3a, 0x26, 0x64, 0xd0, 0xea, 0x74, 
   1893          0x6d, 0x56, 0x83, 0xca, 0x70, 0xa3, 
   1894          0x4f, 0x3b, 0x59, 0xba, 0xa2, 0xb9, 
   1895          0x5b, 0xd3, 0xf1, 0xd9, 0x8b, 0x46, 
   1896          0x6d, 0xbd, 0x33, 0xdb, 0xec, 0x6a, 
   1897          0x3d, 0x9b, 0x7e, 0x99, 0x8f, 0xe5, 
   1898          0x7f, 0xbd, 0x92, 0xf9, 0xca, 0x6a, 
   1899          0x0d, 0x9b, 0xfc, 0xc9, 0xac, 0xe4, 
   1900          0x2f, 0xbf, 0x99, 0xe8, 0xd1, 0xa6, 
   1901          0x7d, 0x9f, 0xbc, 0xc8, 0xe2, 0xa7, 
   1902          0x7d, 0xbd, 0xdc, 0x99, 0x7e, 0xa5, 
   1903          0xe7, 0x37, 0x14, 0xca, 0x11, 0xe0, 
   1904          0x0f, 0xff, 0xc9, 0xd4, 0x4d, 0xcb, 
   1905          0x6d, 0xdf, 0x8f, 0xc6, 0x44, 0xb4, 
   1906          0x6d, 0xfc, 0x8f, 0x7d, 0x89, 0x6a, 
   1907          };
   1908          
   1909          
   1910          /*********************************************************************
   1911          * GLOBAL VARIABLES
   1912          */
   1913          char*  const   BellNameStr_list[RING_BELL_NUM] =
   1914          {
   1915              RING1_CHINA,
   1916              RING2_CHINA,
   1917              RING3_CHINA,
   1918              RING4_CHINA
   1919          };
   1920          
   1921          /* stand for silence, all zero */
   1922          uint8   SilenceFrame[VOICE_PER_RAW_DATA_LEN];
   1923          /*********************************************************************
   1924          * LOCAL FUNCTIONS
   1925          */
   1926          static void HalResetRingParam(void);
   1927          //static bool HalCheckAudioOpen(void);
   1928          
   1929          void HalAudioInit(void)
   1930          {
   1931              InitialAudio();
   1932          
   1933              voicedqueue_init(&readctrl.bufctrl, 2 * VOICE_IDX_THRESHOLD, VOICE_PER_RAW_DATA_LEN);
   1934              voicedqueue_init(&writectrl.bufctrl, 2 * VOICE_IDX_THRESHOLD, VOICE_PER_RAW_DATA_LEN);
   1935          
   1936          #ifdef AUDIO_SERIAL
   1937              //PICTL &= ~(BV(1) | BV(2));      // rising edge trigger for P1
   1938              PICTL &= ~(BV(1));      // rising edge trigger for P1.0-1.3
   1939              PICTL |=BV(2);           // falling edge trigger for p1.7
   1940              IEN2 |= BV(4);          // enable P1 interrupt
   1941          #endif
   1942          }
   1943          
   1944          /*********************************************************************
   1945          * @fn      FillAudioBuffer
   1946          *
   1947          * @brief   Write audio buffer when app recv a piece of audio data.
   1948          *
   1949          * @param  len - the length of the audio data from rf.
   1950          *
   1951          * @return  status
   1952          
   1953          *********************************************************************/
   1954          uint8 FillAudioBuffer(uint8* pbuf, uint16 len)
   1955          {
   1956              if(pbuf == NULL || len == 0)
   1957              {
   1958                  return 0;
   1959              }
   1960              halIntState_t   intState;
   1961              HAL_ENTER_CRITICAL_SECTION(intState);
   1962          
   1963              uint16 addedLen = voicedqueue_adddata(&writectrl.bufctrl, pbuf, len);
   1964          
   1965              /* if at least one item did not pushed int, drop a item */
   1966              if(addedLen  <  len)
   1967              {
   1968                  uint8 buf[VOICE_PER_RAW_DATA_LEN];
   1969                  voicedqueue_getitem(&writectrl.bufctrl, buf);
   1970              }
   1971              if(IsWriteEmpty)
   1972              {
   1973                  WriteAudioData();
   1974                  IsWriteEmpty = false;
   1975              }
   1976              HAL_EXIT_CRITICAL_SECTION(intState);
   1977              return AUDIO_SUCCESS;
   1978          }
   1979          
   1980          void FlushAudioBuffer(void)
   1981          {
   1982              halIntState_t   intState;
   1983              HAL_ENTER_CRITICAL_SECTION(intState);
   1984              voicedqueue_flush(&writectrl.bufctrl);
   1985              HAL_EXIT_CRITICAL_SECTION(intState);
   1986          
   1987          }
   1988          /*********************************************************************
   1989          * @fn      ReadAudioData
   1990          *
   1991          * @brief   Read Audio Data from AMBE to buf.
   1992          *
   1993          * @param  None.
   1994          *
   1995          * @return  status
   1996          
   1997          *********************************************************************/
   1998          __near_func uint8 ReadAudioData(void)
   1999          {
   2000              halIntState_t   intState;
   2001              AMBE_FrameHead_t  AMBE_FrameHead;
   2002              AMBE_FrameHead.Status_0 = 0;
   2003          
   2004              // do not read if not on_audio
   2005              if(!ON_AUDIO()) return AUDIO_READ_ERR;
   2006          
   2007              HAL_ENTER_CRITICAL_SECTION(intState);
   2008              if(readctrl.idx >= VOICE_IDX_THRESHOLD)
   2009              {
   2010                  IsReadFull = true;
   2011                  HAL_EXIT_CRITICAL_SECTION(intState);
   2012                  return AUDIO_EXCEED_THR;
   2013              }
   2014          
   2015              ReadAudio((uint8*) &AMBE_FrameHead, RelayBuf, VOICE_PER_RAW_DATA_LEN);
   2016          
   2017              if(AMBE_FrameHead.Status_0 & SILENCEDETECTED)
   2018              {
   2019                  readctrl.silencesign &= ~(1 << readctrl.idx);
   2020                  readctrl.idx++;
   2021                  HAL_EXIT_CRITICAL_SECTION(intState);
   2022                  return AUDIO_SUCCESS;
   2023              }
   2024          
   2025              else
   2026              {
   2027                  if(!voicedqueue_isfull(&readctrl.bufctrl))
   2028                  {
   2029                      bool  rv = voicedqueue_additem(&readctrl.bufctrl, RelayBuf);
   2030                      if(rv)
   2031                      {
   2032                          readctrl.silencesign |= (1 << readctrl.idx);
   2033                          readctrl.idx++;
   2034                          HAL_EXIT_CRITICAL_SECTION(intState);
   2035                          return AUDIO_SUCCESS;
   2036                      }
   2037                  }
   2038              }
   2039          
   2040              HAL_EXIT_CRITICAL_SECTION(intState);
   2041              return AUDIO_READ_ERR;
   2042          }
   2043          
   2044          /*********************************************************************
   2045          * @fn      WriteAudioData
   2046          *
   2047          * @brief   Write Audio Data from buf to AMBE.
   2048          *
   2049          * @param  None.
   2050          *
   2051          * @return  status
   2052          
   2053          *********************************************************************/
   2054          
   2055          __near_func uint8 WriteAudioData(void)
   2056          {
   2057              halIntState_t   intState;
   2058              HAL_ENTER_CRITICAL_SECTION(intState);
   2059              //if (Dque_IsEmpty(&WriteBufCtrl))
   2060              if(voicedqueue_isempty(&writectrl.bufctrl))
   2061              {
   2062                  IsWriteEmpty = true;
   2063          
   2064                  WriteSilence(); //Using silence frame to fill the blank.
   2065                  HAL_EXIT_CRITICAL_SECTION(intState);
   2066                  return AUDIO_INVALID_DATA;
   2067              }
   2068              //  uint8 rv = Dque_GetItemFromHead(&WriteBufCtrl, RelayBuf);
   2069              bool rv = voicedqueue_getitem(&writectrl.bufctrl, RelayBuf);
   2070              if(rv)
   2071              {
   2072                  if(memcmp(RelayBuf, SilenceFrame, VOICE_PER_RAW_DATA_LEN) == 0)
   2073                  {
   2074                      WriteSilence();
   2075                  }
   2076                  else
   2077                  {
   2078                      WriteAudio(RelayBuf, VOICE_PER_RAW_DATA_LEN);
   2079                  }
   2080              }
   2081          
   2082              HAL_EXIT_CRITICAL_SECTION(intState);
   2083              return AUDIO_WRITE_ERR;
   2084          }
   2085          
   2086          
   2087          /*********************************************************************
   2088          * @fn      FillandWriteData
   2089          *
   2090          * @brief   fill exist voice data into buf and Write Audio Data from buf to AMBE.
   2091          *
   2092          * @param  None.
   2093          *
   2094          * @return  status
   2095          
   2096          *********************************************************************/
   2097          
   2098          /******************************************************************************
   2099          * @fn      HalAudioPoll
   2100          *
   2101          * @brief   Poll the Audio Data in readbuf. Because every 20 ms an Audio interrupt occurs and 6 byte audio
   2102          *             data is producted. So we need cache the data to the readaudiobuf to until the threshold,
   2103          *             and build a system msg to notify OS to prepare to send out the audio data from rf.
   2104          *
   2105          * @param   none
   2106          *
   2107          * @return  none
   2108          *****************************************************************************/
   2109          __near_func void HalAudioPoll(void)
   2110          {
   2111              halIntState_t   intState;
   2112              HAL_ENTER_CRITICAL_SECTION(intState);
   2113          
   2114              if((readctrl.idx >= VOICE_IDX_THRESHOLD) || voicedqueue_isfull(&readctrl.bufctrl))
   2115              {
   2116                  static uint8 silencesendcnt;
   2117                  readctrl.idx = 0;
   2118          
   2119                  if(readctrl.silencesign != 0 || ++silencesendcnt % 8 == 0)
   2120                  {
   2121                      uint16 datasize = voicedqueue_getsize(&readctrl.bufctrl);
   2122                      static uint8    seqnum = 0;
   2123                      app_mpVoice_t* pVoice = (app_mpVoice_t*) audiomsg;
   2124                      pVoice->hdr.srcaddr = MP_DevInfo.nmbr;
   2125                      pVoice->hdr.dstaddr = MP_AudioInfo.peernmbr;
   2126                      pVoice->silencemap = readctrl.silencesign;
   2127                      pVoice->seqnum = seqnum++;
   2128                      pVoice->len = datasize;
   2129          
   2130                      /* send out voice */
   2131                      voicedqueue_getalldata(&readctrl.bufctrl, (uint8*)(pVoice + 1));
   2132                      MP_SendSignalToCoord((uint8*) audiomsg, sizeof(app_mpVoice_t) + pVoice->len, MP_VOICE, false);
   2133          
   2134                      /* shedule scan time */
   2135                      MP_VoiceScanShedule();
   2136                      silencesendcnt = 0;
   2137                      readctrl.silencesign = 0;
   2138                  }
   2139              }
   2140              if(IsReadFull)
   2141              {
   2142                  ReadAudioData();
   2143                  IsReadFull = false;
   2144              }
   2145              HAL_EXIT_CRITICAL_SECTION(intState);
   2146          }
   2147          
   2148          /*********************************************************************
   2149          * @fn      RegisterForAudio
   2150          *
   2151          * @brief    The Audio handler is setup to send all audio events to
   2152          *          one task (if a task is registered)..
   2153          *
   2154          * @param  task_id  - the candidate task.
   2155          *
   2156          * @return  status
   2157          *********************************************************************/
   2158          byte RegisterForAudio(byte task_id)
   2159          {
   2160              // Allow only the first task
   2161              if(registeredAudioTaskID == NO_TASK_ID)
   2162              {
   2163                  registeredAudioTaskID = task_id;
   2164                  return true;
   2165              }
   2166              else
   2167                  return false;
   2168          }
   2169          
   2170          /*********************************************************************
   2171          * @fn      HalRingOpen
   2172          *
   2173          * @brief   Open the Ring and play ring prepared.
   2174          *
   2175          * @param  Ringname, flag.
   2176          *
   2177          * @return  None.
   2178          *********************************************************************/
   2179          void HalRingOpen(RingName name, uint8 flag)
   2180          {
   2181              StartAudio();
   2182              Ring_playing = TRUE;
   2183              Ringname = name;
   2184              Ring_openflag = flag;
   2185              if(name == RING_ANY)
   2186              {
   2187                  if(flag == OPENFLAG_ASBELL)
   2188                  {
   2189                      RingHeader = Header_List[Saved_Bell_Name];
   2190                      RingLen = Length_list[Saved_Bell_Name];
   2191                  }
   2192                  else if(flag == OPENFLAG_ASSMS_POW)
   2193                  {
   2194                      RingHeader = Header_List[Saved_SMS_Name];
   2195                      RingLen = Length_list[Saved_SMS_Name];
   2196                  }
   2197              }
   2198              else
   2199              {
   2200                  RingHeader = Header_List[name];
   2201                  RingLen = Length_list[name];
   2202              }
   2203              if(name <= RING_POWEROFF)
   2204              {
   2205                  RingToneType = RING_TYPE_BELL;
   2206          
   2207              }
   2208              else if(name >= RING_RING && name <= RING_BUSY)
   2209              {
   2210                  RingToneType = RING_TYPE_SOUND;
   2211              }
   2212              else if(name >= RING_DIAL && name <= RING_DIGITPOUND)
   2213                  RingToneType = RING_TYPE_PAD;
   2214              else
   2215                  RingToneType = RING_TYPE_NONE;
   2216          
   2217              Ring_PlayPaceCnt = 0;
   2218              Ring_PlayBeatCnt = 0;
   2219              Ring_PlayTotalCnt = 0;
   2220          
   2221              return;
   2222          }
   2223          /*********************************************************************
   2224          * @fn      HalRingSetGain
   2225          *
   2226          * @brief  Set Gain of Bell,Sound and pad
   2227          *
   2228          * @param  gain_type, gain_level.
   2229          *
   2230          * @return  none
   2231          *********************************************************************/
   2232          void HalRingSetGain(uint8 gain_type,  uint8 gain_level)
   2233          {
   2234              if(gain_level < MAX_GAIN_LEVEL)
   2235              {
   2236                  switch(gain_type)
   2237                  {
   2238                  case RING_TYPE_BELL:
   2239                      Ring_BellGainIdx = gain_level;
   2240                      break;
   2241                  case RING_TYPE_SOUND:
   2242                      Ring_SoundGainIdx = gain_level;
   2243                      break;
   2244                  case RING_TYPE_PAD:
   2245                      Ring_PadGainIdx = gain_level;
   2246                      break;
   2247                  }
   2248              }
   2249              return;
   2250          }
   2251          /*********************************************************************
   2252          * @fn      HalRingGetGain
   2253          *
   2254          * @brief   Get Gain of Bell,Sound and pad
   2255          *
   2256          * @param   gain_type, point of gain_level.
   2257          *
   2258          * @return none
   2259          *********************************************************************/
   2260          
   2261          void HalRingGetGain(uint8 gain_type,  uint8* pGain_level)
   2262          {
   2263              switch(gain_type)
   2264              {
   2265              case RING_TYPE_BELL:
   2266                  *pGain_level = Ring_BellGainIdx;
   2267                  break;
   2268              case RING_TYPE_SOUND:
   2269                  *pGain_level = Ring_SoundGainIdx;
   2270                  break;
   2271              case RING_TYPE_PAD:
   2272                  *pGain_level = Ring_PadGainIdx;
   2273                  break;
   2274              }
   2275              return;
   2276          }
   2277          /*********************************************************************
   2278          * @fn      HalRingGetType
   2279          *
   2280          * @brief   Get Tone Type,should be
   2281          *
   2282          * @param   none
   2283          *
   2284          * @return   RING_TYPE_NONE,RING_TYPE_BELL,RING_TYPE_SOUND,RING_TYPE_PAD.
   2285          *********************************************************************/
   2286          
   2287          //uint8 HalRingGetType(void)
   2288          //{
   2289          //  return RingToneType;
   2290          //}
   2291          uint8 HalRingGetPlayingName(void)
   2292          {
   2293              return Ringname;
   2294          }
   2295          uint8 HalRingGetOpenFlag(void)
   2296          {
   2297              return Ring_openflag;
   2298          }
   2299          
   2300          void  HalRingSetBellName(RingName name)
   2301          {
   2302              if(name >= RING_BELL_1 && name <= RING_BELL_4)
   2303              {
   2304                  Saved_Bell_Name = name;
   2305              }
   2306          }
   2307          
   2308          uint8  HalRingGetBellName(void)
   2309          {
   2310              return Saved_Bell_Name;
   2311          }
   2312          void  HalRingSetSMSBell(RingName name)
   2313          {
   2314              if(name >= RING_BELL_1 && name <= RING_BELL_4)
   2315              {
   2316                  Saved_SMS_Name = name;
   2317              }
   2318          }
   2319          uint8  HalRingGetSMSBell(void)
   2320          {
   2321              return Saved_SMS_Name;
   2322          }
   2323          
   2324          void  HalRingGetBellNameStr(uint8 index, uint8* p)
   2325          {
   2326              strcpy((char *) p, (char *) BellNameStr_list[index]);
   2327              return;
   2328          }
   2329          
   2330          void  HalRingGetSMSNameStr(uint8 index, uint8* p)
   2331          {
   2332              strcpy((char *) p, (char *) BellNameStr_list[index]);
   2333              return;
   2334          }
   2335          
   2336          void  HalRingSetShakeCtl(bool shakectl)
   2337          {
   2338              Saved_shakeen = shakectl;
   2339              if(!shakectl)
   2340              {
   2341                  shake_ctrl(false);
   2342              }
   2343          }
   2344          
   2345          bool  HalRingGetShakeCtl(void)
   2346          {
   2347              return Saved_shakeen;
   2348          }
   2349          
   2350          /*********************************************************************
   2351          * @fn      HalRingPlay
   2352          *
   2353          * @brief   Play a pace of Ring.
   2354          *
   2355          * @param  None.
   2356          *
   2357          * @return  RING_SUCESS,RING_ENDED,RING_FAILED.
   2358          *********************************************************************/
   2359          
   2360          uint8 HalRingPlay()
   2361          {
   2362              if(RingHeader != NULL && ((Ring_PlayTotalCnt == 0) || AudioIsPackEmpty()))
   2363              {
   2364                  //P1IFG&= ~0x02;
   2365                  //while (DPE == 0);
   2366          
   2367                  if(Ring_PlayPaceCnt < RingLen)
   2368                  {
   2369                      RingPace_t pace = RingHeader[Ring_PlayPaceCnt];
   2370          
   2371                      uint16 gain;
   2372          
   2373                      if(RingToneType == RING_TYPE_BELL)
   2374                      {
   2375                          gain = BellGainList[Ring_BellGainIdx];
   2376                      }
   2377                      else if(RingToneType == RING_TYPE_SOUND)
   2378                      {
   2379                          gain = SoundGainList[Ring_SoundGainIdx];
   2380                      }
   2381                      else if(RingToneType == RING_TYPE_PAD)
   2382                      {
   2383                          gain = PadGainList[Ring_PadGainIdx];
   2384                      }
   2385          
   2386                      PlayNote(pace.Node1, pace.Node2, gain);
   2387          
   2388                      /* situations that play until timeout */
   2389                      if((RingToneType == RING_TYPE_BELL && Ring_openflag == OPENFLAG_ASBELL && Ring_PlayTotalCnt > BELL_TIMEOUT)     //called side
   2390                              || (RingHeader == Ring &&  Ring_PlayTotalCnt > BELL_TIMEOUT)
   2391                              || (RingHeader == Busy &&  Ring_PlayTotalCnt > BUSY_TIMEOUT)
   2392                              //|| (Ring_Name== RING_RING&&  Ring_PlayTotalCnt > BELL_TIMEOUT) //calling side normal voice
   2393                              // || (Ring_Name == RING_BUSY&&  Ring_PlayTotalCnt > BUSY_TIMEOUT) //calling side busy voice.
   2394                        )
   2395                      {
   2396                          //HalRingClose();
   2397                          HalResetRingParam();
   2398                          return RING_ENDED;
   2399                      }
   2400          
   2401                      Ring_PlayTotalCnt++;
   2402                      if(Ring_PlayBeatCnt < pace.Beat - 1)
   2403                      {
   2404                          Ring_PlayBeatCnt++;
   2405                      }
   2406                      else
   2407                      {
   2408                          Ring_PlayPaceCnt++;
   2409                          Ring_PlayBeatCnt = 0;
   2410                      }
   2411                      return RING_SUCESS;
   2412                  }
   2413                  else
   2414                  {
   2415                      Ring_PlayPaceCnt = 0;
   2416                      Ring_PlayBeatCnt = 0;
   2417          
   2418                      /*situations that play once */
   2419                      if(RingToneType == RING_TYPE_PAD
   2420                              || (RingToneType == RING_TYPE_BELL && Ring_openflag == OPENFLAG_ASSMS_POW)
   2421                              || (RingToneType == RING_TYPE_BELL && Ring_openflag == OPENFLAG_ASONCE)
   2422                        )
   2423                      {
   2424                          HalResetRingParam();
   2425                          return RING_ENDED;
   2426                      }
   2427                  }
   2428              }
   2429              return RING_FAILED;
   2430          }
   2431          
   2432          bool HalRingIsPlaying(void)
   2433          {
   2434              return Ring_playing;
   2435          }
   2436          void HalShakePlay(void)
   2437          {
   2438          
   2439          }
   2440          /*********************************************************************
   2441          * @fn      HalRingClose
   2442          *
   2443          * @brief   Close Playing Ring.
   2444          *
   2445          * @param  None.
   2446          *
   2447          * @return  None.
   2448          *********************************************************************/
   2449          
   2450          void HalRingClose(void)
   2451          {
   2452              StopAudio();
   2453              HalResetRingParam();
   2454              shake_ctrl(false);
   2455          }
   2456          
   2457          void HalResetRingParam(void)
   2458          {
   2459              Ring_playing = FALSE;
   2460              RingHeader = NULL;
   2461              RingLen = 0;
   2462              RingToneType = RING_TYPE_NONE;
   2463              Ring_PlayPaceCnt = 0;
   2464              Ring_PlayBeatCnt = 0;
   2465              Ring_PlayTotalCnt = 0;
   2466          }
   2467          
   2468          /*********************************************************************
   2469          * @fn      HalVoiceBellOpen
   2470          *
   2471          * @brief   Open the Audio for Voice bell
   2472          *
   2473          * @param  None.
   2474          *
   2475          * @return  None.
   2476          *********************************************************************/
   2477          void HalVoiceBellOpen(void)
   2478          {
   2479              //set MP status state-machine.
   2480          
   2481              if(!AudioIsEnabled())
   2482                  StartAudio();
   2483          
   2484              P1IEN |= (BV(0) | BV(2)); //P1.0 P1.2 interrupt enable
   2485          }
   2486          
   2487          /*********************************************************************
   2488          * @fn      HalAudioOpen
   2489          *
   2490          * @brief   Open the Audio setting and do some prepare work.
   2491          *
   2492          * @param  None.
   2493          *
   2494          * @return  None.
   2495          *********************************************************************/
   2496          void HalAudioOpen(void)
   2497          {
   2498              //set MP status state-machine.
   2499          
   2500              SET_ON_AUDIO(); //FIXME: No way to driver state-machine for called party.
   2501          
   2502              if(!AudioIsEnabled())
   2503                  StartAudio();
   2504          
   2505              P1IEN |= (BV(0) | BV(2)); //P1.0 P1.2 interrupt enable
   2506          }
   2507          
   2508          /*********************************************************************
   2509          * @fn      HalAudioClose
   2510          *
   2511          * @brief   Close the audio setting and do some clear work.
   2512          *
   2513          * @param  None.
   2514          *
   2515          * @return  None.
   2516          *********************************************************************/
   2517          void HalAudioClose(void)
   2518          {
   2519              StopAudio();
   2520          }
   2521          
   2522          
   2523          uint8 HalFillVoiceBellbuf(void)
   2524          {
   2525              halIntState_t   intState;
   2526              uint16 maxBufSize = voicedqueue_getmaxsize(&writectrl.bufctrl);
   2527              uint16 datasize = voicedqueue_getsize(&writectrl.bufctrl);
   2528          
   2529              if(datasize < maxBufSize)
   2530              {
   2531                  uint16 bufleftlen =  Hal_VoiceBell_info.bufLen - Hal_VoiceBell_info.writedLen;
   2532                  uint16 needwirtelen = maxBufSize - datasize;
   2533          
   2534                  if((bufleftlen == 0)&&(datasize == 0))
   2535                  {
   2536                      return VOICEBELL_SEND_COMPLETE;
   2537                  }
   2538          
   2539                  HAL_ENTER_CRITICAL_SECTION(intState);
   2540          
   2541                  if(needwirtelen < bufleftlen)
   2542                  {
   2543                      FillAudioBuffer(Hal_VoiceBell_info.pbuf + Hal_VoiceBell_info.writedLen, needwirtelen);
   2544                      Hal_VoiceBell_info.writedLen += needwirtelen;
   2545          
   2546                  }
   2547                  else if(needwirtelen >= bufleftlen)
   2548                  {
   2549                      FillAudioBuffer(Hal_VoiceBell_info.pbuf + Hal_VoiceBell_info.writedLen, bufleftlen /*maxBufSize-datasize*/);
   2550                      Hal_VoiceBell_info.writedLen = Hal_VoiceBell_info.bufLen;
   2551                      //HAL_EXIT_CRITICAL_SECTION(intState);
   2552                      //return VOICEBELL_SEND_COMPLETE;
   2553                  }
   2554                  HAL_EXIT_CRITICAL_SECTION(intState);
   2555              }
   2556          
   2557          
   2558              return VOICEBELL_SEND_ING;
   2559          }
   2560          
   2561          
   2562          bool HalSetVoiceBellBuf(VoiceBellName_t  name)
   2563          {
   2564              memset(&Hal_VoiceBell_info, 0, sizeof(Hal_VoiceBell_info));
   2565              voicedqueue_flush(&writectrl.bufctrl);
   2566          
   2567              switch(name)
   2568              {
   2569          
   2570              case VOICEBELL_OUTOFREACH:
   2571              {
   2572                  Hal_VoiceBell_info.pbuf = (uint8*)OutofReach_buf;
   2573                  Hal_VoiceBell_info.bufLen = sizeof(OutofReach_buf);
   2574                  Hal_VoiceBell_info.writedLen = 0;
   2575                  break;
   2576              }
   2577              case VOICEBELL_BUSY:
   2578              {
   2579                  Hal_VoiceBell_info.pbuf = (uint8*)Busy_buf;
   2580                  Hal_VoiceBell_info.bufLen = sizeof(Busy_buf);
   2581                  Hal_VoiceBell_info.writedLen = 0;
   2582                  break;
   2583              }
   2584              case VOICEBELL_NOBODY:
   2585              {
   2586                  Hal_VoiceBell_info.pbuf = (uint8*)Nobody_buf;
   2587                  Hal_VoiceBell_info.bufLen = sizeof(Nobody_buf);
   2588                  Hal_VoiceBell_info.writedLen = 0;
   2589                  break;
   2590              }
   2591              case VOICEBELL_HELP:
   2592              {
   2593                  Hal_VoiceBell_info.pbuf = (uint8*)Help_buf;
   2594                  Hal_VoiceBell_info.bufLen = sizeof(Help_buf);
   2595                  Hal_VoiceBell_info.writedLen = 0;
   2596                  break;
   2597              }
   2598              case VOICEBELL_RETREAT:
   2599              {
   2600                  Hal_VoiceBell_info.pbuf = (uint8*)Retreat_buf;
   2601                  Hal_VoiceBell_info.bufLen = sizeof(Retreat_buf);
   2602                  Hal_VoiceBell_info.writedLen = 0;
   2603                  break;
   2604              }
   2605          
   2606              case VOICEBELL_SPEED:
   2607              {
   2608                  Hal_VoiceBell_info.pbuf = (uint8*)Speed_buf;
   2609                  Hal_VoiceBell_info.bufLen = sizeof(Speed_buf);
   2610                  Hal_VoiceBell_info.writedLen = 0;
   2611                  break;
   2612              }
   2613          
   2614              case VOICEBELL_HELP_ACK:
   2615              {
   2616                  Hal_VoiceBell_info.pbuf = (uint8*)Help_ack_buf;
   2617                  Hal_VoiceBell_info.bufLen = sizeof(Help_ack_buf);
   2618                  Hal_VoiceBell_info.writedLen = 0;
   2619                  break;
   2620              }
   2621              case VOICEBELL_SLOW_DOWM:
   2622              {
   2623                  Hal_VoiceBell_info.pbuf = (uint8*)Slow_dowm_buf;
   2624                  Hal_VoiceBell_info.bufLen = sizeof(Slow_dowm_buf);
   2625                  Hal_VoiceBell_info.writedLen = 0;
   2626                  break;
   2627              }
   2628              case VOICEBELL_AVOID:
   2629              {
   2630                  Hal_VoiceBell_info.pbuf = (uint8*)Avoid_buf;
   2631                  Hal_VoiceBell_info.bufLen = sizeof(Avoid_buf);
   2632                  Hal_VoiceBell_info.writedLen = 0;
   2633                  break;
   2634              }
   2635              case VOICEBELL_GIVE_WAY:
   2636              {
   2637                  Hal_VoiceBell_info.pbuf = (uint8*)GIVE_way_buf;
   2638                  Hal_VoiceBell_info.bufLen = sizeof(GIVE_way_buf);
   2639                  Hal_VoiceBell_info.writedLen = 0;
   2640                  break;
   2641              }
   2642          
   2643              default:
   2644                  return false;
   2645              }
   2646              return true;
   2647          }
   2648          

   Maximum stack usage in bytes:

     Function                    ISTACK PSTACK XSTACK
     --------                    ------ ------ ------
     FillAudioBuffer                 0      0     30
       -> voicedqueue_adddata        0      0     40
       -> voicedqueue_getitem        0      0     36
       -> WriteAudioData             0      0     36
     FlushAudioBuffer                0      0      9
       -> voicedqueue_flush          0      0     18
     HalAudioClose                   2      0      0
       -> StopAudio                  4      0      0
     HalAudioInit                    2      0      0
       -> InitialAudio               4      0      0
       -> voicedqueue_init           4      0      0
       -> voicedqueue_init           4      0      0
     HalAudioOpen                    2      0      0
       -> MP_SetStatus               4      0      0
       -> AudioIsEnabled             4      0      0
       -> StartAudio                 4      0      0
     HalAudioPoll                    0      0      9
       -> voicedqueue_isfull         0      0     18
       -> voicedqueue_getsize        0      0     18
       -> voicedqueue_getalldata     0      0     18
       -> MP_SendSignalToCoord       0      0     18
       -> MP_VoiceScanShedule        0      0     18
       -> ReadAudioData              0      0     18
     HalFillVoiceBellbuf             2      0     10
       -> voicedqueue_getmaxsize     0      0     20
       -> voicedqueue_getsize        0      0     20
       -> FillAudioBuffer            0      0     20
       -> FillAudioBuffer            0      0     20
     HalResetRingParam               2      0     10
     HalRingClose                    2      0      0
       -> StopAudio                  4      0      0
       -> HalResetRingParam          4      0      0
       -> shake_ctrl                 4      0      0
     HalRingGetBellName              2      0      0
     HalRingGetBellNameStr           0      0      9
       -> strcpy                     0      0     18
     HalRingGetGain                  3      0      0
     HalRingGetOpenFlag              2      0      0
     HalRingGetPlayingName           2      0      0
     HalRingGetSMSBell               2      0      0
     HalRingGetSMSNameStr            0      0      9
       -> strcpy                     0      0     18
     HalRingGetShakeCtl              2      0      0
     HalRingIsPlaying                2      0      0
     HalRingOpen                     0      0      9
       -> StartAudio                 0      0     18
     HalRingPlay                     2      0     12
       -> AudioIsPackEmpty           0      0     20
       -> PlayNote                   0      0     24
       -> HalResetRingParam          0      0     20
     HalRingSetBellName              2      0      0
     HalRingSetGain                  2      0      0
     HalRingSetSMSBell               2      0      0
     HalRingSetShakeCtl              0      0      9
       -> shake_ctrl                 0      0     18
     HalSetVoiceBellBuf              0      0     12
       -> memset                     0      0     24
       -> voicedqueue_flush          0      0     20
     HalShakePlay                    0      0      0
     HalVoiceBellOpen                2      0      0
       -> AudioIsEnabled             4      0      0
       -> StartAudio                 4      0      0
     ReadAudioData                   1      0     28
       -> MP_JudgeStatus             0      0     38
       -> ReadAudio                  0      0     38
       -> voicedqueue_isfull         0      0     38
       -> voicedqueue_additem        0      0     38
     RegisterForAudio                2      0      0
     WriteAudioData                  0      0     29
       -> voicedqueue_isempty        0      0     18
       -> WriteSilence               0      0     18
       -> voicedqueue_getitem        0      0     18
       -> memcmp                     0      0     22
       -> WriteSilence               0      0     18
       -> WriteAudio                 0      0     18


   Segment part sizes:

     Function/Label                           Bytes
     --------------                           -----
     PICTL                                       1
     P1IEN                                       1
     IEN2                                        1
     _A_IEN0                                     1
     registeredAudioTaskID                       1
     RelayBuf                                    6
     Hal_VoiceBell_info                          6
     writectrl                                   9
     readctrl                                    9
     audiomsg                                   90
     IsWriteEmpty                                1
     IsReadFull                                  1
     RingHeader                                  2
     RingLen                                     2
     Ringname                                    1
     RingToneType                                1
     Ring_openflag                               1
     Ring_playing                                1
     Ring_PlayPaceCnt                            2
     Ring_PlayBeatCnt                            2
     Ring_PlayTotalCnt                           2
     Saved_Bell_Name                             1
     Saved_SMS_Name                              1
     Saved_shakeen                               1
     Ring_BellGainIdx                            1
     Ring_SoundGainIdx                           1
     Ring_PadGainIdx                             1
     Bell_1                                    138
     Bell_2                                     84
     Bell_3                                     78
     Bell_4                                     30
     PowerOn                                    30
     PowerOff                                   30
     Ring                                       12
     Busy                                       12
     Dial                                        6
     Digit1                                      6
     Digit2                                      6
     Digit3                                      6
     Digit4                                      6
     Digit5                                      6
     Digit6                                      6
     Digit7                                      6
     Digit8                                      6
     Digit9                                      6
     Digit0                                      6
     DigitStar                                   6
     DigitPound                                  6
     BellGainList                               10
     SoundGainList                              10
     PadGainList                                10
     Header_List                                44
     Length_list                                44
     OutofReach_buf                           2040
     Busy_buf                                 1722
     Nobody_buf                               1914
     Help_buf                                  282
     Retreat_buf                               366
     Speed_buf                                 930
     Help_ack_buf                              378
     Slow_dowm_buf                             762
     Avoid_buf                                 738
     GIVE_way_buf                              390
     BellNameStr_list                            8
     SilenceFrame                                6
     HalAudioInit                               41
     ??Subroutine6_0                             7
     FillAudioBuffer                           109
     FlushAudioBuffer                           24
     ??Subroutine5_0                             5
     ReadAudioData                             212
     ?Subroutine3                                5
     WriteAudioData                            111
     HalAudioPoll                              204
     silencesendcnt                              1
     seqnum                                      1
     RegisterForAudio                           25
     HalRingOpen                               217
     HalRingSetGain                             45
     HalRingGetGain                             41
     HalRingGetPlayingName                       9
     ?Subroutine4                                4
     HalRingGetOpenFlag                          9
     HalRingSetBellName                         19
     HalRingGetBellName                          9
     HalRingSetSMSBell                          19
     HalRingGetSMSBell                           7
     ?Subroutine1                               30
     HalRingGetBellNameStr                       3
     HalRingGetSMSNameStr                        3
     HalRingSetShakeCtl                         20
     HalRingGetShakeCtl                          9
     HalRingPlay                               419
     ?Subroutine2                                5
     HalRingIsPlaying                           10
     HalShakePlay                                3
     HalRingClose                               18
     HalResetRingParam                          46
     ?Subroutine0                                5
     HalVoiceBellOpen                           16
     HalAudioOpen                               21
     HalAudioClose                              10
     HalFillVoiceBellbuf                       194
     HalSetVoiceBellBuf                        276
     ?<Initializer for registeredAudioTaskID>    1
     ?<Initializer for Saved_Bell_Name>          1
     ?<Initializer for Saved_SMS_Name>           1
     ?<Initializer for Ring_BellGainIdx>         1
     ?<Initializer for Ring_SoundGainIdx>        1
     ?<Initializer for Ring_PadGainIdx>          1
     ??HalAudioInit?relay                        6
     ??FillAudioBuffer?relay                     6
     ??FlushAudioBuffer?relay                    6
     ??RegisterForAudio?relay                    6
     ??HalRingOpen?relay                         6
     ??HalRingSetGain?relay                      6
     ??HalRingGetGain?relay                      6
     ??HalRingGetPlayingName?relay               6
     ??HalRingGetOpenFlag?relay                  6
     ??HalRingSetBellName?relay                  6
     ??HalRingGetBellName?relay                  6
     ??HalRingSetSMSBell?relay                   6
     ??HalRingGetSMSBell?relay                   6
     ??HalRingGetBellNameStr?relay               6
     ??HalRingGetSMSNameStr?relay                6
     ??HalRingSetShakeCtl?relay                  6
     ??HalRingGetShakeCtl?relay                  6
     ??HalRingPlay?relay                         6
     ??HalRingIsPlaying?relay                    6
     ??HalShakePlay?relay                        6
     ??HalRingClose?relay                        6
     ??HalResetRingParam?relay                   6
     ??HalVoiceBellOpen?relay                    6
     ??HalAudioOpen?relay                        6
     ??HalAudioClose?relay                       6
     ??HalFillVoiceBellbuf?relay                 6
     ??HalSetVoiceBellBuf?relay                  6
     ?<Constant "\301\345\311\3711">             6
     ?<Constant "\301\345\311\3712">             6
     ?<Constant "\301\345\311\3713">             6
     ?<Constant "\301\345\311\3714">             6

 
  1 678 bytes in segment BANKED_CODE
    162 bytes in segment BANK_RELAYS
    532 bytes in segment NEAR_CODE
      4 bytes in segment SFR_AN
      6 bytes in segment XDATA_I
      6 bytes in segment XDATA_ID
 10 164 bytes in segment XDATA_ROM_C
    145 bytes in segment XDATA_Z
 
  2 378 bytes of CODE  memory
 10 164 bytes of CONST memory
      0 bytes of DATA  memory (+ 4 bytes shared)
    151 bytes of XDATA memory

Errors: none
Warnings: none
