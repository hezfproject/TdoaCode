###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.60.1.40026 for 8051             23/Oct/2018  17:27:22 #
# Copyright (C) 2004-2010 IAR Systems AB.                                     #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\src\MobilePhone_global.c                 #
#    Command line       =  E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\src\MobilePhone_global.c -D              #
#                          xSMS_TEMPLATE -D MENU_CLOCKFORMAT -D               #
#                          CELLSWITCH_DEBUG -D MP_INFORMATION -D              #
#                          HOLD_AUTO_START -D SMS_SENDBOX -D NEW_MENU_LIB -D  #
#                          WATCHDOG=TRUE -D NEW_DOUBLE_NVID_OP -D             #
#                          AUDIO_SERIAL -D NWK_AUTO_POLL -D                   #
#                          OSC32K_CRYSTAL_INSTALLED=FALSE -D xAUDIO_TEST -D   #
#                          xSINGLE_AUDIO_TEST -D xMULTIAUDIO_TEST -D          #
#                          xREFLECTOR -D xLCD_SUPPORTED -D HAL_LCD=FALSE -D   #
#                          HAL_AUDIO=TRUE -D HAL_SPI=FALSE -D HAL_UART=FALSE  #
#                          -D HAL_LED=FALSE -D HAL_AES=FALSE -D HAL_KEY=TRUE  #
#                          -D IDX_THRESHOLD=12 -D xMACNODEBUG -D              #
#                          xMAC_NO_PARAM_CHECK -D HAL_AUDIO=TRUE -D           #
#                          HAL_DMA=TRUE -D HAL_AES=FALSE -D                   #
#                          MAC_CFG_TX_DATA_MAX=8 -D MAC_CFG_TX_MAX=12 -D      #
#                          MAC_CFG_RX_MAX=8 -lcN E:\p4\main\Zigbee\cc2530\min #
#                          e_project_voice\app\MobilePhone\iar\Release\List\  #
#                          -lb E:\p4\main\Zigbee\cc2530\mine_project_voice\ap #
#                          p\MobilePhone\iar\Release\List\ -o                 #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\Release\Obj\ -e                      #
#                          --require_prototypes --no_unroll --no_inline       #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\p4\main\Zigbee\cc2530\mine_project_voice\app #
#                          \MobilePhone\iar\..\src\ -I                        #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\src\MenuLib\ -I                   #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\src\MenuLib\util\ -I              #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\third_party\TIMAC-CC2530-1. #
#                          3.1\COMPONENTS\MAC\INCLUDE\ -I                     #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\third_party\TIMAC-CC2530-1. #
#                          3.1\COMPONENTS\MAC\HIGH_LEVEL\ -I                  #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\third_party\TIMAC-CC2530-1. #
#                          3.1\COMPONENTS\MAC\LOW_LEVEL\ -I                   #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\third_party\TIMAC-CC2530-1. #
#                          3.1\COMPONENTS\MAC\LOW_LEVEL\SRF04\ -I             #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\third_party\TIMAC-CC2530-1. #
#                          3.1\COMPONENTS\MAC\LOW_LEVEL\SRF04\SINGLE_CHIP\    #
#                          -I E:\p4\main\Zigbee\cc2530\mine_project_voice\app #
#                          \MobilePhone\iar\..\..\..\third_party\TIMAC-CC2530 #
#                          -1.3.1\COMPONENTS\OSAL\INCLUDE\ -I                 #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\third_party\TIMAC-CC2530-1. #
#                          3.1\COMPONENTS\OSAL\MCU\CC2530\ -I                 #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\third_party\TIMAC-CC2530-1. #
#                          3.1\COMPONENTS\SERVICES\SADDR\ -I                  #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\third_party\TIMAC-CC2530-1. #
#                          3.1\COMPONENTS\SERVICES\SDATA\ -I                  #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\third_party\TIMAC-CC2530-1. #
#                          3.1\COMPONENTS\MT\ -I E:\p4\main\Zigbee\cc2530\min #
#                          e_project_voice\app\MobilePhone\iar\..\..\..\..\.. #
#                          \..\common\ -I E:\p4\main\Zigbee\cc2530\mine_proje #
#                          ct_voice\app\MobilePhone\iar\..\..\..\..\..\common #
#                          \lcd\ -I E:\p4\main\Zigbee\cc2530\mine_project_voi #
#                          ce\app\MobilePhone\iar\..\..\..\..\..\..\common\2g #
#                          \ -I E:\p4\main\Zigbee\cc2530\mine_project_voice\a #
#                          pp\MobilePhone\iar\..\..\..\..\..\..\ -I           #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\driver\ -I                  #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\util\ -I                    #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\driver\include\ -I          #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\driver\common\ -I           #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\driver\MobilePhone\ -I      #
#                          E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\..\..\..\driver\MobilePhone\audio\   #
#                          -I E:\p4\main\Zigbee\cc2530\mine_project_voice\app #
#                          \MobilePhone\iar\..\..\..\driver\MobilePhone\commo #
#                          n\ -I E:\p4\main\Zigbee\cc2530\mine_project_voice\ #
#                          app\MobilePhone\iar\..\..\..\driver\MobilePhone\ke #
#                          y\ -I E:\p4\main\Zigbee\cc2530\mine_project_voice\ #
#                          app\MobilePhone\iar\..\..\..\driver\MobilePhone\lc #
#                          d\ -I E:\p4\main\Zigbee\cc2530\mine_project_voice\ #
#                          app\MobilePhone\iar\..\..\..\driver\MobilePhone\io #
#                          expand\ -I "C:\Program Files\IAR Systems\Embedded  #
#                          Workbench 5.4\8051\INC\" -I "C:\Program Files\IAR  #
#                          Systems\Embedded Workbench 5.4\8051\INC\CLIB\"     #
#                          -Ohs                                               #
#    List file          =  E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\Release\List\MobilePhone_global.lst  #
#    Object file        =  E:\p4\main\Zigbee\cc2530\mine_project_voice\app\Mo #
#                          bilePhone\iar\Release\Obj\MobilePhone_global.r51   #
#                                                                             #
#                                                                             #
###############################################################################

E:\p4\main\Zigbee\cc2530\mine_project_voice\app\MobilePhone\src\MobilePhone_global.c
      1          /**************************************************************************************************
      2          Filename:       MP_global.c
      3          Revised:        $Date: 2011/08/24 18:07:25 $
      4          Revision:       $Revision: 1.8 $
      5          
      6          Description:  User definable common Parameters.
      7          **************************************************************************************************/
      8          /*********************************************************************
      9          * INCLUDES
     10          */
     11          #include "iocc2530.h"
     12          #include "App_cfg.h"
     13          #include "key.h"
     14          #include "ZComdef.h"
     15          #if (defined HAL_AUDIO) && (HAL_AUDIO == TRUE)
     16          #include "hal_audio.h"
     17          #include "KeyAudioISR.h"
     18          #include "lcd_serial.h"
     19          #endif
     20          #include "numtrans.h"
     21          #include "hal_drivers.h"
     22          #include "mac_pib.h"
     23          #include "OnBoard.h"
     24          #include "StringUtil.h"
     25          
     26          /* app */
     27          #include "MobilePhone.h"
     28          #include "MobilePhone_Function.h"
     29          #include "MobilePhone_global.h"
     30          
     31          /*********************************************************************
     32          * typedefs
     33          */
     34          /*********************************************************************
     35          * LOCAL VARIABLES
     36          */
     37          /* common device info */
     38          MP_DevInfo_t   MP_DevInfo;
     39          MP_AudioInfo_t MP_AudioInfo;
     40          MP_NwkInfo_t   MP_NwkInfo;
     41          MP_ScanInfo_t  MP_ScanInfo;
     42          MP_CellCfg_info_t MP_CellInfo;
     43          MP_SeqNums_t MP_seqnums;
     44          /*********************************************************************
     45          * LOCAL VARIABLES
     46          */
     47          
     48          /*identify current MP status: idle/calling/called/talking*/
     49          static uint8 nWorkStatus;
     50          static  const int8 RSSI_table[] =
     51          {
     52              -80,     // RSSI: -80
     53              -70,     // RSSI: -70
     54              -50,   // RSSI: -50
     55              -30,    // RSSI: -30
     56          };
     57          /*********************************************************************
     58          * LOCAL FUNCTIONS
     59          */
     60          /*********************************************************************
     61          * FUNCTIONS
     62          */
     63          bool MP_JudgeStatus(uint8 WorkStatus)
     64          {
     65              return (nWorkStatus == WorkStatus);
     66          }
     67          
     68          void MP_SetStatus(uint8 WorkStatus)
     69          {
     70              nWorkStatus = WorkStatus;
     71          }
     72          
     73          void MP_ResetAudio(void)
     74          {
     75              MP_AudioInfo.peernmbr = APP_INVALIDARMADDR;
     76              memset(MP_AudioInfo.peer_termnbr.nbr, 0xFF, NMBRDIGIT);
     77              MP_AudioInfo.IsTalkWithGateWay = FALSE;
     78          
     79              AudioSetInputGain(INGAIN_PHONE2PHONE);
     80              MP_ResetFrameblk();
     81              HalRingClose();
     82              HalAudioClose();
     83              HalResetBackLightEvent();
     84              FlushAudioBuffer();
     85          }
     86          
     87          void MP_StartTalk(void)
     88          {
     89              HalResetBackLightEvent();
     90              shake_ctrl(false);
     91              Hal_RingStop();
     92              HalAudioOpen();
     93          }
     94          
     95          void MP_EndTalk(void)
     96          {
     97              MP_SendCmd(MP_UP_CLOSE, &MP_AudioInfo.peer_termnbr, MP_AudioInfo.cmdseqnum);
     98          
     99              MP_ResetAudio();//resetaudio must after  sendcmd   MP_UP_CLOSE
    100          
    101              /* stop sending dialup and accept */
    102              MP_StopSignalRetrys();
    103          
    104              /* signal retry */
    105              MP_AudioInfo.close_cnt = 0;
    106              MP_AudioInfo.retrying_bitmap |= MP_CLOSE_RETRY_BIT;
    107              MP_start_timerEx(MP_TaskId,MP_CLOSE_RETRY_EVENT, 100);
    108          }
    109          
    110          uint8 MP_Rssi2Level(int8 rssi)
    111          {
    112              uint8 len = sizeof(RSSI_table) / sizeof(RSSI_table[0]);
    113              uint8 i;
    114          
    115              for(i = 0; i < len; i++)
    116              {
    117                  if(rssi < RSSI_table[i])
    118                  {
    119                      return i;
    120                  }
    121              }
    122              return len;
    123          }
    124          
    125          uint8 MP_SendCmd(uint8  cmdtype, const app_termNbr_t *dstnmbr, uint16 seqnum)
    126          {
    127              app_mpCmd_t	app_mpCmd;
    128              app_mpCmd.srcnbr = MP_DevInfo.termNbr;
    129              app_mpCmd.dstnbr = *dstnmbr;
    130              app_mpCmd.cmdtype = cmdtype;
    131              app_mpCmd.reserved = 0;
    132              app_mpCmd.seqnum = seqnum;
    133              return MP_SendSignalToCoord((uint8 *)&app_mpCmd, sizeof(app_mpCmd), MP_CMD_UP, true);
    134          }
    135          
    136          
    137          uint8 MP_SendSignalToCoord(const uint8 *p, uint8 len, uint8 msgtype, bool retrans )
    138          {
    139              return Hal_SendDataToAir(p,  len, MP_DevInfo.CoordPanID, 0x0000, msgtype, true, retrans);
    140          }
    141          
    142          uint8 MP_SendSignalToAllCoord(const uint8 *p, uint8 len, uint8 msgtype, bool retrans )
    143          {
    144              return Hal_SendDataToAir(p,  len, 0xFFFF, 0x0000, msgtype, false, false);
    145          }
    146          
    147          uint8 MP_SendTunnelToAllCoord(const uint8 *p, uint8 len, uint8 msgtype, bool retrans )
    148          {
    149              return Hal_SendDataTuunel(p,  len, 0xFFFF, 0xFFFF, msgtype, false, false);
    150          }
    151          
    152          uint8 MP_SendSignalToAllDev(const uint8 *p, uint8 len, uint8 msgtype, bool retrans )
    153          {
    154              return Hal_SendDataToAir(p,  len, 0xFFFF, 0xFFFF, msgtype, false, false);
    155          }
    156          
    157          void MP_start_timerEx( uint8 taskID, uint16 event_id, uint16 timeout_value )
    158          {
    159              if(ZSuccess != osal_start_timerEx( taskID,  event_id,  timeout_value))
    160              {
    161                  SystemReset();
    162              }
    163          }
    164          void MP_set_event(uint8 task_id, uint16 event_flag)
    165          {
    166              //if(ZSuccess != osal_set_event( task_id,  event_flag))
    167              if(ZSuccess != osal_start_timerEx(task_id,  event_flag, 1))
    168              {
    169                  SystemReset();
    170              }
    171          }
    172          bool MP_IsNwkOn(void)
    173          {
    174          
    175              if(MP_NwkInfo.nwkState == NWK_DETAIL_ENDDEVICE || MP_NwkInfo.nwkState == NWK_DETAIL_CELLSWITCHING)
    176              {
    177                  return true;
    178              }
    179              else
    180              {
    181                  return false;
    182              }
    183          }
    184          
    185          void MP_UpdateCellInfo(void)
    186          {
    187              MP_CellInfo.join_idx = 0;
    188              uint8 i;
    189          
    190              for(i = 0; i < MP_MAC_MAXSCAN_RESULTS; i++)
    191              {
    192                  if(MP_CellInfo.CellInfo[i].matched)  /* mark off matched flag for next scan */
    193                  {
    194                      MP_CellInfo.CellInfo[i].matched = false;
    195                  }
    196                  else		/* do not scaned the last time */
    197                  {
    198                      MP_CellInfo.CellInfo[i].cnt = 0;
    199                      MP_CellInfo.CellInfo[i].panid = APP_INVALIDARMADDR;
    200                      MP_CellInfo.CellInfo[i].rssi  = MP_MIN_RSSI;
    201                  }
    202              }
    203          }
    204          
    205          void MP_ClearCellInfo(void)
    206          {
    207              osal_memset(&MP_CellInfo, 0, sizeof(MP_CellCfg_info_t) );
    208          
    209              uint8 i;
    210              for(i = 0; i < MP_MAC_MAXSCAN_RESULTS; i++)
    211              {
    212                  MP_CellInfo.CellInfo[i].panid = APP_INVALIDARMADDR;
    213                  MP_CellInfo.CellInfo[i].rssi  = MP_MIN_RSSI;
    214                  MP_CellInfo.CellInfo[i].cnt = 0;
    215              }
    216          }
    217          
    218          bool MP_IsCellInfoEmpty(void)
    219          {
    220              bool flag = true;
    221          
    222              for(uint8 i = 0; i < MP_MAC_MAXSCAN_RESULTS; i++)
    223              {
    224                  if(MP_CellInfo.CellInfo[i].cnt > 0)
    225                  {
    226                      flag = false;
    227                      break;
    228                  }
    229              }
    230              return flag;
    231          }
    232          
    233          /* sort by rssi */
    234          void MP_SortCellInfo(void)
    235          {
    236              MP_cell_info_t *p;
    237              p = MP_CellInfo.CellInfo;
    238          
    239              for(uint8 i = 0; i < MP_MAC_MAXSCAN_RESULTS; i++)
    240              {
    241                  for(uint8 j = i + 1; j < MP_MAC_MAXSCAN_RESULTS; j++)
    242                  {
    243                      if(p[i].rssi < p[j].rssi)
    244                      {
    245                          MP_cell_info_t tmp;
    246                          tmp = p[i];
    247                          p[i] = p[j];
    248                          p[j] = tmp;
    249                      }
    250                  }
    251              }
    252          }
    253          
    254          void MP_VoiceScanShedule(void)
    255          {
    256          #define VOICE_TIMEINTERVAL	 (20*VOICE_IDX_THRESHOLD)  // 20ms*12
    257          
    258              if( MP_ScanInfo.isinshedule )
    259              {
    260                  uint32 tick = osal_GetSystemClock();
    261                  uint32 diff = tick - MP_AudioInfo.peer_tick;
    262          
    263                  if(diff > 2*VOICE_TIMEINTERVAL)
    264                  {
    265                      /*peer voice losted more than 2 times, start scan immediately */
    266                      MP_start_timerEx(MP_Function_TaskID, MP_FUNC_PERIODIC_SCAN_EVENT, 5);
    267                      MP_ScanInfo.isinshedule = false;
    268                  }
    269                  else
    270                  {
    271                      uint16 time;
    272                      diff %= VOICE_TIMEINTERVAL;
    273          
    274                      if(diff < VOICE_TIMEINTERVAL / 2)
    275                      {
    276                          time = 10;
    277                      }
    278                      else
    279                      {
    280                          time = VOICE_TIMEINTERVAL - diff + 30;
    281                      }
    282                      MP_start_timerEx(MP_Function_TaskID, MP_FUNC_PERIODIC_SCAN_EVENT, time);
    283                      MP_ScanInfo.isinshedule = false;
    284                  }
    285              }
    286          }
    287          void MP_SetPeerNum(const app_termNbr_t *pnbr)//const app_mpCmd_t *pCmd)
    288          {
    289              if(pnbr == NULL)   /*initial */
    290              {
    291                  MP_AudioInfo.peernmbr = MP_SHORT_INVALIDNMMBR;
    292                  for(uint8 i=0; i<APP_NMBRDIGIT; i++)
    293                  {
    294                      MP_AudioInfo.peer_termnbr.nbr[i] = 0xFF;
    295                  }
    296              }
    297              else
    298              {
    299                  char str[21];
    300                  num_term2str(str, pnbr);
    301                  //if(num_term_getlen(pnbr) == 4)        //YIRI MP has a 4-digital number
    302                  if((atoul(str)<=NUMBER_PHONE_MAX)&&(atoul(str)>=NUMBER_PHONE_MIN))
    303                  {
    304                      MP_AudioInfo.peernmbr = atoul(str);
    305                      MP_AudioInfo.peer_termnbr = *pnbr;
    306                      MP_AudioInfo.IsTalkWithGateWay = FALSE;
    307                      AudioSetInputGain(INGAIN_PHONE2PHONE);
    308          
    309                  }
    310                  else
    311                  {
    312                      MP_AudioInfo.peernmbr = MP_SHORT_GATEWAYNMBR;
    313                      MP_AudioInfo.peer_termnbr = *pnbr;
    314                      AudioSetInputGain(INGAIN_PHONE2GATEWAY);
    315                      MP_AudioInfo.IsTalkWithGateWay = TRUE;
    316                  }
    317              }
    318          
    319          }
    320          
    321          void MP_StopSignalRetrys(void)
    322          {
    323              osal_stop_timerEx(MP_TaskId, MP_DIALUP_RETRY_EVENT);
    324              osal_clear_event(MP_TaskId, MP_DIALUP_RETRY_EVENT);
    325          
    326              osal_stop_timerEx(MP_TaskId, MP_ACCEPT_RETRY_EVENT);
    327              osal_clear_event(MP_TaskId, MP_ACCEPT_RETRY_EVENT);
    328              MP_AudioInfo.accept_cnt = 0;
    329          
    330              osal_stop_timerEx(MP_TaskId, MP_CLOSE_RETRY_EVENT);
    331              osal_clear_event(MP_TaskId, MP_CLOSE_RETRY_EVENT);
    332              MP_AudioInfo.close_cnt = 0;
    333          
    334              /* unset all retry bitmaps */
    335              MP_AudioInfo.retrying_bitmap  = 0;
    336          }

   Maximum stack usage in bytes:

     Function                    ISTACK PSTACK XSTACK
     --------                    ------ ------ ------
     MP_ClearCellInfo                3      0      0
       -> osal_memset                4      0      0
     MP_EndTalk                      2      0      0
       -> MP_SendCmd                 4      0      0
       -> MP_ResetAudio              4      0      0
       -> MP_StopSignalRetrys        4      0      0
       -> MP_start_timerEx           4      0      0
     MP_IsCellInfoEmpty              2      0      0
     MP_IsNwkOn                      2      0      0
     MP_JudgeStatus                  2      0      0
     MP_ResetAudio                   0      0     12
       -> memset                     0      0     24
       -> AudioSetInputGain          0      0     20
       -> MP_ResetFrameblk           0      0     20
       -> HalRingClose               0      0     20
       -> HalAudioClose              0      0     20
       -> HalResetBackLightEvent     0      0     20
       -> FlushAudioBuffer           0      0     20
     MP_Rssi2Level                   3      0      0
     MP_SendCmd                      2      0     29
       -> MP_SendSignalToCoord       0      0     58
     MP_SendSignalToAllCoord         0      0     15
       -> Hal_SendDataToAir          0      0     30
     MP_SendSignalToAllDev           0      0     15
       -> Hal_SendDataToAir          0      0     30
     MP_SendSignalToCoord            0      0     46
       -> Hal_SendDataToAir          0      0     34
     MP_SendTunnelToAllCoord         0      0     15
       -> Hal_SendDataTuunel         0      0     30
     MP_SetPeerNum                   1      0     31
       -> num_term2str               0      0     62
       -> atoul                      0      0     62
       -> atoul                      0      0     62
       -> atoul                      0      0     62
       -> AudioSetInputGain          0      0     62
       -> AudioSetInputGain          0      0     62
     MP_SetStatus                    2      0      0
     MP_SortCellInfo                 2      0     17
     MP_StartTalk                    2      0      0
       -> HalResetBackLightEvent     4      0      0
       -> shake_ctrl                 4      0      0
       -> Hal_RingStop               4      0      0
       -> HalAudioOpen               4      0      0
     MP_StopSignalRetrys             2      0      0
       -> osal_stop_timerEx          4      0      0
       -> osal_clear_event           4      0      0
       -> osal_stop_timerEx          4      0      0
       -> osal_clear_event           4      0      0
       -> osal_stop_timerEx          4      0      0
       -> osal_clear_event           4      0      0
     MP_UpdateCellInfo               3      0      0
     MP_VoiceScanShedule             0      0     16
       -> osal_GetSystemClock        0      0     32
       -> MP_start_timerEx           0      0     32
       -> MP_start_timerEx           0      0     32
     MP_set_event                    0      0      9
       -> osal_start_timerEx         0      0     18
       -> SystemReset                0      0     18
     MP_start_timerEx                0      0     25
       -> osal_start_timerEx         0      0     18
       -> SystemReset                0      0     18


   Segment part sizes:

     Function/Label                  Bytes
     --------------                  -----
     MP_DevInfo                        27
     MP_AudioInfo                      22
     MP_NwkInfo                         1
     MP_ScanInfo                        2
     MP_CellInfo                       26
     MP_seqnums                         6
     nWorkStatus                        1
     RSSI_table                         4
     MP_JudgeStatus                    22
     ??Subroutine4_0                    7
     MP_SetStatus                      11
     ?Subroutine0                       1
     MP_ResetAudio                     68
     ??Subroutine7_0                    5
     MP_StartTalk                      20
     MP_EndTalk                        57
     MP_Rssi2Level                     38
     MP_SendCmd                       103
     ?Subroutine2                       5
     MP_SendSignalToCoord              53
     ?Subroutine3                      10
     MP_SendSignalToAllCoord           36
     ?Subroutine1                      12
     ??Subroutine5_0                    2
     ??Subroutine6_0                    3
     MP_SendTunnelToAllCoord           48
     MP_SendSignalToAllDev             36
     MP_start_timerEx                  17
     MP_set_event                      21
     MP_IsNwkOn                        26
     MP_UpdateCellInfo                 76
     MP_ClearCellInfo                  69
     MP_IsCellInfoEmpty                42
     MP_SortCellInfo                  197
     MP_VoiceScanShedule              134
     MP_SetPeerNum                    202
     MP_StopSignalRetrys               91
     __Constant_1e1                     4
     __Constant_f0                      4
     __Constant_78                      4
     ??MP_JudgeStatus?relay             6
     ??MP_SetStatus?relay               6
     ??MP_ResetAudio?relay              6
     ??MP_StartTalk?relay               6
     ??MP_EndTalk?relay                 6
     ??MP_Rssi2Level?relay              6
     ??MP_SendCmd?relay                 6
     ??MP_SendSignalToCoord?relay       6
     ??MP_SendSignalToAllCoord?relay    6
     ??MP_SendTunnelToAllCoord?relay    6
     ??MP_SendSignalToAllDev?relay      6
     ??MP_start_timerEx?relay           6
     ??MP_set_event?relay               6
     ??MP_IsNwkOn?relay                 6
     ??MP_UpdateCellInfo?relay          6
     ??MP_ClearCellInfo?relay           6
     ??MP_IsCellInfoEmpty?relay         6
     ??MP_SortCellInfo?relay            6
     ??MP_VoiceScanShedule?relay        6
     ??MP_SetPeerNum?relay              6
     ??MP_StopSignalRetrys?relay        6

 
 1 412 bytes in segment BANKED_CODE
   126 bytes in segment BANK_RELAYS
    16 bytes in segment XDATA_ROM_C
    85 bytes in segment XDATA_Z
 
 1 538 bytes of CODE  memory
     4 bytes of CONST memory (+ 12 bytes shared)
    85 bytes of XDATA memory

Errors: none
Warnings: none
